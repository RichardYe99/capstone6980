,@detection-method,@first-seen,@id,@last-updated,@severity,@status,code->#text,code->@start-line,comments->comment->#text,comments->comment->@commenter,comments->comment->@time,cwe->#text,cwe->@href,cwe->@id,location->@path,location->@type,location->line->@end,location->line->@start,results->result->@creation-time,results->result->@detection-method,results->result->@hash,results->result->@id,results->result->@severity,results->result->cves->cve->@sequence-number,results->result->cves->cve->@year,results->result->cwe->#text,results->result->cwe->@href,results->result->cwe->@id,results->result->description->#text,results->result->description->@format,results->result->location->@path,results->result->location->@raw-path,results->result->location->@type,results->result->location->column->@end,results->result->location->column->@start,results->result->location->line->@end,results->result->location->line->@start,results->result->tool->@category,results->result->tool->@code,results->result->tool->@name,results->result->tool->rule->@code,results->result->tool->rule->@name,results->result->tool->rule->description->#text,results->result->tool->rule->description->@format,rule->@code,rule->@name,rule->description->#text,rule->description->@format,standards->standard->@name,standards->standard->@violation,escalated_predicted,escalated_values_predicted,escalated_binary_predicted
0,Component Analysis,2020-05-18T14:51:00-04:00,66547,2020-05-18T14:54:28-04:00,high,escalated,,,,,,CWE-937: OWASP Top Ten 2013 Category A9 - Using Components with Known Vulnerabilities,http://cwevis.org/browse/937,937,Components/https-proxy-agent,logical,,,2020-05-18T14:52:15-04:00,Component Analysis,de4a92e3335b8c22d172ebfa95cbb88147c1e43d00d53c17fa3fcd1d915feba5,204111,high,,,,,,"Versions of `https-proxy-agent` prior to 2.2.3 are vulnerable to Machine-In-The-Middle. The package fails to enforce TLS on the socket if the proxy server responds the to the request with a HTTP status different than 200. This allows an attacker with access to the proxy server to intercept unencrypted communications, which may include sensitive information such as credentials.",plain-text,ProgramData/Code Dx/codedx_appdata/temp-files/store8838356813798345838_atom-x64-windows-369134701/Atom x64/resources/app/apm/package-lock.json?https-proxy-agent,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-369134701\Atom x64\resources\app\apm\package-lock.json?https-proxy-agent,file,,,,,,1184,Dependency-Check,DependencyCheck--1184,1184,Advisory 1184: Machine-In-The-Middle: - [HackerOne Report](https://hackerone.com/reports/541502),markdown,rule-153a7cf14b4e05a3b7495cf4a975c90c2d9c7422d3cc73751cb0c37ec23edd5e,Using Components with Known Vulnerabilities,"Components, such as libraries, frameworks, and other software modules, almost always run with full privileges. If a vulnerable component is exploited, such an attack can facilitate serious data loss or server takeover. Applications using components with known vulnerabilities may undermine application defenses and enable a range of possible attacks and impacts.

**References**

- [OWASP Top 10-A9: Using Components with Known Vulnerabilities](https://www.owasp.org/index.php/Top_10_2013-A9-Using_Components_with_Known_Vulnerabilities)
- [The Unfortunate Reality of Insecure Libraries](https://www.contrastsecurity.com/the-unfortunate-reality-of-insecure-libraries)
- [Addressing Security Concerns in Open Source Components](http://img.en25.com/Web/SonatypeInc/%7Bb2fa5ed8-938d-4bce-8a9c-d08ebeba826d%7D_Executive_Brief_-_Study-_Understanding_Security_Risks_in_OSS_Components-1.pdf)",markdown,,,escalated,0.8380073,1
1,Component Analysis,2020-05-18T14:51:00-04:00,66548,2020-05-18T14:54:28-04:00,critical,escalated,,,,,,CWE-937: OWASP Top Ten 2013 Category A9 - Using Components with Known Vulnerabilities,http://cwevis.org/browse/937,937,Components/open:0.0.5,logical,,,2020-05-18T14:52:15-04:00,Component Analysis,b7d43436a886f67b3b5ac1a33bd1b00073f0ca3f4257e810c554c80b6039b497,204117,critical,,,,,,"Versions of `open` before 6.0.0 are vulnerable to command injection when unsanitized user input is passed in.

The package does come with the following warning in the readme:

```
The same care should be taken when calling open as if you were calling child_process.exec directly. If it is an executable it will run in a new shell.
```",plain-text,ProgramData/Code Dx/codedx_appdata/temp-files/store8838356813798345838_atom-x64-windows-369134701/Atom x64/resources/app/apm/package-lock.json?open,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-369134701\Atom x64\resources\app\apm\package-lock.json?open,file,,,,,,663,Dependency-Check,DependencyCheck--663,663,Advisory 663: Command Injection: - [HackerOne Report](https://hackerone.com/reports/319473),markdown,rule-153a7cf14b4e05a3b7495cf4a975c90c2d9c7422d3cc73751cb0c37ec23edd5e,Using Components with Known Vulnerabilities,"Components, such as libraries, frameworks, and other software modules, almost always run with full privileges. If a vulnerable component is exploited, such an attack can facilitate serious data loss or server takeover. Applications using components with known vulnerabilities may undermine application defenses and enable a range of possible attacks and impacts.

**References**

- [OWASP Top 10-A9: Using Components with Known Vulnerabilities](https://www.owasp.org/index.php/Top_10_2013-A9-Using_Components_with_Known_Vulnerabilities)
- [The Unfortunate Reality of Insecure Libraries](https://www.contrastsecurity.com/the-unfortunate-reality-of-insecure-libraries)
- [Addressing Security Concerns in Open Source Components](http://img.en25.com/Web/SonatypeInc/%7Bb2fa5ed8-938d-4bce-8a9c-d08ebeba826d%7D_Executive_Brief_-_Study-_Understanding_Security_Risks_in_OSS_Components-1.pdf)",markdown,,,escalated,0.8406286,1
2,Component Analysis,2020-05-18T14:51:00-04:00,66550,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-937: OWASP Top Ten 2013 Category A9 - Using Components with Known Vulnerabilities,http://cwevis.org/browse/937,937,Components/jquery:2.0.3,logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-153a7cf14b4e05a3b7495cf4a975c90c2d9c7422d3cc73751cb0c37ec23edd5e,Using Components with Known Vulnerabilities,"Components, such as libraries, frameworks, and other software modules, almost always run with full privileges. If a vulnerable component is exploited, such an attack can facilitate serious data loss or server takeover. Applications using components with known vulnerabilities may undermine application defenses and enable a range of possible attacks and impacts.

**References**

- [OWASP Top 10-A9: Using Components with Known Vulnerabilities](https://www.owasp.org/index.php/Top_10_2013-A9-Using_Components_with_Known_Vulnerabilities)
- [The Unfortunate Reality of Insecure Libraries](https://www.contrastsecurity.com/the-unfortunate-reality-of-insecure-libraries)
- [Addressing Security Concerns in Open Source Components](http://img.en25.com/Web/SonatypeInc/%7Bb2fa5ed8-938d-4bce-8a9c-d08ebeba826d%7D_Executive_Brief_-_Study-_Understanding_Security_Risks_in_OSS_Components-1.pdf)",markdown,,,escalated,0.82287014,1
3,Component Analysis,2020-05-18T14:51:00-04:00,66551,2020-05-18T14:54:28-04:00,high,escalated,,,,,,CWE-937: OWASP Top Ten 2013 Category A9 - Using Components with Known Vulnerabilities,http://cwevis.org/browse/937,937,Components/libexpat,logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-153a7cf14b4e05a3b7495cf4a975c90c2d9c7422d3cc73751cb0c37ec23edd5e,Using Components with Known Vulnerabilities,"Components, such as libraries, frameworks, and other software modules, almost always run with full privileges. If a vulnerable component is exploited, such an attack can facilitate serious data loss or server takeover. Applications using components with known vulnerabilities may undermine application defenses and enable a range of possible attacks and impacts.

**References**

- [OWASP Top 10-A9: Using Components with Known Vulnerabilities](https://www.owasp.org/index.php/Top_10_2013-A9-Using_Components_with_Known_Vulnerabilities)
- [The Unfortunate Reality of Insecure Libraries](https://www.contrastsecurity.com/the-unfortunate-reality-of-insecure-libraries)
- [Addressing Security Concerns in Open Source Components](http://img.en25.com/Web/SonatypeInc/%7Bb2fa5ed8-938d-4bce-8a9c-d08ebeba826d%7D_Executive_Brief_-_Study-_Understanding_Security_Risks_in_OSS_Components-1.pdf)",markdown,,,escalated,0.8306581,1
4,Component Analysis,2020-05-18T14:51:00-04:00,66554,2020-05-18T14:54:28-04:00,high,escalated,,,,,,CWE-937: OWASP Top Ten 2013 Category A9 - Using Components with Known Vulnerabilities,http://cwevis.org/browse/937,937,Components/cryptiles,logical,,,2020-05-18T14:52:15-04:00,Component Analysis,98a443e5db3e1641dc9239db8d90113c6c106607951ec53a350652f4ebc0bbbc,204122,high,,,,,,Versions of `cryptiles` prior to 4.1.2 are vulnerable to Insufficient Entropy. The `randomDigits()` method does not provide sufficient entropy and its generates digits that are not evenly distributed.,plain-text,ProgramData/Code Dx/codedx_appdata/temp-files/store8838356813798345838_atom-x64-windows-369134701/Atom x64/resources/app/apm/package-lock.json?cryptiles,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-369134701\Atom x64\resources\app\apm\package-lock.json?cryptiles,file,,,,,,1464,Dependency-Check,DependencyCheck--1464,1464,Advisory 1464: Insufficient Entropy: - [GitHub PR](https://github.com/hapijs/cryptiles/issues/34),markdown,rule-153a7cf14b4e05a3b7495cf4a975c90c2d9c7422d3cc73751cb0c37ec23edd5e,Using Components with Known Vulnerabilities,"Components, such as libraries, frameworks, and other software modules, almost always run with full privileges. If a vulnerable component is exploited, such an attack can facilitate serious data loss or server takeover. Applications using components with known vulnerabilities may undermine application defenses and enable a range of possible attacks and impacts.

**References**

- [OWASP Top 10-A9: Using Components with Known Vulnerabilities](https://www.owasp.org/index.php/Top_10_2013-A9-Using_Components_with_Known_Vulnerabilities)
- [The Unfortunate Reality of Insecure Libraries](https://www.contrastsecurity.com/the-unfortunate-reality-of-insecure-libraries)
- [Addressing Security Concerns in Open Source Components](http://img.en25.com/Web/SonatypeInc/%7Bb2fa5ed8-938d-4bce-8a9c-d08ebeba826d%7D_Executive_Brief_-_Study-_Understanding_Security_Risks_in_OSS_Components-1.pdf)",markdown,,,escalated,0.8328197,1
5,Component Analysis,2020-05-18T14:51:00-04:00,66555,2020-05-18T14:54:28-04:00,critical,escalated,,,,,,CWE-937: OWASP Top Ten 2013 Category A9 - Using Components with Known Vulnerabilities,http://cwevis.org/browse/937,937,Components/pcre,logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-153a7cf14b4e05a3b7495cf4a975c90c2d9c7422d3cc73751cb0c37ec23edd5e,Using Components with Known Vulnerabilities,"Components, such as libraries, frameworks, and other software modules, almost always run with full privileges. If a vulnerable component is exploited, such an attack can facilitate serious data loss or server takeover. Applications using components with known vulnerabilities may undermine application defenses and enable a range of possible attacks and impacts.

**References**

- [OWASP Top 10-A9: Using Components with Known Vulnerabilities](https://www.owasp.org/index.php/Top_10_2013-A9-Using_Components_with_Known_Vulnerabilities)
- [The Unfortunate Reality of Insecure Libraries](https://www.contrastsecurity.com/the-unfortunate-reality-of-insecure-libraries)
- [Addressing Security Concerns in Open Source Components](http://img.en25.com/Web/SonatypeInc/%7Bb2fa5ed8-938d-4bce-8a9c-d08ebeba826d%7D_Executive_Brief_-_Study-_Understanding_Security_Risks_in_OSS_Components-1.pdf)",markdown,,,escalated,0.8275683,1
6,Component Analysis,2020-05-18T14:51:00-04:00,66556,2020-05-18T14:54:28-04:00,critical,escalated,,,,,,CWE-937: OWASP Top Ten 2013 Category A9 - Using Components with Known Vulnerabilities,http://cwevis.org/browse/937,937,Components/sqlite,logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-153a7cf14b4e05a3b7495cf4a975c90c2d9c7422d3cc73751cb0c37ec23edd5e,Using Components with Known Vulnerabilities,"Components, such as libraries, frameworks, and other software modules, almost always run with full privileges. If a vulnerable component is exploited, such an attack can facilitate serious data loss or server takeover. Applications using components with known vulnerabilities may undermine application defenses and enable a range of possible attacks and impacts.

**References**

- [OWASP Top 10-A9: Using Components with Known Vulnerabilities](https://www.owasp.org/index.php/Top_10_2013-A9-Using_Components_with_Known_Vulnerabilities)
- [The Unfortunate Reality of Insecure Libraries](https://www.contrastsecurity.com/the-unfortunate-reality-of-insecure-libraries)
- [Addressing Security Concerns in Open Source Components](http://img.en25.com/Web/SonatypeInc/%7Bb2fa5ed8-938d-4bce-8a9c-d08ebeba826d%7D_Executive_Brief_-_Study-_Understanding_Security_Risks_in_OSS_Components-1.pdf)",markdown,,,escalated,0.8275683,1
7,Component Analysis,2020-05-18T14:51:00-04:00,66558,2020-05-18T14:54:28-04:00,high,escalated,,,,,,CWE-937: OWASP Top Ten 2013 Category A9 - Using Components with Known Vulnerabilities,http://cwevis.org/browse/937,937,Components/fstream,logical,,,2020-05-18T14:52:15-04:00,Component Analysis,ff96d76d503d09052a39ba2f97e31b86d496c820b4ea8b10018567d27bca08b6,204120,high,,,,,,Versions of `fstream` prior to 1.0.12 are vulnerable to Arbitrary File Overwrite. Extracting tarballs containing a hardlink to a file that already exists in the system and a file that matches the hardlink will overwrite the system's file with the contents of the extracted file. The `fstream.DirWriter()` function is vulnerable.,plain-text,ProgramData/Code Dx/codedx_appdata/temp-files/store8838356813798345838_atom-x64-windows-369134701/Atom x64/resources/app/apm/package-lock.json?fstream,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-369134701\Atom x64\resources\app\apm\package-lock.json?fstream,file,,,,,,886,Dependency-Check,DependencyCheck--886,886,Advisory 886: Arbitrary File Overwrite: - [GitHub Commit](https://github.com/npm/fstream/commit/6a77d2fa6e1462693cf8e46f930da96ec1b0bb22),markdown,rule-153a7cf14b4e05a3b7495cf4a975c90c2d9c7422d3cc73751cb0c37ec23edd5e,Using Components with Known Vulnerabilities,"Components, such as libraries, frameworks, and other software modules, almost always run with full privileges. If a vulnerable component is exploited, such an attack can facilitate serious data loss or server takeover. Applications using components with known vulnerabilities may undermine application defenses and enable a range of possible attacks and impacts.

**References**

- [OWASP Top 10-A9: Using Components with Known Vulnerabilities](https://www.owasp.org/index.php/Top_10_2013-A9-Using_Components_with_Known_Vulnerabilities)
- [The Unfortunate Reality of Insecure Libraries](https://www.contrastsecurity.com/the-unfortunate-reality-of-insecure-libraries)
- [Addressing Security Concerns in Open Source Components](http://img.en25.com/Web/SonatypeInc/%7Bb2fa5ed8-938d-4bce-8a9c-d08ebeba826d%7D_Executive_Brief_-_Study-_Understanding_Security_Risks_in_OSS_Components-1.pdf)",markdown,,,escalated,0.83764327,1
8,Component Analysis,2020-05-18T14:51:00-04:00,66560,2020-05-18T14:54:28-04:00,high,escalated,,,,,,CWE-937: OWASP Top Ten 2013 Category A9 - Using Components with Known Vulnerabilities,http://cwevis.org/browse/937,937,Components/git,logical,,,2020-05-18T14:52:16-04:00,Component Analysis,99dd0351f6e74ad9c309c94dc7a80c38b16b370eb35329591e962dfba4997d1b,204449,high,2542,2010,CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer,http://cwevis.org/browse/119,119,Stack-based buffer overflow in the is_git_directory function in setup.c in Git before 1.7.2.1 allows local users to gain privileges via a long gitdir: field in a .git file in a working copy.,plain-text,Atom x64/resources/app.asar.unpacked/node_modules/dugite/git/mingw64/bin/git-sh-i18n--envsubst.exe,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-369134701\Atom x64\resources\app.asar.unpacked\node_modules\dugite\git\mingw64\bin\git-sh-i18n--envsubst.exe,file,,,,,,CVE-2010-2542,Dependency-Check,DependencyCheck--CVE20102542,CVE-2010-2542,"* [http://www.kernel.org/pub/software/scm/git/docs/RelNotes-1.7.2.1.txt](<http://www.kernel.org/pub/software/scm/git/docs/RelNotes-1.7.2.1.txt>)
* [https://bugzilla.redhat.com/show_bug.cgi?id=618108](<https://bugzilla.redhat.com/show_bug.cgi?id=618108>)
* [[oss-security] 20100722 Re: CVE request: git](<http://www.openwall.com/lists/oss-security/2010/07/22/4>)
* [http://git.kernel.org/?p=git/git.git;a=commit;h=3c9d0414ed2db0167e6c828b547be8fc9f88fccc](<http://git.kernel.org/?p=git/git.git;a=commit;h=3c9d0414ed2db0167e6c828b547be8fc9f88fccc>)
* [ADV-2011-0464](<http://www.vupen.com/english/advisories/2011/0464>)
* [43457](<http://secunia.com/advisories/43457>)
* [[oss-security] 20100721 CVE request: git](<http://www.openwall.com/lists/oss-security/2010/07/22/1>)
* [SUSE-SR:2011:004](<http://lists.opensuse.org/opensuse-security-announce/2011-02/msg00004.html>)
* [41891](<http://www.securityfocus.com/bid/41891>)",markdown,rule-153a7cf14b4e05a3b7495cf4a975c90c2d9c7422d3cc73751cb0c37ec23edd5e,Using Components with Known Vulnerabilities,"Components, such as libraries, frameworks, and other software modules, almost always run with full privileges. If a vulnerable component is exploited, such an attack can facilitate serious data loss or server takeover. Applications using components with known vulnerabilities may undermine application defenses and enable a range of possible attacks and impacts.

**References**

- [OWASP Top 10-A9: Using Components with Known Vulnerabilities](https://www.owasp.org/index.php/Top_10_2013-A9-Using_Components_with_Known_Vulnerabilities)
- [The Unfortunate Reality of Insecure Libraries](https://www.contrastsecurity.com/the-unfortunate-reality-of-insecure-libraries)
- [Addressing Security Concerns in Open Source Components](http://img.en25.com/Web/SonatypeInc/%7Bb2fa5ed8-938d-4bce-8a9c-d08ebeba826d%7D_Executive_Brief_-_Study-_Understanding_Security_Risks_in_OSS_Components-1.pdf)",markdown,,,escalated,0.85588914,1
9,Component Analysis,2020-05-18T14:51:00-04:00,66561,2020-05-18T14:54:28-04:00,high,escalated,,,,,,CWE-937: OWASP Top Ten 2013 Category A9 - Using Components with Known Vulnerabilities,http://cwevis.org/browse/937,937,Components/tar,logical,,,2020-05-18T14:52:15-04:00,Component Analysis,847a3ec818741c3f9ce13a7b0344672e5bd2dd32b011e1ba258094e52346bf95,204123,high,,,,,,"Versions of `tar` prior to 4.4.2 for 4.x and 2.2.2 for 2.x are vulnerable to Arbitrary File Overwrite. Extracting tarballs containing a hardlink to a file that already exists in the system, and a file that matches the hardlink will overwrite the system's file with the contents of the extracted file.",plain-text,ProgramData/Code Dx/codedx_appdata/temp-files/store8838356813798345838_atom-x64-windows-369134701/Atom x64/resources/app/apm/package-lock.json?tar,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-369134701\Atom x64\resources\app\apm\package-lock.json?tar,file,,,,,,803,Dependency-Check,DependencyCheck--803,803,Advisory 803: Arbitrary File Overwrite: - [HackerOne Report](https://hackerone.com/reports/344595),markdown,rule-153a7cf14b4e05a3b7495cf4a975c90c2d9c7422d3cc73751cb0c37ec23edd5e,Using Components with Known Vulnerabilities,"Components, such as libraries, frameworks, and other software modules, almost always run with full privileges. If a vulnerable component is exploited, such an attack can facilitate serious data loss or server takeover. Applications using components with known vulnerabilities may undermine application defenses and enable a range of possible attacks and impacts.

**References**

- [OWASP Top 10-A9: Using Components with Known Vulnerabilities](https://www.owasp.org/index.php/Top_10_2013-A9-Using_Components_with_Known_Vulnerabilities)
- [The Unfortunate Reality of Insecure Libraries](https://www.contrastsecurity.com/the-unfortunate-reality-of-insecure-libraries)
- [Addressing Security Concerns in Open Source Components](http://img.en25.com/Web/SonatypeInc/%7Bb2fa5ed8-938d-4bce-8a9c-d08ebeba826d%7D_Executive_Brief_-_Study-_Understanding_Security_Risks_in_OSS_Components-1.pdf)",markdown,,,escalated,0.8409416,1
10,Static Analysis,2020-05-18T14:51:00-04:00,66565,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/IO/RewindableStream/StartRecording,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201131,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/IO/RewindableStream/StartRecording,SharpCompress/IO/RewindableStream/StartRecording,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
11,Static Analysis,2020-05-18T14:51:00-04:00,66566,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Squirrel/Shell/ShellLink/set_Description,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201265,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Squirrel/Shell/ShellLink/set_Description,Squirrel/Shell/ShellLink/set_Description,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
12,Static Analysis,2020-05-18T14:51:00-04:00,66606,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Writers/GZip/GZipWriter/Write,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201116,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Writers/GZip/GZipWriter/Write,SharpCompress/Writers/GZip/GZipWriter/Write,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
13,Static Analysis,2020-05-18T14:51:00-04:00,66621,2020-05-18T14:54:28-04:00,high,escalated,"}
        try {
          if (fs.isSymbolicLinkSync(targetPath)) {
            fs.unlinkSync(targetPath);
          }
          fs.makeTreeSync(path.dirname(targetPath));
          fs.symlinkSync(linkPath, targetPath, 'junction');",49,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/lib/link.js,file,52,52,2020-05-18T14:51:36-04:00,Static Analysis,f51f6f33e31fed24e3317f2ff0266f8a2a2487a96c7aad7b458e34ab2b852cca,193256,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Found fs.unlinkSync with non literal argument at index 0,plain-text,Atom x64/resources/app/apm/lib/link.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\link.js,file,26,13,52,52,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.9773905,1
14,Static Analysis,2020-05-18T14:51:00-04:00,66622,2020-05-18T14:54:28-04:00,medium,false-positive,"(function() {
  var CSON, Command, Link, config, fs, path, yargs;

  path = require('path');

  CSON = require('season');",1,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/link.js,file,4,4,2020-05-18T14:51:36-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,193201,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/link.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\link.js,file,17,10,4,4,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
15,Static Analysis,2020-05-18T14:51:00-04:00,66623,2020-05-18T14:54:28-04:00,medium,false-positive,"CSON = require('season');

  yargs = require('yargs');

  Command = require('./command');",5,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/link.js,file,8,8,2020-05-18T14:51:36-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,193204,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/link.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\link.js,file,18,11,8,8,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
16,Static Analysis,2020-05-18T14:51:00-04:00,66624,2020-05-18T14:54:28-04:00,high,escalated,"packageName = options.argv.name;
        try {
          if (!packageName) {
            packageName = CSON.readFileSync(CSON.resolve(path.join(linkPath, 'package'))).name;
          }
        } catch (error1) {}
        if (!packageName) {",32,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/lib/link.js,file,35,35,2020-05-18T14:51:36-04:00,Static Analysis,374ad040fff48d9edaa97052bf28a674b1f4e79af66a0448f1ab1699003790cd,193239,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Found fs.readFileSync with non literal argument at index 0,plain-text,Atom x64/resources/app/apm/lib/link.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\link.js,file,44,27,35,35,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.9758102,1
17,Static Analysis,2020-05-18T14:51:00-04:00,66626,2020-05-18T14:54:28-04:00,medium,false-positive,"path = require('path');

  CSON = require('season');

  yargs = require('yargs');",3,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/link.js,file,6,6,2020-05-18T14:51:36-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,193202,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/link.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\link.js,file,17,10,6,6,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
18,Static Analysis,2020-05-18T14:51:00-04:00,66627,2020-05-18T14:54:28-04:00,medium,false-positive,"yargs = require('yargs');

  Command = require('./command');

  config = require('./apm');",7,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/link.js,file,10,10,2020-05-18T14:51:36-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,193206,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/link.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\link.js,file,20,13,10,10,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
19,Static Analysis,2020-05-18T14:51:00-04:00,66628,2020-05-18T14:54:28-04:00,medium,false-positive,"Command = require('./command');

  config = require('./apm');

  fs = require('./fs');",9,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/link.js,file,12,12,2020-05-18T14:51:36-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,193208,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/link.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\link.js,file,19,12,12,12,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
20,Static Analysis,2020-05-18T14:51:00-04:00,66630,2020-05-18T14:54:28-04:00,medium,false-positive,"fs = require('./fs');

  module.exports = Link = (function() {
    class Link extends Command {
      parseOptions(argv) {
        var options;",13,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/link.js,file,16,16,2020-05-18T14:51:36-04:00,Static Analysis,62173c3357301b64bcb7cb49ad65b9eeb8aa24356212b93fe0fe0166d3218ce7,193211,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'module' is not defined.,plain-text,Atom x64/resources/app/apm/lib/link.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\link.js,file,9,3,16,16,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.068299174,0
21,Static Analysis,2020-05-18T14:51:00-04:00,66631,2020-05-18T14:54:28-04:00,medium,false-positive,"({callback} = options);
        options = this.parseOptions(options.commandArgs);
        packagePath = (ref = (ref1 = options.argv._[0]) != null ? ref1.toString() : void 0) != null ? ref : '.';
        linkPath = path.resolve(process.cwd(), packagePath);
        packageName = options.argv.name;
        try {
          if (!packageName) {",28,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/link.js,file,31,31,2020-05-18T14:51:36-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,193235,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/link.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\link.js,file,40,33,31,31,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
22,Static Analysis,2020-05-18T14:51:00-04:00,66633,2020-05-18T14:54:28-04:00,medium,false-positive,"config = require('./apm');

  fs = require('./fs');

  module.exports = Link = (function() {
    class Link extends Command {",11,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/link.js,file,14,14,2020-05-18T14:51:36-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,193210,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/link.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\link.js,file,15,8,14,14,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
23,Static Analysis,2020-05-18T14:51:00-04:00,66634,2020-05-18T14:54:28-04:00,high,escalated,"fs.unlinkSync(targetPath);
          }
          fs.makeTreeSync(path.dirname(targetPath));
          fs.symlinkSync(linkPath, targetPath, 'junction');
          console.log(`${targetPath} -> ${linkPath}`);
          return callback();
        } catch (error1) {",52,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/lib/link.js,file,55,55,2020-05-18T14:51:36-04:00,Static Analysis,2f79f28800456c387ff56c2575de08400e8a62380d0ea4c8e5cdd4036a7510ad,193259,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,"Found fs.symlinkSync with non literal argument at index 0,1",plain-text,Atom x64/resources/app/apm/lib/link.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\link.js,file,25,11,55,55,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.974016,1
24,Static Analysis,2020-05-18T14:51:00-04:00,66637,2020-05-18T14:54:28-04:00,high,escalated,"parseOptions(argv) {
        var options;
        options = yargs(argv).wrap(Math.min(100, yargs.terminalWidth()));
        options.usage(""\nUsage: apm link [<package_path>] [--name <package_name>]\n\nCreate a symlink for the package in ~/.atom/packages. The package in the\ncurrent working directory is linked if no path is given.\n\nRun `apm links` to view all the currently linked packages."");
        options.alias('h', 'help').describe('help', 'Print this usage message');
        return options.alias('d', 'dev').boolean('dev').describe('dev', 'Link to ~/.atom/dev/packages');
      }",18,,,,CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'),http://cwevis.org/browse/79,79,Atom x64/resources/app/apm/lib/link.js,file,21,21,2020-05-18T14:51:36-04:00,Static Analysis,b4414dd3b1087806bb332146e753f5917a3aec259e29c568ca289f9ab428d0d4,193217,high,,,CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS),http://cwevis.org/browse/80,80,HTML passed in to function 'options.usage',plain-text,Atom x64/resources/app/apm/lib/link.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\link.js,file,22,9,21,21,xss,no-mixed-html,ESLint,ESLINT-XSS-no-mixed-html,No mixed html,"Wanted a way to catch XSS issues in code before they end up in production.

## Rule Details

This rule aims to catch as many XSS issues by examining the code as possible.
The rule checks for mixed html/non-html content, unescaped input, etc.

The following patterns are considered warnings:

```js

// Mixed content
var x = '<div>' + input + '</div>';
$node.html( '<div>' + input + '</div>' );

// Unsafe container names.
var html = input;
var text = htmlInput;
displayValue( htmlInput );

// Checking certain expression parameters that might end up in the variables.
var htmlItems = [ input1, input2 ].join();
var textItems = [ '<div>', input, '</div>' ].join();
var tag = isNumbered ? '<ol>' : '<ul>';

// Checking function return values.
var createHtml = function( item ) { return item.name; }
var createBox = function( item ) { return '<div>' + encode( item ) + '</div>' }

```

The following patterns are not warnings:

```js

// Proper encoding
var html = '<div>' + encode( input ) + '</div>';
$node.html( '<div>' + encode( input ) + '</div>' );

// Proper container names
var html = '<img src=""happy.png"">';
var text = textbox.value;

```

## When Not To Use It

If you are creating a Node.js application that doesn't output any HTML, you can
safely disable this rule.

## Further Reading

- [XSS Prevention CHeat Sheet - OWASP](https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet)",markdown,rule-396ebe8bb0c3dc5d4eb2b5368a97688fdb0f2587416453645c3d06db2b216479,Cross-site Scripting (XSS),"Cross-site scripting (XSS) vulnerabilities occur when:
1. Untrusted data enters a web application, typically from a web request.
2. The web application dynamically generates a web page that contains this untrusted data.
3. During page generation, the application does not prevent the data from containing content that is executable by a web browser, such as JavaScript, HTML tags, HTML attributes, mouse events, Flash, ActiveX, etc.
4. A victim visits the generated web page through a web browser, which contains malicious script that was injected using the untrusted data.
5. Since the script comes from a web page that was sent by the web server, the victim's web browser executes the malicious script in the context of the web server's domain.
6. This effectively violates the intention of the web browser's same-origin policy, which states that scripts in one domain should not be able to access resources or run code in a different domain.
There are three main kinds of XSS:

*Reflected XSS (or Non-Persistent)*

The server reads data directly from the HTTP request and reflects it back in the HTTP response. Reflected XSS exploits occur when an attacker causes a victim to supply dangerous content to a vulnerable web application, which is then reflected back to the victim and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to the victim. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces a victim to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the victim, the content is executed by the victim's browser.

*Stored XSS (or Persistent)*

The application stores dangerous data in a database, message forum, visitor log, or other trusted data store. At a later time, the dangerous data is subsequently read back into the application and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. For example, the attacker might inject XSS into a log message, which might not be handled properly when an administrator views the logs.

*DOM-Based XSS*

In DOM-based XSS, the client performs the injection of XSS into the page; in the other types, the server performs the injection. DOM-based XSS generally involves server-controlled, trusted script that is sent to the client, such as Javascript that performs sanity checks on a form before the user submits it. If the server-supplied script processes user-supplied data and then injects it back into the web page (such as with dynamic HTML), then DOM-based XSS is possible.

Once the malicious script is injected, the attacker can perform a variety of malicious activities. The attacker could transfer private information, such as cookies that may include session information, from the victim's machine to the attacker. The attacker could send malicious requests to a web site on behalf of the victim, which could be especially dangerous to the site if the victim has administrator privileges to manage that site. Phishing attacks could be used to emulate trusted web sites and trick the victim into entering a password, allowing the attacker to compromise the victim's account on that web site. Finally, the script could exploit a vulnerability in the web browser itself possibly taking over the victim's machine, sometimes referred to as ""drive-by hacking.""

In many cases, the attack can be launched without the victim even being aware of it. Even with careful users, attackers frequently use a variety of methods to encode the malicious portion of the attack, such as URL encoding or Unicode, so the request looks less suspicious.

**Guidance**

To remedy XSS vulnerabilities, it is important to never use untrusted or unfiltered data within the code of a HTML page.

Untrusted data can originate not only form the client but potentially a third party or previously uploaded file etc.

Filtering of untrusted data typically involves converting special characters to their HTML entity encoded counterparts (however, other methods do exist, see references).

These special characters include:

* `&`
* `<`
* `>`
* `""`
* `'`
* `/`

An example of HTML entity encoding is converting `<` to `&lt;`.

Although it is possible to filter untrusted input, there are five locations within an HTML page where untrusted input (even if it has been filtered) should never be placed:

1. Directly in a script.
2. Inside an HTML comment.
3. In an attribute name.
4. In a tag name.
5. Directly in CSS.

Each of these locations have their own form of escaping and filtering.

Because many browsers attempt to implement XSS protection, any manual verification of this finding should be conducted using multiple different browsers and browser
versions.

**References**

- [WASC](http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting)
- [Secunia](http://secunia.com/advisories/9716/)
- [OWASP XSS Prevention Cheat Sheet](https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet)
- [OWASP DOM Based XSS](https://www.owasp.org/index.php/DOM_Based_XSS)
- [OWASP DOM Based XSS Prevention Cheat Sheet](https://www.owasp.org/index.php/DOM_based_XSS_Prevention_Cheat_Sheet)",markdown,,,escalated,0.8266207,1
25,Static Analysis,2020-05-18T14:51:00-04:00,66638,2020-05-18T14:54:28-04:00,high,escalated,"} else {
          targetPath = path.join(config.getAtomDirectory(), 'packages', packageName);
        }
        if (!fs.existsSync(linkPath)) {
          callback(`Package directory does not exist: ${linkPath}`);
          return;
        }",43,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/lib/link.js,file,46,46,2020-05-18T14:51:36-04:00,Static Analysis,a8eb318301dc105f6b242fce363923637060c403e8c9c7b93b984891497b7744,193255,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Found fs.existsSync with non literal argument at index 0,plain-text,Atom x64/resources/app/apm/lib/link.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\link.js,file,27,14,46,46,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.96763015,1
26,Static Analysis,2020-05-18T14:51:00-04:00,66649,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,NuGet/TaskExtensions/WhenAny,logical,,,2020-05-18T14:51:56-04:00,Static Analysis,76b6d72d4e95684a090839ef7f980773efcf0ca60f109fccf30824c47477863c,200215,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,This disposable local is not guaranteed to be disposed of before the method returns. Use a 'using' statement or surround the local's usage with a try/finally block. Local of type 'Task' is not disposed of (at least not locally).,plain-text,NuGet/TaskExtensions/WhenAny,NuGet/TaskExtensions/WhenAny,logical,,,,,,EnsureLocalDisposalRule,Gendarme,GEND-EnsureLocalDisposalRule,Ensure Local Disposal ,"This rule checks that disposable locals are always disposed of before
the method returns. Use a 'using' statement (or a try/finally block) to
guarantee local disposal even in the event an unhandled exception
occurs.

**Bad** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    DecodeHeader (stream);
    if (!DecodedHeader.HasContent) {
        return;
    }
    DecodeContent (stream);
    stream.Dispose ();
}
```
**Good** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        DecodeHeader (stream);
        if (!DecodedHeader.HasContent) {
            return;
        }
        DecodeContent (stream);
    }
}
```
**Bad** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    Decode (stream);
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
    stream.Dispose ();
}
```
**Good** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        Decode (stream);
    }
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.98076445,1
27,Static Analysis,2020-05-18T14:51:00-04:00,66658,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Compressors/BZip2/CBZip2OutputStream/Finish,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201177,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Compressors/BZip2/CBZip2OutputStream/Finish,SharpCompress/Compressors/BZip2/CBZip2OutputStream/Finish,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
28,Static Analysis,2020-05-18T14:51:00-04:00,66660,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Common/Rar/RarCryptoWrapper/Read,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201195,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Common/Rar/RarCryptoWrapper/Read,SharpCompress/Common/Rar/RarCryptoWrapper/Read,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
29,Static Analysis,2020-05-18T14:51:00-04:00,66742,2020-05-18T14:54:28-04:00,high,escalated,,,,,,CWE-227: 7PK - API Abuse,http://cwevis.org/browse/227,227,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/Native/NCryptNative/UnsafeNativeMethods/(self),logical,,,2020-05-18T14:52:00-04:00,Static Analysis,dbd57bbd7b01d2cdc8d58222b94308e03da707a5c7a5e9eab6acb7a083c63ff7,202211,high,,,CWE-676: Use of Potentially Dangerous Function,http://cwevis.org/browse/676,676,This type or method is decorated with [SuppressUnmanagedCodeSecurity] which reduce the number of security checks done when unmanaged code is called. Ensure that use of this attribute does not compromise the security of the application.,plain-text,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/Native/NCryptNative/UnsafeNativeMethods/(self),Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/Native/NCryptNative/UnsafeNativeMethods/(self),logical,,,,,,ReviewSuppressUnmanagedCodeSecurityUsageRule,Gendarme,GEND-ReviewSuppressUnmanagedCodeSecurityUsageRule,Review Suppress Unmanaged Code Security Usage ,"This rule fires if a type or method is decorated with the
**[SuppressUnmanagedCodeSecurity]**attribute. This attribute reduces the
security checks done when executing unmanaged code and its usage should
be reviewed to confirm that no exploitable security holes are present.

Example:


```csharp
[SuppressUnmanagedCodeSecurity]
public class Safe {
    [DllImport (""User32.dll"")]
    static extern Boolean MessageBeep (UInt32 beepType);
}
```",markdown,rule-dc56fd6c6aaaf7aef3e91a691e1f8bd8f7311763a2d3286fce16c6c5cf52b5e2,API Abuse,"The software uses an API in a manner contrary to its intended use.

An API is a contract between a caller and a callee. The most common forms of API misuse occurs when the caller does not honor its end of this contract. For example, if a program does not call chdir() after calling chroot(), it violates the contract that specifies how to change the active root directory in a secure fashion. Another good example of library abuse is expecting the callee to return trustworthy DNS information to the caller. In this case, the caller misuses the callee API by making certain assumptions about its behavior (that the return value can be used for authentication purposes). One can also violate the caller-callee contract from the other side. For example, if a coder subclasses SecureRandom and returns a non-random value, the contract is violated.",markdown,,,escalated,0.9466878,1
30,Static Analysis,2020-05-18T14:51:00-04:00,66777,2020-05-18T14:54:28-04:00,medium,false-positive,"config = require('./apm');

  Command = require('./command');

  fs = require('./fs');",13,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/star.js,file,16,16,2020-05-18T14:51:41-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,194638,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/star.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\star.js,file,20,13,16,16,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270798,0
31,Static Analysis,2020-05-18T14:51:00-04:00,66778,2020-05-18T14:54:28-04:00,medium,false-positive,"_ = require('underscore-plus');

  async = require('async');

  CSON = require('season');",5,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/star.js,file,8,8,2020-05-18T14:51:41-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,194626,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/star.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\star.js,file,18,11,8,8,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270798,0
32,Static Analysis,2020-05-18T14:51:00-04:00,66780,2020-05-18T14:54:28-04:00,high,escalated,"}
          if (manifestPath = CSON.resolve(path.join(userPackagesDirectory, child, 'package'))) {
            try {
              metadata = (ref1 = CSON.readFileSync(manifestPath)) != null ? ref1 : {};
              if (metadata.name && Packages.getRepository(metadata)) {
                installedPackages.push(metadata.name);
              }",77,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/lib/star.js,file,80,80,2020-05-18T14:51:41-04:00,Static Analysis,374ad040fff48d9edaa97052bf28a674b1f4e79af66a0448f1ab1699003790cd,194665,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Found fs.readFileSync with non literal argument at index 0,plain-text,Atom x64/resources/app/apm/lib/star.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\star.js,file,51,34,80,80,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.9758102,1
33,Static Analysis,2020-05-18T14:51:00-04:00,66782,2020-05-18T14:54:28-04:00,medium,false-positive,"path = require('path');

  _ = require('underscore-plus');

  async = require('async');",3,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/star.js,file,6,6,2020-05-18T14:51:41-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,194622,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/star.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\star.js,file,14,7,6,6,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
34,Static Analysis,2020-05-18T14:51:00-04:00,66785,2020-05-18T14:54:28-04:00,medium,false-positive,"Login = require('./login');

  Packages = require('./packages');

  request = require('./request');",19,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/star.js,file,22,22,2020-05-18T14:51:41-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,194641,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/star.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\star.js,file,21,14,22,22,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
35,Static Analysis,2020-05-18T14:51:00-04:00,66786,2020-05-18T14:54:28-04:00,medium,false-positive,"starPackage(packageName, {ignoreUnpublishedPackages, token} = {}, callback) {
        var requestSettings;
        if (process.platform === 'darwin') {
          process.stdout.write('\u2B50  ');
        }
        process.stdout.write(`Starring ${packageName} `);
        requestSettings = {",36,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/star.js,file,39,39,2020-05-18T14:51:41-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,194653,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/star.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\star.js,file,18,11,39,39,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
36,Static Analysis,2020-05-18T14:51:00-04:00,66787,2020-05-18T14:54:28-04:00,medium,false-positive,"CSON = require('season');

  yargs = require('yargs');

  config = require('./apm');",9,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/star.js,file,12,12,2020-05-18T14:51:41-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,194634,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/star.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\star.js,file,18,11,12,12,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
37,Static Analysis,2020-05-18T14:51:00-04:00,66794,2020-05-18T14:54:28-04:00,medium,false-positive,"yargs = require('yargs');

  config = require('./apm');

  Command = require('./command');",11,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/star.js,file,14,14,2020-05-18T14:51:41-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,194637,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/star.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\star.js,file,19,12,14,14,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
38,Static Analysis,2020-05-18T14:51:00-04:00,66795,2020-05-18T14:54:28-04:00,medium,false-positive,"starPackage(packageName, {ignoreUnpublishedPackages, token} = {}, callback) {
        var requestSettings;
        if (process.platform === 'darwin') {
          process.stdout.write('\u2B50  ');
        }
        process.stdout.write(`Starring ${packageName} `);",35,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/star.js,file,38,38,2020-05-18T14:51:41-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,194652,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/star.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\star.js,file,20,13,38,38,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
39,Static Analysis,2020-05-18T14:51:00-04:00,66797,2020-05-18T14:54:28-04:00,medium,false-positive,"async = require('async');

  CSON = require('season');

  yargs = require('yargs');",7,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/star.js,file,10,10,2020-05-18T14:51:41-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,194630,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/star.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\star.js,file,17,10,10,10,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
40,Static Analysis,2020-05-18T14:51:00-04:00,66799,2020-05-18T14:54:28-04:00,medium,false-positive,"Packages = require('./packages');

  request = require('./request');

  module.exports = Star = (function() {
    class Star extends Command {",21,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/star.js,file,24,24,2020-05-18T14:51:41-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,194642,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/star.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\star.js,file,20,13,24,24,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
41,Static Analysis,2020-05-18T14:51:00-04:00,66800,2020-05-18T14:54:28-04:00,high,escalated,"parseOptions(argv) {
        var options;
        options = yargs(argv).wrap(Math.min(100, yargs.terminalWidth()));
        options.usage(""\nUsage: apm star <package_name>...\n\nStar the given packages on https://atom.io\n\nRun `apm stars` to see all your starred packages."");
        options.alias('h', 'help').describe('help', 'Print this usage message');
        return options.boolean('installed').describe('installed', 'Star all packages in ~/.atom/packages');
      }",28,,,,CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'),http://cwevis.org/browse/79,79,Atom x64/resources/app/apm/lib/star.js,file,31,31,2020-05-18T14:51:41-04:00,Static Analysis,b4414dd3b1087806bb332146e753f5917a3aec259e29c568ca289f9ab428d0d4,194649,high,,,CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS),http://cwevis.org/browse/80,80,HTML passed in to function 'options.usage',plain-text,Atom x64/resources/app/apm/lib/star.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\star.js,file,22,9,31,31,xss,no-mixed-html,ESLint,ESLINT-XSS-no-mixed-html,No mixed html,"Wanted a way to catch XSS issues in code before they end up in production.

## Rule Details

This rule aims to catch as many XSS issues by examining the code as possible.
The rule checks for mixed html/non-html content, unescaped input, etc.

The following patterns are considered warnings:

```js

// Mixed content
var x = '<div>' + input + '</div>';
$node.html( '<div>' + input + '</div>' );

// Unsafe container names.
var html = input;
var text = htmlInput;
displayValue( htmlInput );

// Checking certain expression parameters that might end up in the variables.
var htmlItems = [ input1, input2 ].join();
var textItems = [ '<div>', input, '</div>' ].join();
var tag = isNumbered ? '<ol>' : '<ul>';

// Checking function return values.
var createHtml = function( item ) { return item.name; }
var createBox = function( item ) { return '<div>' + encode( item ) + '</div>' }

```

The following patterns are not warnings:

```js

// Proper encoding
var html = '<div>' + encode( input ) + '</div>';
$node.html( '<div>' + encode( input ) + '</div>' );

// Proper container names
var html = '<img src=""happy.png"">';
var text = textbox.value;

```

## When Not To Use It

If you are creating a Node.js application that doesn't output any HTML, you can
safely disable this rule.

## Further Reading

- [XSS Prevention CHeat Sheet - OWASP](https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet)",markdown,rule-396ebe8bb0c3dc5d4eb2b5368a97688fdb0f2587416453645c3d06db2b216479,Cross-site Scripting (XSS),"Cross-site scripting (XSS) vulnerabilities occur when:
1. Untrusted data enters a web application, typically from a web request.
2. The web application dynamically generates a web page that contains this untrusted data.
3. During page generation, the application does not prevent the data from containing content that is executable by a web browser, such as JavaScript, HTML tags, HTML attributes, mouse events, Flash, ActiveX, etc.
4. A victim visits the generated web page through a web browser, which contains malicious script that was injected using the untrusted data.
5. Since the script comes from a web page that was sent by the web server, the victim's web browser executes the malicious script in the context of the web server's domain.
6. This effectively violates the intention of the web browser's same-origin policy, which states that scripts in one domain should not be able to access resources or run code in a different domain.
There are three main kinds of XSS:

*Reflected XSS (or Non-Persistent)*

The server reads data directly from the HTTP request and reflects it back in the HTTP response. Reflected XSS exploits occur when an attacker causes a victim to supply dangerous content to a vulnerable web application, which is then reflected back to the victim and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to the victim. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces a victim to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the victim, the content is executed by the victim's browser.

*Stored XSS (or Persistent)*

The application stores dangerous data in a database, message forum, visitor log, or other trusted data store. At a later time, the dangerous data is subsequently read back into the application and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. For example, the attacker might inject XSS into a log message, which might not be handled properly when an administrator views the logs.

*DOM-Based XSS*

In DOM-based XSS, the client performs the injection of XSS into the page; in the other types, the server performs the injection. DOM-based XSS generally involves server-controlled, trusted script that is sent to the client, such as Javascript that performs sanity checks on a form before the user submits it. If the server-supplied script processes user-supplied data and then injects it back into the web page (such as with dynamic HTML), then DOM-based XSS is possible.

Once the malicious script is injected, the attacker can perform a variety of malicious activities. The attacker could transfer private information, such as cookies that may include session information, from the victim's machine to the attacker. The attacker could send malicious requests to a web site on behalf of the victim, which could be especially dangerous to the site if the victim has administrator privileges to manage that site. Phishing attacks could be used to emulate trusted web sites and trick the victim into entering a password, allowing the attacker to compromise the victim's account on that web site. Finally, the script could exploit a vulnerability in the web browser itself possibly taking over the victim's machine, sometimes referred to as ""drive-by hacking.""

In many cases, the attack can be launched without the victim even being aware of it. Even with careful users, attackers frequently use a variety of methods to encode the malicious portion of the attack, such as URL encoding or Unicode, so the request looks less suspicious.

**Guidance**

To remedy XSS vulnerabilities, it is important to never use untrusted or unfiltered data within the code of a HTML page.

Untrusted data can originate not only form the client but potentially a third party or previously uploaded file etc.

Filtering of untrusted data typically involves converting special characters to their HTML entity encoded counterparts (however, other methods do exist, see references).

These special characters include:

* `&`
* `<`
* `>`
* `""`
* `'`
* `/`

An example of HTML entity encoding is converting `<` to `&lt;`.

Although it is possible to filter untrusted input, there are five locations within an HTML page where untrusted input (even if it has been filtered) should never be placed:

1. Directly in a script.
2. Inside an HTML comment.
3. In an attribute name.
4. In a tag name.
5. Directly in CSS.

Each of these locations have their own form of escaping and filtering.

Because many browsers attempt to implement XSS protection, any manual verification of this finding should be conducted using multiple different browsers and browser
versions.

**References**

- [WASC](http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting)
- [Secunia](http://secunia.com/advisories/9716/)
- [OWASP XSS Prevention Cheat Sheet](https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet)
- [OWASP DOM Based XSS](https://www.owasp.org/index.php/DOM_Based_XSS)
- [OWASP DOM Based XSS Prevention Cheat Sheet](https://www.owasp.org/index.php/DOM_based_XSS_Prevention_Cheat_Sheet)",markdown,,,escalated,0.8266207,1
42,Static Analysis,2020-05-18T14:51:00-04:00,66801,2020-05-18T14:54:28-04:00,medium,false-positive,"this.logFailure();
            return callback(error);
          } else if (response.statusCode === 404 && ignoreUnpublishedPackages) {
            process.stdout.write('skipped (not published)\n'.yellow);
            return callback();
          } else if (response.statusCode !== 200) {
            this.logFailure();",52,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/star.js,file,55,55,2020-05-18T14:51:41-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,194658,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/star.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\star.js,file,20,13,55,55,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
43,Static Analysis,2020-05-18T14:51:00-04:00,66804,2020-05-18T14:54:28-04:00,medium,false-positive,"fs = require('./fs');

  Login = require('./login');

  Packages = require('./packages');",17,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/star.js,file,20,20,2020-05-18T14:51:41-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,194640,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/star.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\star.js,file,18,11,20,20,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
44,Static Analysis,2020-05-18T14:51:00-04:00,66805,2020-05-18T14:54:28-04:00,medium,false-positive,"if (process.platform === 'darwin') {
          process.stdout.write('\u2B50  ');
        }
        process.stdout.write(`Starring ${packageName} `);
        requestSettings = {
          json: true,
          url: `${config.getAtomPackagesUrl()}/${packageName}/star`,",38,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/star.js,file,41,41,2020-05-18T14:51:41-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,194654,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/star.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\star.js,file,16,9,41,41,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
45,Static Analysis,2020-05-18T14:51:00-04:00,66806,2020-05-18T14:54:28-04:00,medium,false-positive,"request = require('./request');

  module.exports = Star = (function() {
    class Star extends Command {
      parseOptions(argv) {
        var options;",23,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/star.js,file,26,26,2020-05-18T14:51:41-04:00,Static Analysis,62173c3357301b64bcb7cb49ad65b9eeb8aa24356212b93fe0fe0166d3218ce7,194643,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'module' is not defined.,plain-text,Atom x64/resources/app/apm/lib/star.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\star.js,file,9,3,26,26,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.068299174,0
46,Static Analysis,2020-05-18T14:51:00-04:00,66808,2020-05-18T14:54:28-04:00,high,escalated,"if (!fs.isDirectorySync(path.join(userPackagesDirectory, child))) {
            continue;
          }
          if (manifestPath = CSON.resolve(path.join(userPackagesDirectory, child, 'package'))) {
            try {
              metadata = (ref1 = CSON.readFileSync(manifestPath)) != null ? ref1 : {};
              if (metadata.name && Packages.getRepository(metadata)) {",75,,,,CWE-697: Incorrect Comparison,http://cwevis.org/browse/697,697,Atom x64/resources/app/apm/lib/star.js,file,78,78,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-c271f2bb931810eef633f7c736d1dd934fbd6ed5f62ac8d8ea39ade811190622,Comparison,,,,,escalated,0.9110538,1
47,Static Analysis,2020-05-18T14:51:00-04:00,66809,2020-05-18T14:54:28-04:00,medium,false-positive,"Command = require('./command');

  fs = require('./fs');

  Login = require('./login');",15,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/star.js,file,18,18,2020-05-18T14:51:41-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,194639,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/star.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\star.js,file,15,8,18,18,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
48,Static Analysis,2020-05-18T14:51:00-04:00,66812,2020-05-18T14:54:28-04:00,high,false-positive,"userPackagesDirectory = path.join(config.getAtomDirectory(), 'packages');
        ref = fs.list(userPackagesDirectory);
        for (i = 0, len = ref.length; i < len; i++) {
          child = ref[i];
          if (!fs.isDirectorySync(path.join(userPackagesDirectory, child))) {
            continue;
          }",71,,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/lib/star.js,file,74,74,2020-05-18T14:51:41-04:00,Static Analysis,6569b353992e88510a975ec3412e07f9c2539e0cf8eb813d02c1c97e2a312d82,194662,high,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Generic Object Injection Sink,plain-text,Atom x64/resources/app/apm/lib/star.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\star.js,file,25,19,74,74,security,detect-object-injection,ESLint,ESLINT-SECURITY-detect-object-injection,Detect object injection,"Detects `variable[key]` as a left- or right-hand assignment operand.

More information: [The Dangers of Square Bracket Notation](https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/the-dangers-of-square-bracket-notation.md)",markdown,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.9251437,1
49,Static Analysis,2020-05-18T14:51:00-04:00,66813,2020-05-18T14:54:28-04:00,medium,false-positive,"(function() {
  var CSON, Command, Login, Packages, Star, _, async, config, fs, path, request, yargs;

  path = require('path');

  _ = require('underscore-plus');",1,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/star.js,file,4,4,2020-05-18T14:51:41-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,194615,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/star.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\star.js,file,17,10,4,4,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
50,Static Analysis,2020-05-18T14:51:00-04:00,66849,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Readers/AbstractReader/MoveToNextEntry,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201118,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Readers/AbstractReader/MoveToNextEntry,SharpCompress/Readers/AbstractReader/MoveToNextEntry,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
51,Static Analysis,2020-05-18T14:51:00-04:00,66861,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Mono/Options/OptionSet/ArgumentEnumerator/Add,logical,,,2020-05-18T14:51:56-04:00,Static Analysis,ccb10c4fffa4c268778ab2d2a0569f5e94af09549c82894b5d45155ba8e56ef2,200139,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,This disposable local is not guaranteed to be disposed of before the method returns. Use a 'using' statement or surround the local's usage with a try/finally block. Local of type 'IEnumerator`1' is not disposed of (at least not locally).,plain-text,Mono/Options/OptionSet/ArgumentEnumerator/Add,Mono/Options/OptionSet/ArgumentEnumerator/Add,logical,,,,,,EnsureLocalDisposalRule,Gendarme,GEND-EnsureLocalDisposalRule,Ensure Local Disposal ,"This rule checks that disposable locals are always disposed of before
the method returns. Use a 'using' statement (or a try/finally block) to
guarantee local disposal even in the event an unhandled exception
occurs.

**Bad** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    DecodeHeader (stream);
    if (!DecodedHeader.HasContent) {
        return;
    }
    DecodeContent (stream);
    stream.Dispose ();
}
```
**Good** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        DecodeHeader (stream);
        if (!DecodedHeader.HasContent) {
            return;
        }
        DecodeContent (stream);
    }
}
```
**Bad** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    Decode (stream);
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
    stream.Dispose ();
}
```
**Good** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        Decode (stream);
    }
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97965205,1
52,Static Analysis,2020-05-18T14:51:00-04:00,66967,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/IO/CountingWritableSubStream/Flush,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201123,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/IO/CountingWritableSubStream/Flush,SharpCompress/IO/CountingWritableSubStream/Flush,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
53,Static Analysis,2020-05-18T14:51:00-04:00,66968,2020-05-18T14:54:28-04:00,high,escalated,,,,,,CWE-695: Use of Low-Level Functionality,http://cwevis.org/browse/695,695,Squirrel/Update/WINTRUST_DATA/(self),logical,,,2020-05-18T14:51:57-04:00,Static Analysis,3ac9036736202c636e5a647bb8073bf5337a353e654d9216f8af1cf9293e2f3b,200963,high,,,CWE-695: Use of Low-Level Functionality,http://cwevis.org/browse/695,695,The type uses System.IntPtr or System.UIntPtr instead of System.Runtime.InteropServices.SafeHandle. Consider changing the code to use SafeHandle.,plain-text,Squirrel/Update/WINTRUST_DATA/(self),Squirrel/Update/WINTRUST_DATA/(self),logical,,,,,,PreferSafeHandleRule,Gendarme,GEND-PreferSafeHandleRule,Prefer Safe Handle ,"In general it is best to interop with native code using
**System.Runtime.InteropServices.SafeHandle** instead of
**System.IntPtr** or **System.UIntPtr** because:

SafeHandles are type safe.
SafeHandles are guaranteed to be disposed of during exceptional
conditions like a thread aborting unexpectedly or a stack overflow.
SafeHandles are not vulnerable to reycle attacks.
You don't need to write a finalizer which can be tricky to do because
they execute within their own thread, may execute on partially
constructed objects, and normally tear down the application if you allow
an exception to escape from them.


 **Bad** example:


```csharp
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable.
public sealed class Database {
    ~Database ()
    {
        // This will execute even if the ctor throws so it is important to check
        // to see if the fields are initialized.
        if (m_database != IntPtr.Zero) {
            NativeMethods.sqlite3_close (m_database);
        }
    }

    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        int err = NativeMethods.sqlite3_open_v2 (path, out m_database, flags, IntPtr.Zero);
        // handle errors
    }

    // exec and query methods would go here

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (IntPtr db);

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private IntPtr m_database;
}
```
**Good** example:


```csharp
using System.Runtime.ConstrainedExecution;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable, but you do not need to implement a finalizer because
// SafeHandle will take care of the cleanup.
internal sealed class Database {
    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        m_database = new SqlitePtr (path, flags);
    }

    // exec and query methods would go here

    // This corresponds to a native sqlite3*.
    [SecurityPermission (SecurityAction.InheritanceDemand, UnmanagedCode = true)]
    [SecurityPermission (SecurityAction.Demand, UnmanagedCode = true)]
    private sealed class SqlitePtr : SafeHandle {
        public SqlitePtr (string path, NativeMethods.OpenFlags flags) : base (IntPtr.Zero, true)
        {
            int err = NativeMethods.sqlite3_open_v2 (path, out handle, flags, IntPtr.Zero);
            // handle errors
        }

        public override bool IsInvalid {
            get {
                return (handle == IntPtr.Zero);
            }
        }

        // This will not be called if the handle is invalid. Note that this method should not throw.
        [ReliabilityContract (Consistency.WillNotCorruptState, Cer.MayFail)]
        protected override bool ReleaseHandle ()
        {
            NativeMethods.sqlite3_close (this);
            return true;
        }
    }

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (SqlitePtr db);

        // Open must take an IntPtr but all other methods take a type safe SqlitePtr.
        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private SqlitePtr m_database;
}
```",markdown,GEND-PreferSafeHandleRule,Prefer Safe Handle ,"In general it is best to interop with native code using
**System.Runtime.InteropServices.SafeHandle** instead of
**System.IntPtr** or **System.UIntPtr** because:

SafeHandles are type safe.
SafeHandles are guaranteed to be disposed of during exceptional
conditions like a thread aborting unexpectedly or a stack overflow.
SafeHandles are not vulnerable to reycle attacks.
You don't need to write a finalizer which can be tricky to do because
they execute within their own thread, may execute on partially
constructed objects, and normally tear down the application if you allow
an exception to escape from them.


 **Bad** example:


```csharp
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable.
public sealed class Database {
    ~Database ()
    {
        // This will execute even if the ctor throws so it is important to check
        // to see if the fields are initialized.
        if (m_database != IntPtr.Zero) {
            NativeMethods.sqlite3_close (m_database);
        }
    }

    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        int err = NativeMethods.sqlite3_open_v2 (path, out m_database, flags, IntPtr.Zero);
        // handle errors
    }

    // exec and query methods would go here

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (IntPtr db);

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private IntPtr m_database;
}
```
**Good** example:


```csharp
using System.Runtime.ConstrainedExecution;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable, but you do not need to implement a finalizer because
// SafeHandle will take care of the cleanup.
internal sealed class Database {
    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        m_database = new SqlitePtr (path, flags);
    }

    // exec and query methods would go here

    // This corresponds to a native sqlite3*.
    [SecurityPermission (SecurityAction.InheritanceDemand, UnmanagedCode = true)]
    [SecurityPermission (SecurityAction.Demand, UnmanagedCode = true)]
    private sealed class SqlitePtr : SafeHandle {
        public SqlitePtr (string path, NativeMethods.OpenFlags flags) : base (IntPtr.Zero, true)
        {
            int err = NativeMethods.sqlite3_open_v2 (path, out handle, flags, IntPtr.Zero);
            // handle errors
        }

        public override bool IsInvalid {
            get {
                return (handle == IntPtr.Zero);
            }
        }

        // This will not be called if the handle is invalid. Note that this method should not throw.
        [ReliabilityContract (Consistency.WillNotCorruptState, Cer.MayFail)]
        protected override bool ReleaseHandle ()
        {
            NativeMethods.sqlite3_close (this);
            return true;
        }
    }

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (SqlitePtr db);

        // Open must take an IntPtr but all other methods take a type safe SqlitePtr.
        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private SqlitePtr m_database;
}
```",markdown,,,escalated,0.8318374,1
54,Static Analysis,2020-05-18T14:51:00-04:00,66969,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Squirrel/Update/WINTRUST_DATA/(self),logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.98149246,1
55,Static Analysis,2020-05-18T14:51:00-04:00,66981,2020-05-18T14:54:28-04:00,high,escalated,"latestVersion = null;
          ref1 = (ref = pack.versions) != null ? ref : {};
          for (version in ref1) {
            metadata = ref1[version];
            if (!semver.valid(version)) {
              continue;
            }",48,,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/lib/view.js,file,51,51,2020-05-18T14:51:44-04:00,Static Analysis,6569b353992e88510a975ec3412e07f9c2539e0cf8eb813d02c1c97e2a312d82,196174,high,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Generic Object Injection Sink,plain-text,Atom x64/resources/app/apm/lib/view.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\view.js,file,37,24,51,51,security,detect-object-injection,ESLint,ESLINT-SECURITY-detect-object-injection,Detect object injection,"Detects `variable[key]` as a left- or right-hand assignment operand.

More information: [The Dangers of Square Bracket Notation](https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/the-dangers-of-square-bracket-notation.md)",markdown,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.9251437,1
56,Static Analysis,2020-05-18T14:51:00-04:00,66986,2020-05-18T14:54:28-04:00,medium,false-positive,"tree = require('./tree');

  module.exports = View = (function() {
    class View extends Command {
      parseOptions(argv) {
        var options;",15,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/view.js,file,18,18,2020-05-18T14:51:44-04:00,Static Analysis,62173c3357301b64bcb7cb49ad65b9eeb8aa24356212b93fe0fe0166d3218ce7,196162,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'module' is not defined.,plain-text,Atom x64/resources/app/apm/lib/view.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\view.js,file,9,3,18,18,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.068299174,0
57,Static Analysis,2020-05-18T14:51:00-04:00,66990,2020-05-18T14:54:28-04:00,high,escalated,"return this.getLatestCompatibleVersion(body, options, function(version) {
              var downloads, metadata, name, pack, readme, ref, ref1, stargazers_count;
              ({name, readme, downloads, stargazers_count} = body);
              metadata = (ref = (ref1 = body.versions) != null ? ref1[version] : void 0) != null ? ref : {name};
              pack = _.extend({}, metadata, {readme, downloads, stargazers_count});
              return callback(null, pack);
            });",94,,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/lib/view.js,file,97,97,2020-05-18T14:51:45-04:00,Static Analysis,6569b353992e88510a975ec3412e07f9c2539e0cf8eb813d02c1c97e2a312d82,196245,high,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Generic Object Injection Sink,plain-text,Atom x64/resources/app/apm/lib/view.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\view.js,file,79,66,97,97,security,detect-object-injection,ESLint,ESLINT-SECURITY-detect-object-injection,Detect object injection,"Detects `variable[key]` as a left- or right-hand assignment operand.

More information: [The Dangers of Square Bracket Notation](https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/the-dangers-of-square-bracket-notation.md)",markdown,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.9251437,1
58,Static Analysis,2020-05-18T14:51:00-04:00,66992,2020-05-18T14:54:28-04:00,high,escalated,"getRepository(pack) {
        var ref, ref1, repository;
        if (repository = (ref = (ref1 = pack.repository) != null ? ref1.url : void 0) != null ? ref : pack.repository) {
          return repository.replace(/\.git$/, '');
        }
      }",75,,,,CWE-697: Incorrect Comparison,http://cwevis.org/browse/697,697,Atom x64/resources/app/apm/lib/view.js,file,78,78,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-c271f2bb931810eef633f7c736d1dd934fbd6ed5f62ac8d8ea39ade811190622,Comparison,,,,,escalated,0.9110538,1
59,Static Analysis,2020-05-18T14:51:00-04:00,66993,2020-05-18T14:54:28-04:00,medium,false-positive,"semver = require('semver');

  Command = require('./command');

  config = require('./apm');",7,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/view.js,file,10,10,2020-05-18T14:51:44-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,196156,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/view.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\view.js,file,20,13,10,10,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
60,Static Analysis,2020-05-18T14:51:00-04:00,66994,2020-05-18T14:54:28-04:00,medium,false-positive,"}

      loadInstalledAtomVersion(options, callback) {
        return process.nextTick(() => {
          var installedAtomVersion, version;
          if (options.argv.compatible) {
            version = this.normalizeVersion(options.argv.compatible);",27,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/view.js,file,30,30,2020-05-18T14:51:44-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,196169,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/view.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\view.js,file,23,16,30,30,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
61,Static Analysis,2020-05-18T14:51:00-04:00,66998,2020-05-18T14:54:28-04:00,high,escalated,"parseOptions(argv) {
        var options;
        options = yargs(argv).wrap(Math.min(100, yargs.terminalWidth()));
        options.usage(""\nUsage: apm view <package_name>\n\nView information about a package/theme in the atom.io registry."");
        options.alias('h', 'help').describe('help', 'Print this usage message');
        options.boolean('json').describe('json', 'Output featured packages as JSON array');
        return options.string('compatible').describe('compatible', 'Show the latest version compatible with this Atom version');",20,,,,CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'),http://cwevis.org/browse/79,79,Atom x64/resources/app/apm/lib/view.js,file,23,23,2020-05-18T14:51:44-04:00,Static Analysis,b4414dd3b1087806bb332146e753f5917a3aec259e29c568ca289f9ab428d0d4,196167,high,,,CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS),http://cwevis.org/browse/80,80,HTML passed in to function 'options.usage',plain-text,Atom x64/resources/app/apm/lib/view.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\view.js,file,22,9,23,23,xss,no-mixed-html,ESLint,ESLINT-XSS-no-mixed-html,No mixed html,"Wanted a way to catch XSS issues in code before they end up in production.

## Rule Details

This rule aims to catch as many XSS issues by examining the code as possible.
The rule checks for mixed html/non-html content, unescaped input, etc.

The following patterns are considered warnings:

```js

// Mixed content
var x = '<div>' + input + '</div>';
$node.html( '<div>' + input + '</div>' );

// Unsafe container names.
var html = input;
var text = htmlInput;
displayValue( htmlInput );

// Checking certain expression parameters that might end up in the variables.
var htmlItems = [ input1, input2 ].join();
var textItems = [ '<div>', input, '</div>' ].join();
var tag = isNumbered ? '<ol>' : '<ul>';

// Checking function return values.
var createHtml = function( item ) { return item.name; }
var createBox = function( item ) { return '<div>' + encode( item ) + '</div>' }

```

The following patterns are not warnings:

```js

// Proper encoding
var html = '<div>' + encode( input ) + '</div>';
$node.html( '<div>' + encode( input ) + '</div>' );

// Proper container names
var html = '<img src=""happy.png"">';
var text = textbox.value;

```

## When Not To Use It

If you are creating a Node.js application that doesn't output any HTML, you can
safely disable this rule.

## Further Reading

- [XSS Prevention CHeat Sheet - OWASP](https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet)",markdown,rule-396ebe8bb0c3dc5d4eb2b5368a97688fdb0f2587416453645c3d06db2b216479,Cross-site Scripting (XSS),"Cross-site scripting (XSS) vulnerabilities occur when:
1. Untrusted data enters a web application, typically from a web request.
2. The web application dynamically generates a web page that contains this untrusted data.
3. During page generation, the application does not prevent the data from containing content that is executable by a web browser, such as JavaScript, HTML tags, HTML attributes, mouse events, Flash, ActiveX, etc.
4. A victim visits the generated web page through a web browser, which contains malicious script that was injected using the untrusted data.
5. Since the script comes from a web page that was sent by the web server, the victim's web browser executes the malicious script in the context of the web server's domain.
6. This effectively violates the intention of the web browser's same-origin policy, which states that scripts in one domain should not be able to access resources or run code in a different domain.
There are three main kinds of XSS:

*Reflected XSS (or Non-Persistent)*

The server reads data directly from the HTTP request and reflects it back in the HTTP response. Reflected XSS exploits occur when an attacker causes a victim to supply dangerous content to a vulnerable web application, which is then reflected back to the victim and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to the victim. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces a victim to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the victim, the content is executed by the victim's browser.

*Stored XSS (or Persistent)*

The application stores dangerous data in a database, message forum, visitor log, or other trusted data store. At a later time, the dangerous data is subsequently read back into the application and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. For example, the attacker might inject XSS into a log message, which might not be handled properly when an administrator views the logs.

*DOM-Based XSS*

In DOM-based XSS, the client performs the injection of XSS into the page; in the other types, the server performs the injection. DOM-based XSS generally involves server-controlled, trusted script that is sent to the client, such as Javascript that performs sanity checks on a form before the user submits it. If the server-supplied script processes user-supplied data and then injects it back into the web page (such as with dynamic HTML), then DOM-based XSS is possible.

Once the malicious script is injected, the attacker can perform a variety of malicious activities. The attacker could transfer private information, such as cookies that may include session information, from the victim's machine to the attacker. The attacker could send malicious requests to a web site on behalf of the victim, which could be especially dangerous to the site if the victim has administrator privileges to manage that site. Phishing attacks could be used to emulate trusted web sites and trick the victim into entering a password, allowing the attacker to compromise the victim's account on that web site. Finally, the script could exploit a vulnerability in the web browser itself possibly taking over the victim's machine, sometimes referred to as ""drive-by hacking.""

In many cases, the attack can be launched without the victim even being aware of it. Even with careful users, attackers frequently use a variety of methods to encode the malicious portion of the attack, such as URL encoding or Unicode, so the request looks less suspicious.

**Guidance**

To remedy XSS vulnerabilities, it is important to never use untrusted or unfiltered data within the code of a HTML page.

Untrusted data can originate not only form the client but potentially a third party or previously uploaded file etc.

Filtering of untrusted data typically involves converting special characters to their HTML entity encoded counterparts (however, other methods do exist, see references).

These special characters include:

* `&`
* `<`
* `>`
* `""`
* `'`
* `/`

An example of HTML entity encoding is converting `<` to `&lt;`.

Although it is possible to filter untrusted input, there are five locations within an HTML page where untrusted input (even if it has been filtered) should never be placed:

1. Directly in a script.
2. Inside an HTML comment.
3. In an attribute name.
4. In a tag name.
5. Directly in CSS.

Each of these locations have their own form of escaping and filtering.

Because many browsers attempt to implement XSS protection, any manual verification of this finding should be conducted using multiple different browsers and browser
versions.

**References**

- [WASC](http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting)
- [Secunia](http://secunia.com/advisories/9716/)
- [OWASP XSS Prevention Cheat Sheet](https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet)
- [OWASP DOM Based XSS](https://www.owasp.org/index.php/DOM_Based_XSS)
- [OWASP DOM Based XSS Prevention Cheat Sheet](https://www.owasp.org/index.php/DOM_based_XSS_Prevention_Cheat_Sheet)",markdown,,,escalated,0.8266207,1
62,Static Analysis,2020-05-18T14:51:00-04:00,66999,2020-05-18T14:54:28-04:00,medium,false-positive,"config = require('./apm');

  request = require('./request');

  tree = require('./tree');",11,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/view.js,file,14,14,2020-05-18T14:51:44-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,196159,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/view.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\view.js,file,20,13,14,14,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270798,0
63,Static Analysis,2020-05-18T14:51:00-04:00,67001,2020-05-18T14:54:28-04:00,medium,false-positive,"yargs = require('yargs');

  semver = require('semver');

  Command = require('./command');",5,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/view.js,file,8,8,2020-05-18T14:51:44-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,196155,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/view.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\view.js,file,19,12,8,8,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270798,0
64,Static Analysis,2020-05-18T14:51:00-04:00,67002,2020-05-18T14:54:28-04:00,medium,false-positive,"_ = require('underscore-plus');

  yargs = require('yargs');

  semver = require('semver');",3,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/view.js,file,6,6,2020-05-18T14:51:44-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,196154,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/view.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\view.js,file,18,11,6,6,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
65,Static Analysis,2020-05-18T14:51:00-04:00,67004,2020-05-18T14:54:28-04:00,medium,false-positive,"Command = require('./command');

  config = require('./apm');

  request = require('./request');",9,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/view.js,file,12,12,2020-05-18T14:51:44-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,196157,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/view.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\view.js,file,19,12,12,12,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
66,Static Analysis,2020-05-18T14:51:00-04:00,67005,2020-05-18T14:54:28-04:00,medium,false-positive,"request = require('./request');

  tree = require('./tree');

  module.exports = View = (function() {
    class View extends Command {",13,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/view.js,file,16,16,2020-05-18T14:51:44-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,196161,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/view.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\view.js,file,17,10,16,16,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
67,Static Analysis,2020-05-18T14:51:00-04:00,67006,2020-05-18T14:54:28-04:00,medium,false-positive,"(function() {
  var Command, View, _, config, request, semver, tree, yargs;

  _ = require('underscore-plus');

  yargs = require('yargs');",1,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/view.js,file,4,4,2020-05-18T14:51:44-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,196153,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/view.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\view.js,file,14,7,4,4,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
68,Static Analysis,2020-05-18T14:51:00-04:00,67008,2020-05-18T14:54:28-04:00,high,escalated,"if (pack.version) {
              items.push(pack.version.yellow);
            }
            if (repository = this.getRepository(pack)) {
              items.push(repository.underline);
            }
            if (pack.description) {",128,,,,CWE-697: Incorrect Comparison,http://cwevis.org/browse/697,697,Atom x64/resources/app/apm/lib/view.js,file,131,131,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-c271f2bb931810eef633f7c736d1dd934fbd6ed5f62ac8d8ea39ade811190622,Comparison,,,,,escalated,0.9110538,1
69,Static Analysis,2020-05-18T14:51:00-04:00,67010,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Compressors/LZMA/LZipStream/Write,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201153,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Compressors/LZMA/LZipStream/Write,SharpCompress/Compressors/LZMA/LZipStream/Write,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
70,Static Analysis,2020-05-18T14:51:00-04:00,67024,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-465: Pointer Issues,http://cwevis.org/browse/465,465,Atlassian/Bitbucket/Authentication/TokenScope/op_ExclusiveOr,logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-0dd0e028a5ce327b29cd3ffa9ef62c97353c7155364a9a4b89933187ee675fef,Invalid Pointer,,,,,escalated,0.6708902,1
71,Static Analysis,2020-05-18T14:51:00-04:00,67038,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/Web/XmlTransform/XmlFileInfoDocument/LoadFromFileName,logical,,,2020-05-18T14:51:56-04:00,Static Analysis,acb48e707c352a107078b6468e80c9ef664c5b88239bce13edf2fa6a6d80ec71,200191,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,This disposable local is not guaranteed to be disposed of before the method returns. Use a 'using' statement or surround the local's usage with a try/finally block. Local of type 'StreamReader' is not disposed of (at least not locally).,plain-text,Microsoft/Web/XmlTransform/XmlFileInfoDocument/LoadFromFileName,Microsoft/Web/XmlTransform/XmlFileInfoDocument/LoadFromFileName,logical,,,,,,EnsureLocalDisposalRule,Gendarme,GEND-EnsureLocalDisposalRule,Ensure Local Disposal ,"This rule checks that disposable locals are always disposed of before
the method returns. Use a 'using' statement (or a try/finally block) to
guarantee local disposal even in the event an unhandled exception
occurs.

**Bad** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    DecodeHeader (stream);
    if (!DecodedHeader.HasContent) {
        return;
    }
    DecodeContent (stream);
    stream.Dispose ();
}
```
**Good** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        DecodeHeader (stream);
        if (!DecodedHeader.HasContent) {
            return;
        }
        DecodeContent (stream);
    }
}
```
**Bad** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    Decode (stream);
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
    stream.Dispose ();
}
```
**Good** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        Decode (stream);
    }
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.9821566,1
72,Static Analysis,2020-05-18T14:51:00-04:00,67044,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Mono/Cecil/ModuleDefinition/ReadSymbols,logical,,,2020-05-18T14:51:56-04:00,Static Analysis,0690e7c567604e22e20456982e8680c8a34a5f454bc35760aaf37571bcc4bf8c,200232,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,This disposable local is not guaranteed to be disposed of before the method returns. Use a 'using' statement or surround the local's usage with a try/finally block. Local of type 'ISymbolReader' is not disposed of (at least not locally).,plain-text,Mono/Cecil/ModuleDefinition/ReadSymbols,Mono/Cecil/ModuleDefinition/ReadSymbols,logical,,,,,,EnsureLocalDisposalRule,Gendarme,GEND-EnsureLocalDisposalRule,Ensure Local Disposal ,"This rule checks that disposable locals are always disposed of before
the method returns. Use a 'using' statement (or a try/finally block) to
guarantee local disposal even in the event an unhandled exception
occurs.

**Bad** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    DecodeHeader (stream);
    if (!DecodedHeader.HasContent) {
        return;
    }
    DecodeContent (stream);
    stream.Dispose ();
}
```
**Good** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        DecodeHeader (stream);
        if (!DecodedHeader.HasContent) {
            return;
        }
        DecodeContent (stream);
    }
}
```
**Bad** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    Decode (stream);
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
    stream.Dispose ();
}
```
**Good** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        Decode (stream);
    }
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97926515,1
73,Static Analysis,2020-05-18T14:51:00-04:00,67073,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Crypto/Crc32Stream/Flush,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201134,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Crypto/Crc32Stream/Flush,SharpCompress/Crypto/Crc32Stream/Flush,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
74,Static Analysis,2020-05-18T14:51:00-04:00,67115,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Compressors/BZip2/BZip2Stream/Flush,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201169,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Compressors/BZip2/BZip2Stream/Flush,SharpCompress/Compressors/BZip2/BZip2Stream/Flush,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
75,Static Analysis,2020-05-18T14:51:00-04:00,67233,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-388: 7PK - Errors,http://cwevis.org/browse/388,388,SharpCompress/Readers/AbstractReader/SharpCompress/Common/IExtractionListener/FireCompressedBytesRead,logical,,,2020-05-18T14:51:56-04:00,Static Analysis,f73cef352a0b2bf1d0cc5310f027978a051db5e56968ba97879cbcb8e22239bf,199967,medium,,,CWE-754: Improper Check for Unusual or Exceptional Conditions,http://cwevis.org/browse/754,754,"Every delegate passed to native code must include an exception block which spans the entire method and has a catch all block. Surround the entire method body with a try/catch block. An exception occurred while verifying this method. This failure can probably be ignored, it's most likely due to an uncommon code sequence in the method the rule didn't understand. Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index",plain-text,SharpCompress/Readers/AbstractReader/SharpCompress/Common/IExtractionListener/FireCompressedBytesRead,SharpCompress/Readers/AbstractReader/SharpCompress/Common/IExtractionListener/FireCompressedBytesRead,logical,,,,,,DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRule,Gendarme,GEND-DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRule,Delegates Passed To Native Code Must Include Exception Handling ,"Every delegate which is passed to native code must include an exception
block which spans the entire method and has a catch all handler.

**Bad** example:


```csharp
public void NativeCallback ()
{
    Console.WriteLine (""{0}"", 1);
}
```
**Good** example:


```csharp
public void NativeCallback ()
{
    try {
        Console.WriteLine (""{0}"", 1);
    }
    catch {
    }
}
```",markdown,rule-e3f0972459f483bc18a68eed953b03a6c7e7fb7e495bc2047dd97eaba40f966b,Error Handling,,,,,escalated,0.88051474,1
76,Static Analysis,2020-05-18T14:51:00-04:00,67304,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/Alm/Cli/Program/Store,logical,,,2020-05-18T14:52:14-04:00,Static Analysis,9d4d0dd753ee6745414a354655547d7752c27107ac72758d72ca674f677a4473,202963,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,This disposable local is not guaranteed to be disposed of before the method returns. Use a 'using' statement or surround the local's usage with a try/finally block. Local of type 'Task' is not disposed of (is this a fluent-like API ?).,plain-text,Microsoft/Alm/Cli/Program/Store,Microsoft/Alm/Cli/Program/Store,logical,,,,,,EnsureLocalDisposalRule,Gendarme,GEND-EnsureLocalDisposalRule,Ensure Local Disposal ,"This rule checks that disposable locals are always disposed of before
the method returns. Use a 'using' statement (or a try/finally block) to
guarantee local disposal even in the event an unhandled exception
occurs.

**Bad** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    DecodeHeader (stream);
    if (!DecodedHeader.HasContent) {
        return;
    }
    DecodeContent (stream);
    stream.Dispose ();
}
```
**Good** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        DecodeHeader (stream);
        if (!DecodedHeader.HasContent) {
            return;
        }
        DecodeContent (stream);
    }
}
```
**Bad** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    Decode (stream);
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
    stream.Dispose ();
}
```
**Good** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        Decode (stream);
    }
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.9824454,1
77,Static Analysis,2020-05-18T14:51:00-04:00,67399,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/Native/RSACng/SignData,logical,,,2020-05-18T14:52:00-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,202228,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/Native/RSACng/SignData,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/Native/RSACng/SignData,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
78,Static Analysis,2020-05-18T14:51:00-04:00,67485,2020-05-18T14:54:28-04:00,high,escalated,,,,,,CWE-287: Improper Authentication,http://cwevis.org/browse/287,287,Microsoft/Alm/Authentication/BaseSecureStore/(self),logical,,,2020-05-18T14:52:00-04:00,Static Analysis,2c14eef44cc124617641b8641a6a5e0e575640ecf1dbd50f55e42ead7548b318,202262,high,,,CWE-471: Modification of Assumed-Immutable Data (MAID),http://cwevis.org/browse/471,471,"This type contains read-only array(s), however elements inside the array(s) are not read-only. Replace the array with a method returning a clone of the array or a read-only collection.",plain-text,Microsoft/Alm/Authentication/BaseSecureStore/(self),Microsoft/Alm/Authentication/BaseSecureStore/(self),logical,,,,,,ArrayFieldsShouldNotBeReadOnlyRule,Gendarme,GEND-ArrayFieldsShouldNotBeReadOnlyRule,Array Fields Should Not Be Read Only ,"This rule warns if a type declares a public **readonly** array field.
Marking a field **readonly** only prevents the field from being assigned
a different value, the object itself can still be changed. This means,
that the elements inside the array can still be changed.

**Bad** example:


```csharp
class Bad {
    public readonly string[] Array = new string[] { ""A"", ""B"" };
}

HasPublicReadonlyArray obj = HasPublicReadonlyArray ();
obj.Array[0] = ""B""; // valid
```
**Good** example:


```csharp
class Good {
    private readonly string[] array = new string[] { ""A"", ""B"" };
    public string[] GetArray ()
    {
        return (string []) array.Clone();
    }
}

string[] obj = new HasPublicReadonlyArray ().GetArray ();
obj [0] = ""B""; // valid, but has no effect on other users
```",markdown,rule-281bbd849f2ec7a72cadfef99b1ac8a2851bf7e36be35218e4db805c26a9cbdd,Authentication and Authorization,"When an actor claims to have a given identity, the software does not prove or insufficiently proves that the claim is correct.",markdown,,,escalated,0.93940514,1
79,Static Analysis,2020-05-18T14:51:00-04:00,67517,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-227: 7PK - API Abuse,http://cwevis.org/browse/227,227,SharpCompress/Compressors/LZMA/InvalidParamException/(self),logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-dc56fd6c6aaaf7aef3e91a691e1f8bd8f7311763a2d3286fce16c6c5cf52b5e2,API Abuse,"The software uses an API in a manner contrary to its intended use.

An API is a contract between a caller and a callee. The most common forms of API misuse occurs when the caller does not honor its end of this contract. For example, if a program does not call chdir() after calling chroot(), it violates the contract that specifies how to change the active root directory in a secure fashion. Another good example of library abuse is expecting the callee to return trustworthy DNS information to the caller. In this case, the caller misuses the callee API by making certain assumptions about its behavior (that the return value can be used for authentication purposes). One can also violate the caller-callee contract from the other side. For example, if a coder subclasses SecureRandom and returns a non-random value, the contract is violated.",markdown,,,escalated,0.94525355,1
80,Static Analysis,2020-05-18T14:51:00-04:00,67529,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Compressors/ADC/ADCStream/Read,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201179,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Compressors/ADC/ADCStream/Read,SharpCompress/Compressors/ADC/ADCStream/Read,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
81,Static Analysis,2020-05-18T14:51:00-04:00,67555,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/Alm/Authentication/Git/Trace/WriteLine,logical,,,2020-05-18T14:52:00-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,202466,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Microsoft/Alm/Authentication/Git/Trace/WriteLine,Microsoft/Alm/Authentication/Git/Trace/WriteLine,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
82,Static Analysis,2020-05-18T14:51:00-04:00,67664,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Squirrel/Shell/ShellLink/Open,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201273,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Squirrel/Shell/ShellLink/Open,Squirrel/Shell/ShellLink/Open,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
83,Static Analysis,2020-05-18T14:51:00-04:00,67676,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Common/Rar/RarRijndael/ProcessBlock,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201197,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Common/Rar/RarRijndael/ProcessBlock,SharpCompress/Common/Rar/RarRijndael/ProcessBlock,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
84,Static Analysis,2020-05-18T14:51:00-04:00,67728,2020-05-18T14:54:28-04:00,high,escalated,,,,,,CWE-485: 7PK - Encapsulation,http://cwevis.org/browse/485,485,Modules/GitHub/Authentication,logical,,,2020-05-18T14:52:13-04:00,Static Analysis,2a96cfecf3c1281ac672ab5e01ec03df980f0aef82ea6dd9756d492c241fae0c,202535,high,,,CWE-485: 7PK - Encapsulation,http://cwevis.org/browse/485,485,"The entry point (Main) of this assembly is visible to the outside world (ref: C# Programming Guide). Reduce the visibility of the method or type if your language allows it. It may not be possible in some language, like VB.NET). Change method visibility to private or internal.",plain-text,Modules/GitHub/Authentication,Modules/GitHub.Authentication,logical,,,,,,MainShouldNotBePublicRule,Gendarme,GEND-MainShouldNotBePublicRule,Main Should Not Be Public ,"This rule fires if an assembly's entry point (typically named **Main**)
is visible to other assemblies. It is better to make this method private
so that only the CLR can call the method.

**Bad** example:


```csharp
public class MainClass {
    public void Main ()
    {
    }
}
```
**Good** example (type is not externally visible):


```csharp
internal class MainClass {
    public void Main ()
    {
    }
}
```
**Good** example (method is not externally visible):


```csharp
public class MainClass {
    internal void Main ()
    {
    }
}
```",markdown,rule-eeba193198490d38a5fccf7ade0b7a099377b21973f94ef14e5e3f264edef766,Insufficient Encapsulation,"The product does not sufficiently encapsulate critical data or functionality.

Encapsulation is about drawing strong boundaries. In a web browser that might mean ensuring that your mobile code cannot be abused by other mobile code. On the server it might mean differentiation between validated data and unvalidated data, between one user's data and another's, or between data users are allowed to see and data that they are not.",markdown,,,escalated,0.72981036,1
85,Static Analysis,2020-05-18T14:51:00-04:00,67809,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Compressors/LZMA/Utilites/ReadingCrcBuilderStream/Read,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201159,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Compressors/LZMA/Utilites/ReadingCrcBuilderStream/Read,SharpCompress/Compressors/LZMA/Utilites/ReadingCrcBuilderStream/Read,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
86,Static Analysis,2020-05-18T14:51:00-04:00,67856,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Squirrel/UpdateManager/ApplyReleasesImpl/executeSelfUpdate,logical,,,2020-05-18T14:51:56-04:00,Static Analysis,990659a019388e4890643c93cad3046863745119ab7b4b291e2e747b1b3d211d,200213,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,This disposable local is not guaranteed to be disposed of before the method returns. Use a 'using' statement or surround the local's usage with a try/finally block. Local of type 'Process' is not disposed of (is this a fluent-like API ?).,plain-text,Squirrel/UpdateManager/ApplyReleasesImpl/executeSelfUpdate,Squirrel/UpdateManager/ApplyReleasesImpl/executeSelfUpdate,logical,,,,,,EnsureLocalDisposalRule,Gendarme,GEND-EnsureLocalDisposalRule,Ensure Local Disposal ,"This rule checks that disposable locals are always disposed of before
the method returns. Use a 'using' statement (or a try/finally block) to
guarantee local disposal even in the event an unhandled exception
occurs.

**Bad** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    DecodeHeader (stream);
    if (!DecodedHeader.HasContent) {
        return;
    }
    DecodeContent (stream);
    stream.Dispose ();
}
```
**Good** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        DecodeHeader (stream);
        if (!DecodedHeader.HasContent) {
            return;
        }
        DecodeContent (stream);
    }
}
```
**Bad** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    Decode (stream);
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
    stream.Dispose ();
}
```
**Good** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        Decode (stream);
    }
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.9805271,1
87,Static Analysis,2020-05-18T14:51:00-04:00,68079,2020-05-18T14:54:28-04:00,medium,false-positive,"path = require('path');

  CSON = require('season');

  yargs = require('yargs');",3,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/unlink.js,file,6,6,2020-05-18T14:51:42-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,195264,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/unlink.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\unlink.js,file,17,10,6,6,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
88,Static Analysis,2020-05-18T14:51:00-04:00,68081,2020-05-18T14:54:28-04:00,medium,false-positive,"CSON = require('season');

  yargs = require('yargs');

  Command = require('./command');",5,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/unlink.js,file,8,8,2020-05-18T14:51:42-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,195267,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/unlink.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\unlink.js,file,18,11,8,8,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
89,Static Analysis,2020-05-18T14:51:00-04:00,68085,2020-05-18T14:54:28-04:00,medium,false-positive,"Command = require('./command');

  config = require('./apm');

  fs = require('./fs');",9,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/unlink.js,file,12,12,2020-05-18T14:51:42-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,195275,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/unlink.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\unlink.js,file,19,12,12,12,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
90,Static Analysis,2020-05-18T14:51:00-04:00,68086,2020-05-18T14:54:28-04:00,medium,false-positive,"unlinkPath(pathToUnlink) {
        var error;
        try {
          process.stdout.write(`Unlinking ${pathToUnlink} `);
          fs.unlinkSync(pathToUnlink);
          return this.logSuccess();
        } catch (error1) {",42,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/unlink.js,file,45,45,2020-05-18T14:51:42-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,195326,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/unlink.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\unlink.js,file,18,11,45,45,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
91,Static Analysis,2020-05-18T14:51:00-04:00,68091,2020-05-18T14:54:28-04:00,high,escalated,"packagePath = (ref = (ref1 = options.argv._[0]) != null ? ref1.toString() : void 0) != null ? ref : '.';
        linkPath = path.resolve(process.cwd(), packagePath);
        try {
          packageName = CSON.readFileSync(CSON.resolve(path.join(linkPath, 'package'))).name;
        } catch (error1) {}
        if (!packageName) {
          packageName = path.basename(linkPath);",85,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/lib/unlink.js,file,88,88,2020-05-18T14:51:42-04:00,Static Analysis,374ad040fff48d9edaa97052bf28a674b1f4e79af66a0448f1ab1699003790cd,195386,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Found fs.readFileSync with non literal argument at index 0,plain-text,Atom x64/resources/app/apm/lib/unlink.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\unlink.js,file,42,25,88,88,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.9758102,1
92,Static Analysis,2020-05-18T14:51:00-04:00,68092,2020-05-18T14:54:28-04:00,high,escalated,"parseOptions(argv) {
        var options;
        options = yargs(argv).wrap(Math.min(100, yargs.terminalWidth()));
        options.usage(""\nUsage: apm unlink [<package_path>]\n\nDelete the symlink in ~/.atom/packages for the package. The package in the\ncurrent working directory is unlinked if no path is given.\n\nRun `apm links` to view all the currently linked packages."");
        options.alias('h', 'help').describe('help', 'Print this usage message');
        options.alias('d', 'dev').boolean('dev').describe('dev', 'Unlink package from ~/.atom/dev/packages');
        options.boolean('hard').describe('hard', 'Unlink package from ~/.atom/packages and ~/.atom/dev/packages');",24,,,,CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'),http://cwevis.org/browse/79,79,Atom x64/resources/app/apm/lib/unlink.js,file,27,27,2020-05-18T14:51:42-04:00,Static Analysis,b4414dd3b1087806bb332146e753f5917a3aec259e29c568ca289f9ab428d0d4,195299,high,,,CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS),http://cwevis.org/browse/80,80,HTML passed in to function 'options.usage',plain-text,Atom x64/resources/app/apm/lib/unlink.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\unlink.js,file,22,9,27,27,xss,no-mixed-html,ESLint,ESLINT-XSS-no-mixed-html,No mixed html,"Wanted a way to catch XSS issues in code before they end up in production.

## Rule Details

This rule aims to catch as many XSS issues by examining the code as possible.
The rule checks for mixed html/non-html content, unescaped input, etc.

The following patterns are considered warnings:

```js

// Mixed content
var x = '<div>' + input + '</div>';
$node.html( '<div>' + input + '</div>' );

// Unsafe container names.
var html = input;
var text = htmlInput;
displayValue( htmlInput );

// Checking certain expression parameters that might end up in the variables.
var htmlItems = [ input1, input2 ].join();
var textItems = [ '<div>', input, '</div>' ].join();
var tag = isNumbered ? '<ol>' : '<ul>';

// Checking function return values.
var createHtml = function( item ) { return item.name; }
var createBox = function( item ) { return '<div>' + encode( item ) + '</div>' }

```

The following patterns are not warnings:

```js

// Proper encoding
var html = '<div>' + encode( input ) + '</div>';
$node.html( '<div>' + encode( input ) + '</div>' );

// Proper container names
var html = '<img src=""happy.png"">';
var text = textbox.value;

```

## When Not To Use It

If you are creating a Node.js application that doesn't output any HTML, you can
safely disable this rule.

## Further Reading

- [XSS Prevention CHeat Sheet - OWASP](https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet)",markdown,rule-396ebe8bb0c3dc5d4eb2b5368a97688fdb0f2587416453645c3d06db2b216479,Cross-site Scripting (XSS),"Cross-site scripting (XSS) vulnerabilities occur when:
1. Untrusted data enters a web application, typically from a web request.
2. The web application dynamically generates a web page that contains this untrusted data.
3. During page generation, the application does not prevent the data from containing content that is executable by a web browser, such as JavaScript, HTML tags, HTML attributes, mouse events, Flash, ActiveX, etc.
4. A victim visits the generated web page through a web browser, which contains malicious script that was injected using the untrusted data.
5. Since the script comes from a web page that was sent by the web server, the victim's web browser executes the malicious script in the context of the web server's domain.
6. This effectively violates the intention of the web browser's same-origin policy, which states that scripts in one domain should not be able to access resources or run code in a different domain.
There are three main kinds of XSS:

*Reflected XSS (or Non-Persistent)*

The server reads data directly from the HTTP request and reflects it back in the HTTP response. Reflected XSS exploits occur when an attacker causes a victim to supply dangerous content to a vulnerable web application, which is then reflected back to the victim and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to the victim. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces a victim to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the victim, the content is executed by the victim's browser.

*Stored XSS (or Persistent)*

The application stores dangerous data in a database, message forum, visitor log, or other trusted data store. At a later time, the dangerous data is subsequently read back into the application and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. For example, the attacker might inject XSS into a log message, which might not be handled properly when an administrator views the logs.

*DOM-Based XSS*

In DOM-based XSS, the client performs the injection of XSS into the page; in the other types, the server performs the injection. DOM-based XSS generally involves server-controlled, trusted script that is sent to the client, such as Javascript that performs sanity checks on a form before the user submits it. If the server-supplied script processes user-supplied data and then injects it back into the web page (such as with dynamic HTML), then DOM-based XSS is possible.

Once the malicious script is injected, the attacker can perform a variety of malicious activities. The attacker could transfer private information, such as cookies that may include session information, from the victim's machine to the attacker. The attacker could send malicious requests to a web site on behalf of the victim, which could be especially dangerous to the site if the victim has administrator privileges to manage that site. Phishing attacks could be used to emulate trusted web sites and trick the victim into entering a password, allowing the attacker to compromise the victim's account on that web site. Finally, the script could exploit a vulnerability in the web browser itself possibly taking over the victim's machine, sometimes referred to as ""drive-by hacking.""

In many cases, the attack can be launched without the victim even being aware of it. Even with careful users, attackers frequently use a variety of methods to encode the malicious portion of the attack, such as URL encoding or Unicode, so the request looks less suspicious.

**Guidance**

To remedy XSS vulnerabilities, it is important to never use untrusted or unfiltered data within the code of a HTML page.

Untrusted data can originate not only form the client but potentially a third party or previously uploaded file etc.

Filtering of untrusted data typically involves converting special characters to their HTML entity encoded counterparts (however, other methods do exist, see references).

These special characters include:

* `&`
* `<`
* `>`
* `""`
* `'`
* `/`

An example of HTML entity encoding is converting `<` to `&lt;`.

Although it is possible to filter untrusted input, there are five locations within an HTML page where untrusted input (even if it has been filtered) should never be placed:

1. Directly in a script.
2. Inside an HTML comment.
3. In an attribute name.
4. In a tag name.
5. Directly in CSS.

Each of these locations have their own form of escaping and filtering.

Because many browsers attempt to implement XSS protection, any manual verification of this finding should be conducted using multiple different browsers and browser
versions.

**References**

- [WASC](http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting)
- [Secunia](http://secunia.com/advisories/9716/)
- [OWASP XSS Prevention Cheat Sheet](https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet)
- [OWASP DOM Based XSS](https://www.owasp.org/index.php/DOM_Based_XSS)
- [OWASP DOM Based XSS Prevention Cheat Sheet](https://www.owasp.org/index.php/DOM_based_XSS_Prevention_Cheat_Sheet)",markdown,,,escalated,0.8266207,1
93,Static Analysis,2020-05-18T14:51:00-04:00,68097,2020-05-18T14:54:28-04:00,medium,false-positive,"(function() {
  var CSON, Command, Unlink, config, fs, path, yargs;

  path = require('path');

  CSON = require('season');",1,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/unlink.js,file,4,4,2020-05-18T14:51:42-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,195263,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/unlink.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\unlink.js,file,17,10,4,4,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
94,Static Analysis,2020-05-18T14:51:00-04:00,68101,2020-05-18T14:54:28-04:00,medium,false-positive,"yargs = require('yargs');

  Command = require('./command');

  config = require('./apm');",7,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/unlink.js,file,10,10,2020-05-18T14:51:42-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,195271,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/unlink.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\unlink.js,file,20,13,10,10,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270798,0
95,Static Analysis,2020-05-18T14:51:00-04:00,68102,2020-05-18T14:54:28-04:00,medium,false-positive,"unlinkPackage(options, callback) {
        var error, linkPath, packageName, packagePath, ref, ref1, targetPath;
        packagePath = (ref = (ref1 = options.argv._[0]) != null ? ref1.toString() : void 0) != null ? ref : '.';
        linkPath = path.resolve(process.cwd(), packagePath);
        try {
          packageName = CSON.readFileSync(CSON.resolve(path.join(linkPath, 'package'))).name;
        } catch (error1) {}",83,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/unlink.js,file,86,86,2020-05-18T14:51:42-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,195384,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/unlink.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\unlink.js,file,40,33,86,86,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474263,0
96,Static Analysis,2020-05-18T14:51:00-04:00,68106,2020-05-18T14:54:28-04:00,medium,false-positive,"fs = require('./fs');

  module.exports = Unlink = (function() {
    class Unlink extends Command {
      constructor() {
        super();",13,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/unlink.js,file,16,16,2020-05-18T14:51:42-04:00,Static Analysis,62173c3357301b64bcb7cb49ad65b9eeb8aa24356212b93fe0fe0166d3218ce7,195281,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'module' is not defined.,plain-text,Atom x64/resources/app/apm/lib/unlink.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\unlink.js,file,9,3,16,16,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.068299174,0
97,Static Analysis,2020-05-18T14:51:00-04:00,68109,2020-05-18T14:54:28-04:00,high,false-positive,"try {
          ref = fs.list(this.devPackagesPath);
          for (i = 0, len = ref.length; i < len; i++) {
            child = ref[i];
            packagePath = path.join(this.devPackagesPath, child);
            if (fs.isSymbolicLinkSync(packagePath)) {
              this.unlinkPath(packagePath);",57,,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/lib/unlink.js,file,60,60,2020-05-18T14:51:42-04:00,Static Analysis,6569b353992e88510a975ec3412e07f9c2539e0cf8eb813d02c1c97e2a312d82,195344,high,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Generic Object Injection Sink,plain-text,Atom x64/resources/app/apm/lib/unlink.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\unlink.js,file,27,21,60,60,security,detect-object-injection,ESLint,ESLINT-SECURITY-detect-object-injection,Detect object injection,"Detects `variable[key]` as a left- or right-hand assignment operand.

More information: [The Dangers of Square Bracket Notation](https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/the-dangers-of-square-bracket-notation.md)",markdown,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.9251437,1
98,Static Analysis,2020-05-18T14:51:00-04:00,68111,2020-05-18T14:54:28-04:00,high,escalated,"var error;
        try {
          process.stdout.write(`Unlinking ${pathToUnlink} `);
          fs.unlinkSync(pathToUnlink);
          return this.logSuccess();
        } catch (error1) {
          error = error1;",43,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/lib/unlink.js,file,46,46,2020-05-18T14:51:42-04:00,Static Analysis,f51f6f33e31fed24e3317f2ff0266f8a2a2487a96c7aad7b458e34ab2b852cca,195329,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Found fs.unlinkSync with non literal argument at index 0,plain-text,Atom x64/resources/app/apm/lib/unlink.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\unlink.js,file,24,11,46,46,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.9773905,1
99,Static Analysis,2020-05-18T14:51:00-04:00,68112,2020-05-18T14:54:28-04:00,medium,false-positive,"config = require('./apm');

  fs = require('./fs');

  module.exports = Unlink = (function() {
    class Unlink extends Command {",11,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/unlink.js,file,14,14,2020-05-18T14:51:42-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,195278,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/unlink.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\unlink.js,file,15,8,14,14,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
100,Static Analysis,2020-05-18T14:51:00-04:00,68113,2020-05-18T14:54:28-04:00,high,false-positive,"if (!options.argv.dev) {
            ref1 = fs.list(this.packagesPath);
            for (j = 0, len1 = ref1.length; j < len1; j++) {
              child = ref1[j];
              packagePath = path.join(this.packagesPath, child);
              if (fs.isSymbolicLinkSync(packagePath)) {
                this.unlinkPath(packagePath);",66,,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/lib/unlink.js,file,69,69,2020-05-18T14:51:42-04:00,Static Analysis,6569b353992e88510a975ec3412e07f9c2539e0cf8eb813d02c1c97e2a312d82,195357,high,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Generic Object Injection Sink,plain-text,Atom x64/resources/app/apm/lib/unlink.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\unlink.js,file,30,23,69,69,security,detect-object-injection,ESLint,ESLINT-SECURITY-detect-object-injection,Detect object injection,"Detects `variable[key]` as a left- or right-hand assignment operand.

More information: [The Dangers of Square Bracket Notation](https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/the-dangers-of-square-bracket-notation.md)",markdown,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.9251437,1
101,Static Analysis,2020-05-18T14:51:00-04:00,68124,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Squirrel/Shell/ShellLink/set_IconPath,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201261,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Squirrel/Shell/ShellLink/set_IconPath,Squirrel/Shell/ShellLink/set_IconPath,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
102,Static Analysis,2020-05-18T14:51:00-04:00,68243,2020-05-18T14:54:28-04:00,high,escalated,,,,,,CWE-695: Use of Low-Level Functionality,http://cwevis.org/browse/695,695,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/Native/SafeHandleWithBuffer/(self),logical,,,2020-05-18T14:51:59-04:00,Static Analysis,3ac9036736202c636e5a647bb8073bf5337a353e654d9216f8af1cf9293e2f3b,202161,high,,,CWE-695: Use of Low-Level Functionality,http://cwevis.org/browse/695,695,The type uses System.IntPtr or System.UIntPtr instead of System.Runtime.InteropServices.SafeHandle. Consider changing the code to use SafeHandle.,plain-text,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/Native/SafeHandleWithBuffer/(self),Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/Native/SafeHandleWithBuffer/(self),logical,,,,,,PreferSafeHandleRule,Gendarme,GEND-PreferSafeHandleRule,Prefer Safe Handle ,"In general it is best to interop with native code using
**System.Runtime.InteropServices.SafeHandle** instead of
**System.IntPtr** or **System.UIntPtr** because:

SafeHandles are type safe.
SafeHandles are guaranteed to be disposed of during exceptional
conditions like a thread aborting unexpectedly or a stack overflow.
SafeHandles are not vulnerable to reycle attacks.
You don't need to write a finalizer which can be tricky to do because
they execute within their own thread, may execute on partially
constructed objects, and normally tear down the application if you allow
an exception to escape from them.


 **Bad** example:


```csharp
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable.
public sealed class Database {
    ~Database ()
    {
        // This will execute even if the ctor throws so it is important to check
        // to see if the fields are initialized.
        if (m_database != IntPtr.Zero) {
            NativeMethods.sqlite3_close (m_database);
        }
    }

    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        int err = NativeMethods.sqlite3_open_v2 (path, out m_database, flags, IntPtr.Zero);
        // handle errors
    }

    // exec and query methods would go here

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (IntPtr db);

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private IntPtr m_database;
}
```
**Good** example:


```csharp
using System.Runtime.ConstrainedExecution;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable, but you do not need to implement a finalizer because
// SafeHandle will take care of the cleanup.
internal sealed class Database {
    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        m_database = new SqlitePtr (path, flags);
    }

    // exec and query methods would go here

    // This corresponds to a native sqlite3*.
    [SecurityPermission (SecurityAction.InheritanceDemand, UnmanagedCode = true)]
    [SecurityPermission (SecurityAction.Demand, UnmanagedCode = true)]
    private sealed class SqlitePtr : SafeHandle {
        public SqlitePtr (string path, NativeMethods.OpenFlags flags) : base (IntPtr.Zero, true)
        {
            int err = NativeMethods.sqlite3_open_v2 (path, out handle, flags, IntPtr.Zero);
            // handle errors
        }

        public override bool IsInvalid {
            get {
                return (handle == IntPtr.Zero);
            }
        }

        // This will not be called if the handle is invalid. Note that this method should not throw.
        [ReliabilityContract (Consistency.WillNotCorruptState, Cer.MayFail)]
        protected override bool ReleaseHandle ()
        {
            NativeMethods.sqlite3_close (this);
            return true;
        }
    }

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (SqlitePtr db);

        // Open must take an IntPtr but all other methods take a type safe SqlitePtr.
        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private SqlitePtr m_database;
}
```",markdown,GEND-PreferSafeHandleRule,Prefer Safe Handle ,"In general it is best to interop with native code using
**System.Runtime.InteropServices.SafeHandle** instead of
**System.IntPtr** or **System.UIntPtr** because:

SafeHandles are type safe.
SafeHandles are guaranteed to be disposed of during exceptional
conditions like a thread aborting unexpectedly or a stack overflow.
SafeHandles are not vulnerable to reycle attacks.
You don't need to write a finalizer which can be tricky to do because
they execute within their own thread, may execute on partially
constructed objects, and normally tear down the application if you allow
an exception to escape from them.


 **Bad** example:


```csharp
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable.
public sealed class Database {
    ~Database ()
    {
        // This will execute even if the ctor throws so it is important to check
        // to see if the fields are initialized.
        if (m_database != IntPtr.Zero) {
            NativeMethods.sqlite3_close (m_database);
        }
    }

    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        int err = NativeMethods.sqlite3_open_v2 (path, out m_database, flags, IntPtr.Zero);
        // handle errors
    }

    // exec and query methods would go here

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (IntPtr db);

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private IntPtr m_database;
}
```
**Good** example:


```csharp
using System.Runtime.ConstrainedExecution;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable, but you do not need to implement a finalizer because
// SafeHandle will take care of the cleanup.
internal sealed class Database {
    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        m_database = new SqlitePtr (path, flags);
    }

    // exec and query methods would go here

    // This corresponds to a native sqlite3*.
    [SecurityPermission (SecurityAction.InheritanceDemand, UnmanagedCode = true)]
    [SecurityPermission (SecurityAction.Demand, UnmanagedCode = true)]
    private sealed class SqlitePtr : SafeHandle {
        public SqlitePtr (string path, NativeMethods.OpenFlags flags) : base (IntPtr.Zero, true)
        {
            int err = NativeMethods.sqlite3_open_v2 (path, out handle, flags, IntPtr.Zero);
            // handle errors
        }

        public override bool IsInvalid {
            get {
                return (handle == IntPtr.Zero);
            }
        }

        // This will not be called if the handle is invalid. Note that this method should not throw.
        [ReliabilityContract (Consistency.WillNotCorruptState, Cer.MayFail)]
        protected override bool ReleaseHandle ()
        {
            NativeMethods.sqlite3_close (this);
            return true;
        }
    }

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (SqlitePtr db);

        // Open must take an IntPtr but all other methods take a type safe SqlitePtr.
        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private SqlitePtr m_database;
}
```",markdown,,,escalated,0.8318374,1
103,Static Analysis,2020-05-18T14:51:00-04:00,68244,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/Native/SafeHandleWithBuffer/(self),logical,,,2020-05-18T14:51:59-04:00,Static Analysis,414d6c24c302fd2cbbece4eadd9ce51d62d9212d63e6b4fda5e2c8d09d530504,201996,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,"This type contains native fields but does not have a finalizer. Add a finalizer, calling Dispose(true), to release unmanaged resources.",plain-text,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/Native/SafeHandleWithBuffer/(self),Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/Native/SafeHandleWithBuffer/(self),logical,,,,,,DisposableTypesShouldHaveFinalizerRule,Gendarme,GEND-DisposableTypesShouldHaveFinalizerRule,Disposable Types Should Have Finalizer ,"This rule will fire for types which implement **System.IDisposable**,
contain native fields such as **System.IntPtr**, **System.UIntPtr**, and
**System.Runtime.InteropServices.HandleRef**, but do not define a
finalizer.

**Bad** example:


```csharp
class NoFinalizer {
    IntPtr field;
}
```
**Good** example:


```csharp
class HasFinalizer {
    IntPtr field;

    ~HasFinalizer ()
    {
        UnmanagedFree (field);
    }
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.98150104,1
104,Static Analysis,2020-05-18T14:51:00-04:00,68262,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/Web/XmlTransform/XmlAttributePreservingWriter/LookupPrefix,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201212,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Microsoft/Web/XmlTransform/XmlAttributePreservingWriter/LookupPrefix,Microsoft/Web/XmlTransform/XmlAttributePreservingWriter/LookupPrefix,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
105,Static Analysis,2020-05-18T14:51:00-04:00,68265,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/IO/RewindableStream/Read,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201133,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/IO/RewindableStream/Read,SharpCompress/IO/RewindableStream/Read,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
106,Static Analysis,2020-05-18T14:51:00-04:00,68285,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/Web/XmlTransform/XmlAttributePreservingWriter/WriteStartDocument,logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.98149246,1
107,Static Analysis,2020-05-18T14:51:00-04:00,68304,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Compressors/LZMA/LZipStream/Finish,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201150,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Compressors/LZMA/LZipStream/Finish,SharpCompress/Compressors/LZMA/LZipStream/Finish,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
108,Static Analysis,2020-05-18T14:51:00-04:00,68357,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-227: 7PK - API Abuse,http://cwevis.org/browse/227,227,NuGet/PackageNotInstalledException/(self),logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-dc56fd6c6aaaf7aef3e91a691e1f8bd8f7311763a2d3286fce16c6c5cf52b5e2,API Abuse,"The software uses an API in a manner contrary to its intended use.

An API is a contract between a caller and a callee. The most common forms of API misuse occurs when the caller does not honor its end of this contract. For example, if a program does not call chdir() after calling chroot(), it violates the contract that specifies how to change the active root directory in a secure fashion. Another good example of library abuse is expecting the callee to return trustworthy DNS information to the caller. In this case, the caller misuses the callee API by making certain assumptions about its behavior (that the return value can be used for authentication purposes). One can also violate the caller-callee contract from the other side. For example, if a coder subclasses SecureRandom and returns a non-random value, the contract is violated.",markdown,,,escalated,0.94525355,1
109,Static Analysis,2020-05-18T14:51:00-04:00,68522,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-465: Pointer Issues,http://cwevis.org/browse/465,465,Microsoft/IdentityModel/Clients/ActiveDirectory/SecureClientSecret/ApplyTo,logical,,,2020-05-18T14:51:59-04:00,Static Analysis,a5fceea52596662e61c66f7abfad9036937d4f22e1a53681e48ab77fa50bb893,201963,medium,,,CWE-476: NULL Pointer Dereference,http://cwevis.org/browse/476,476,A visible method does not check its parameter(s) for null values. Since the caller is unknown you should always verify all of your parameters to protect yourself.,plain-text,Microsoft/IdentityModel/Clients/ActiveDirectory/SecureClientSecret/ApplyTo,Microsoft/IdentityModel/Clients/ActiveDirectory/SecureClientSecret/ApplyTo,logical,,,,,,CheckParametersNullityInVisibleMethodsRule,Gendarme,GEND-CheckParametersNullityInVisibleMethodsRule,Check Parameters Nullity In Visible Methods ,"This rule checks if all nullable parameters of visible methods are
compared with **null** before they get used. This reduce the likelyhood
of the runtime throwing a **NullReferenceException**.

**Bad** example:


```csharp
[DllImport (""message"")]
internal static extern byte [] Parse (string s, int length);

public bool TryParse (string s, out Message m)
{
    // is 's' is null then 's.Length' will throw a NullReferenceException
    // which a TryParse method should never do
    byte [] data = Parse (s, s.Length);
    if (data == null) {
        m = null;
        return false;
    }
    m = new Message (data);
    return true;
}
```
**Good** example:


```csharp
[DllImport (""message"")]
internal static extern byte [] Parse (string s, int length);

public bool TryParse (string s, out Message m)
{
    if (s == null) {
        m = null;
        return false;
    }
    byte [] data = Parse (s, s.Length);
    if (data == null) {
        m = null;
        return false;
    }
    m = new Message (data);
    return true;
}
```",markdown,rule-0dd0e028a5ce327b29cd3ffa9ef62c97353c7155364a9a4b89933187ee675fef,Invalid Pointer,,,,,escalated,0.56592375,1
110,Static Analysis,2020-05-18T14:51:00-04:00,68523,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Compressors/Xz/XZHeader/FromStream,logical,,,2020-05-18T14:51:56-04:00,Static Analysis,f1a784bcc8db4a1699133da6f083651de3ffe2d8bfed7ec03494af61ca139db5,200164,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,This disposable local is not guaranteed to be disposed of before the method returns. Use a 'using' statement or surround the local's usage with a try/finally block. Local of type 'NonDisposingStream' is not disposed of (at least not locally).,plain-text,SharpCompress/Compressors/Xz/XZHeader/FromStream,SharpCompress/Compressors/Xz/XZHeader/FromStream,logical,,,,,,EnsureLocalDisposalRule,Gendarme,GEND-EnsureLocalDisposalRule,Ensure Local Disposal ,"This rule checks that disposable locals are always disposed of before
the method returns. Use a 'using' statement (or a try/finally block) to
guarantee local disposal even in the event an unhandled exception
occurs.

**Bad** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    DecodeHeader (stream);
    if (!DecodedHeader.HasContent) {
        return;
    }
    DecodeContent (stream);
    stream.Dispose ();
}
```
**Good** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        DecodeHeader (stream);
        if (!DecodedHeader.HasContent) {
            return;
        }
        DecodeContent (stream);
    }
}
```
**Bad** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    Decode (stream);
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
    stream.Dispose ();
}
```
**Good** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        Decode (stream);
    }
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.9820098,1
111,Static Analysis,2020-05-18T14:51:00-04:00,68577,2020-05-18T14:54:28-04:00,medium,false-positive,"}
      }).catch(function() {
        var token;
        if (token = process.env.ATOM_ACCESS_TOKEN) {
          return callback(null, token);
        } else {
          return callback(""No Atom.io API token in keychain\nRun `apm login` or set the `ATOM_ACCESS_TOKEN` environment variable."");",36,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/auth.js,file,39,39,2020-05-18T14:51:33-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,192006,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/auth.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\auth.js,file,28,21,39,39,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
112,Static Analysis,2020-05-18T14:51:00-04:00,68578,2020-05-18T14:54:28-04:00,medium,false-positive,"var error, keytar, tokenName;

  try {
    keytar = require('keytar');
  } catch (error1) {
    error = error1;
    // Gracefully handle keytar failing to load due to missing library on Linux",2,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/auth.js,file,5,5,2020-05-18T14:51:33-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,191994,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/auth.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\auth.js,file,21,14,5,5,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
113,Static Analysis,2020-05-18T14:51:00-04:00,68579,2020-05-18T14:54:28-04:00,high,escalated,"}
      }).catch(function() {
        var token;
        if (token = process.env.ATOM_ACCESS_TOKEN) {
          return callback(null, token);
        } else {
          return callback(""No Atom.io API token in keychain\nRun `apm login` or set the `ATOM_ACCESS_TOKEN` environment variable."");",36,,,,CWE-697: Incorrect Comparison,http://cwevis.org/browse/697,697,Atom x64/resources/app/apm/lib/auth.js,file,39,39,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-c271f2bb931810eef633f7c736d1dd934fbd6ed5f62ac8d8ea39ade811190622,Comparison,,,,,escalated,0.9110538,1
114,Static Analysis,2020-05-18T14:51:00-04:00,68580,2020-05-18T14:54:28-04:00,medium,false-positive,"} catch (error1) {
    error = error1;
    // Gracefully handle keytar failing to load due to missing library on Linux
    if (process.platform === 'linux') {
      keytar = {
        findPassword: function() {
          return Promise.reject();",6,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/auth.js,file,9,9,2020-05-18T14:51:33-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,191995,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/auth.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\auth.js,file,16,9,9,9,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
115,Static Analysis,2020-05-18T14:51:00-04:00,68582,2020-05-18T14:54:28-04:00,medium,false-positive,"tokenName = 'Atom.io API Token';

  module.exports = {
    // Get the Atom.io API token from the keychain.

    // callback - A function to call with an error as the first argument and a",22,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/auth.js,file,25,25,2020-05-18T14:51:33-04:00,Static Analysis,62173c3357301b64bcb7cb49ad65b9eeb8aa24356212b93fe0fe0166d3218ce7,191999,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'module' is not defined.,plain-text,Atom x64/resources/app/apm/lib/auth.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\auth.js,file,9,3,25,25,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.068299174,0
116,Static Analysis,2020-05-18T14:51:00-04:00,68624,2020-05-18T14:54:28-04:00,high,escalated,,,,,,CWE-695: Use of Low-Level Functionality,http://cwevis.org/browse/695,695,Microsoft/Alm/Win32/Kernel32/(self),logical,,,2020-05-18T14:52:00-04:00,Static Analysis,3ac9036736202c636e5a647bb8073bf5337a353e654d9216f8af1cf9293e2f3b,202443,high,,,CWE-695: Use of Low-Level Functionality,http://cwevis.org/browse/695,695,The type uses System.IntPtr or System.UIntPtr instead of System.Runtime.InteropServices.SafeHandle. Consider changing the code to use SafeHandle.,plain-text,Microsoft/Alm/Win32/Kernel32/(self),Microsoft/Alm/Win32/Kernel32/(self),logical,,,,,,PreferSafeHandleRule,Gendarme,GEND-PreferSafeHandleRule,Prefer Safe Handle ,"In general it is best to interop with native code using
**System.Runtime.InteropServices.SafeHandle** instead of
**System.IntPtr** or **System.UIntPtr** because:

SafeHandles are type safe.
SafeHandles are guaranteed to be disposed of during exceptional
conditions like a thread aborting unexpectedly or a stack overflow.
SafeHandles are not vulnerable to reycle attacks.
You don't need to write a finalizer which can be tricky to do because
they execute within their own thread, may execute on partially
constructed objects, and normally tear down the application if you allow
an exception to escape from them.


 **Bad** example:


```csharp
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable.
public sealed class Database {
    ~Database ()
    {
        // This will execute even if the ctor throws so it is important to check
        // to see if the fields are initialized.
        if (m_database != IntPtr.Zero) {
            NativeMethods.sqlite3_close (m_database);
        }
    }

    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        int err = NativeMethods.sqlite3_open_v2 (path, out m_database, flags, IntPtr.Zero);
        // handle errors
    }

    // exec and query methods would go here

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (IntPtr db);

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private IntPtr m_database;
}
```
**Good** example:


```csharp
using System.Runtime.ConstrainedExecution;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable, but you do not need to implement a finalizer because
// SafeHandle will take care of the cleanup.
internal sealed class Database {
    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        m_database = new SqlitePtr (path, flags);
    }

    // exec and query methods would go here

    // This corresponds to a native sqlite3*.
    [SecurityPermission (SecurityAction.InheritanceDemand, UnmanagedCode = true)]
    [SecurityPermission (SecurityAction.Demand, UnmanagedCode = true)]
    private sealed class SqlitePtr : SafeHandle {
        public SqlitePtr (string path, NativeMethods.OpenFlags flags) : base (IntPtr.Zero, true)
        {
            int err = NativeMethods.sqlite3_open_v2 (path, out handle, flags, IntPtr.Zero);
            // handle errors
        }

        public override bool IsInvalid {
            get {
                return (handle == IntPtr.Zero);
            }
        }

        // This will not be called if the handle is invalid. Note that this method should not throw.
        [ReliabilityContract (Consistency.WillNotCorruptState, Cer.MayFail)]
        protected override bool ReleaseHandle ()
        {
            NativeMethods.sqlite3_close (this);
            return true;
        }
    }

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (SqlitePtr db);

        // Open must take an IntPtr but all other methods take a type safe SqlitePtr.
        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private SqlitePtr m_database;
}
```",markdown,GEND-PreferSafeHandleRule,Prefer Safe Handle ,"In general it is best to interop with native code using
**System.Runtime.InteropServices.SafeHandle** instead of
**System.IntPtr** or **System.UIntPtr** because:

SafeHandles are type safe.
SafeHandles are guaranteed to be disposed of during exceptional
conditions like a thread aborting unexpectedly or a stack overflow.
SafeHandles are not vulnerable to reycle attacks.
You don't need to write a finalizer which can be tricky to do because
they execute within their own thread, may execute on partially
constructed objects, and normally tear down the application if you allow
an exception to escape from them.


 **Bad** example:


```csharp
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable.
public sealed class Database {
    ~Database ()
    {
        // This will execute even if the ctor throws so it is important to check
        // to see if the fields are initialized.
        if (m_database != IntPtr.Zero) {
            NativeMethods.sqlite3_close (m_database);
        }
    }

    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        int err = NativeMethods.sqlite3_open_v2 (path, out m_database, flags, IntPtr.Zero);
        // handle errors
    }

    // exec and query methods would go here

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (IntPtr db);

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private IntPtr m_database;
}
```
**Good** example:


```csharp
using System.Runtime.ConstrainedExecution;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable, but you do not need to implement a finalizer because
// SafeHandle will take care of the cleanup.
internal sealed class Database {
    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        m_database = new SqlitePtr (path, flags);
    }

    // exec and query methods would go here

    // This corresponds to a native sqlite3*.
    [SecurityPermission (SecurityAction.InheritanceDemand, UnmanagedCode = true)]
    [SecurityPermission (SecurityAction.Demand, UnmanagedCode = true)]
    private sealed class SqlitePtr : SafeHandle {
        public SqlitePtr (string path, NativeMethods.OpenFlags flags) : base (IntPtr.Zero, true)
        {
            int err = NativeMethods.sqlite3_open_v2 (path, out handle, flags, IntPtr.Zero);
            // handle errors
        }

        public override bool IsInvalid {
            get {
                return (handle == IntPtr.Zero);
            }
        }

        // This will not be called if the handle is invalid. Note that this method should not throw.
        [ReliabilityContract (Consistency.WillNotCorruptState, Cer.MayFail)]
        protected override bool ReleaseHandle ()
        {
            NativeMethods.sqlite3_close (this);
            return true;
        }
    }

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (SqlitePtr db);

        // Open must take an IntPtr but all other methods take a type safe SqlitePtr.
        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private SqlitePtr m_database;
}
```",markdown,,,escalated,0.8318374,1
117,Static Analysis,2020-05-18T14:51:00-04:00,68636,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-189: Numeric Errors,http://cwevis.org/browse/189,189,SharpCompress/Compressors/PPMd/I1/MemoryNode/op_Subtraction,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,03ba04f65bdee74e716d09d64feb1f004a116c5543f675d9955d1297acbf5baf,201061,medium,,,CWE-190: Integer Overflow or Wraparound,http://cwevis.org/browse/190,190,This method casts the result of an integer multiplication into a larger integer. This may result in an overflow before the cast can be done. Cast the operands instead of the result.,plain-text,SharpCompress/Compressors/PPMd/I1/MemoryNode/op_Subtraction,SharpCompress/Compressors/PPMd/I1/MemoryNode/op_Subtraction,logical,,,,,,ReviewCastOnIntegerMultiplicationRule,Gendarme,GEND-ReviewCastOnIntegerMultiplicationRule,Review Cast On Integer Multiplication ,"This rule checks for integral multiply operations where the result is
cast to a larger integral type. It's safer instead to cast an operand to
the larger type to minimize the chance of overflow.

**Bad** example:


```csharp
public long Bad (int a, int b)
{
    // e.g. Bad (Int32.MaxInt, Int32.MaxInt) == 1
    return a * b;
}
```
**Good** example:


```csharp
public long Good (int a, int b)
{
    // e.g. Good (Int32.MaxInt, Int32.MaxInt) == 4611686014132420609
    return (long) a * b;
}
```",markdown,rule-87c4a91bc4c9e20c70f0637bd67a4d03975f25b3ec675b9cc13d0f04540c76a6,Numeric Error,,,,,escalated,0.9599974,1
118,Static Analysis,2020-05-18T14:51:00-04:00,68641,2020-05-18T14:54:28-04:00,medium,false-positive,"deprecatedPackages = null;

  exports.isDeprecatedPackage = function(name, version) {
    var deprecatedVersionRange, ref;
    if (deprecatedPackages == null) {
      deprecatedPackages = (ref = require('../deprecated-packages')) != null ? ref : {};",5,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/deprecated-packages.js,file,8,8,2020-05-18T14:51:34-04:00,Static Analysis,6c17de9eabdb8c0c9c4077534211faf0dd41f367fd771a905bcfbb889f0a8595,192249,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'exports' is not defined.,plain-text,Atom x64/resources/app/apm/lib/deprecated-packages.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\deprecated-packages.js,file,10,3,8,8,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.0762589,0
119,Static Analysis,2020-05-18T14:51:00-04:00,68642,2020-05-18T14:54:28-04:00,medium,false-positive,"exports.isDeprecatedPackage = function(name, version) {
    var deprecatedVersionRange, ref;
    if (deprecatedPackages == null) {
      deprecatedPackages = (ref = require('../deprecated-packages')) != null ? ref : {};
    }
    if (!deprecatedPackages.hasOwnProperty(name)) {
      return false;",8,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/deprecated-packages.js,file,11,11,2020-05-18T14:51:34-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192250,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/deprecated-packages.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\deprecated-packages.js,file,42,35,11,11,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
120,Static Analysis,2020-05-18T14:51:00-04:00,68643,2020-05-18T14:54:28-04:00,high,escalated,"if (!deprecatedPackages.hasOwnProperty(name)) {
      return false;
    }
    deprecatedVersionRange = deprecatedPackages[name].version;
    if (!deprecatedVersionRange) {
      return true;
    }",13,,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/lib/deprecated-packages.js,file,16,16,2020-05-18T14:51:34-04:00,Static Analysis,6569b353992e88510a975ec3412e07f9c2539e0cf8eb813d02c1c97e2a312d82,192252,high,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Generic Object Injection Sink,plain-text,Atom x64/resources/app/apm/lib/deprecated-packages.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\deprecated-packages.js,file,54,30,16,16,security,detect-object-injection,ESLint,ESLINT-SECURITY-detect-object-injection,Detect object injection,"Detects `variable[key]` as a left- or right-hand assignment operand.

More information: [The Dangers of Square Bracket Notation](https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/the-dangers-of-square-bracket-notation.md)",markdown,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.9251437,1
121,Static Analysis,2020-05-18T14:51:00-04:00,68645,2020-05-18T14:54:28-04:00,medium,false-positive,"(function() {
  var deprecatedPackages, semver;

  semver = require('semver');

  deprecatedPackages = null;",1,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/deprecated-packages.js,file,4,4,2020-05-18T14:51:34-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192248,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/deprecated-packages.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\deprecated-packages.js,file,19,12,4,4,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
122,Static Analysis,2020-05-18T14:51:00-04:00,68847,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-227: 7PK - API Abuse,http://cwevis.org/browse/227,227,SharpCompress/Common/InvalidFormatException/(self),logical,,,2020-05-18T14:51:57-04:00,Static Analysis,47a6df44d16eb182f816f23918542a817d2995bc2ddf0168976c20b9c8c63cb2,200684,medium,,,CWE-573: Improper Following of Specification by Caller,http://cwevis.org/browse/573,573,"The required constructor for ISerializable is not present in this type. Add a (private for sealed, protected otherwise) serialization constructor for this type. The required constructor for ISerializable is not present in this type.",plain-text,SharpCompress/Common/InvalidFormatException/(self),SharpCompress/Common/InvalidFormatException/(self),logical,,,,,,MissingSerializationConstructorRule,Gendarme,GEND-MissingSerializationConstructorRule,Missing Serialization Constructor ,"This rule checks for types that implement **System.ISerializable** but
don't provide a serialization constructor. The constructor is required
in order to make the type serializeable but cannot be enforced by the
interface. The serialization constructor should be **private** for
**sealed** types and **protected** for unsealed types.

**Bad** example:


```csharp
[Serializable]
public class Bad : ISerializable {
    public void GetObjectData (SerializationInfo info, StreamingContext context)
    {
    }
}
```
**Good** example (sealed):


```csharp
[Serializable]
public sealed class Good : ISerializable {
    private ClassWithConstructor (SerializationInfo info, StreamingContext context)
    {
    }

    public void GetObjectData (SerializationInfo info, StreamingContext context)
    {
    }
}
```
**Good** example:


```csharp
[Serializable]
public class Good : ISerializable {
    protected ClassWithConstructor (SerializationInfo info, StreamingContext context)
    {
    }

    public void GetObjectData (SerializationInfo info, StreamingContext context)
    {
    }
}
```",markdown,rule-dc56fd6c6aaaf7aef3e91a691e1f8bd8f7311763a2d3286fce16c6c5cf52b5e2,API Abuse,"The software uses an API in a manner contrary to its intended use.

An API is a contract between a caller and a callee. The most common forms of API misuse occurs when the caller does not honor its end of this contract. For example, if a program does not call chdir() after calling chroot(), it violates the contract that specifies how to change the active root directory in a secure fashion. Another good example of library abuse is expecting the callee to return trustworthy DNS information to the caller. In this case, the caller misuses the callee API by making certain assumptions about its behavior (that the return value can be used for authentication purposes). One can also violate the caller-callee contract from the other side. For example, if a coder subclasses SecureRandom and returns a non-random value, the contract is violated.",markdown,,,escalated,0.94911677,1
123,Static Analysis,2020-05-18T14:51:00-04:00,68851,2020-05-18T14:54:28-04:00,high,escalated,,,,,,CWE-227: 7PK - API Abuse,http://cwevis.org/browse/227,227,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/Native/Win32Native/UnsafeNativeMethods/(self),logical,,,2020-05-18T14:52:00-04:00,Static Analysis,dbd57bbd7b01d2cdc8d58222b94308e03da707a5c7a5e9eab6acb7a083c63ff7,202213,high,,,CWE-676: Use of Potentially Dangerous Function,http://cwevis.org/browse/676,676,This type or method is decorated with [SuppressUnmanagedCodeSecurity] which reduce the number of security checks done when unmanaged code is called. Ensure that use of this attribute does not compromise the security of the application.,plain-text,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/Native/Win32Native/UnsafeNativeMethods/(self),Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/Native/Win32Native/UnsafeNativeMethods/(self),logical,,,,,,ReviewSuppressUnmanagedCodeSecurityUsageRule,Gendarme,GEND-ReviewSuppressUnmanagedCodeSecurityUsageRule,Review Suppress Unmanaged Code Security Usage ,"This rule fires if a type or method is decorated with the
**[SuppressUnmanagedCodeSecurity]**attribute. This attribute reduces the
security checks done when executing unmanaged code and its usage should
be reviewed to confirm that no exploitable security holes are present.

Example:


```csharp
[SuppressUnmanagedCodeSecurity]
public class Safe {
    [DllImport (""User32.dll"")]
    static extern Boolean MessageBeep (UInt32 beepType);
}
```",markdown,rule-dc56fd6c6aaaf7aef3e91a691e1f8bd8f7311763a2d3286fce16c6c5cf52b5e2,API Abuse,"The software uses an API in a manner contrary to its intended use.

An API is a contract between a caller and a callee. The most common forms of API misuse occurs when the caller does not honor its end of this contract. For example, if a program does not call chdir() after calling chroot(), it violates the contract that specifies how to change the active root directory in a secure fashion. Another good example of library abuse is expecting the callee to return trustworthy DNS information to the caller. In this case, the caller misuses the callee API by making certain assumptions about its behavior (that the return value can be used for authentication purposes). One can also violate the caller-callee contract from the other side. For example, if a coder subclasses SecureRandom and returns a non-random value, the contract is violated.",markdown,,,escalated,0.9466878,1
124,Static Analysis,2020-05-18T14:51:00-04:00,69123,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Common/Zip/WinzipAesCryptoStream/Read,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201184,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Common/Zip/WinzipAesCryptoStream/Read,SharpCompress/Common/Zip/WinzipAesCryptoStream/Read,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
125,Static Analysis,2020-05-18T14:51:00-04:00,69215,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Squirrel/UpdateManager/RemoveShortcutsForExecutable,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201257,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Squirrel/UpdateManager/RemoveShortcutsForExecutable,Squirrel/UpdateManager/RemoveShortcutsForExecutable,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
126,Static Analysis,2020-05-18T14:51:00-04:00,69404,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Common/EntryStream/Read,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201181,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Common/EntryStream/Read,SharpCompress/Common/EntryStream/Read,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
127,Static Analysis,2020-05-18T14:51:00-04:00,69406,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/Web/XmlTransform/XmlAttributePreservingWriter/WriteEndDocument,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201220,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Microsoft/Web/XmlTransform/XmlAttributePreservingWriter/WriteEndDocument,Microsoft/Web/XmlTransform/XmlAttributePreservingWriter/WriteEndDocument,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
128,Static Analysis,2020-05-18T14:51:00-04:00,69486,2020-05-18T14:54:28-04:00,high,escalated,,,,,,CWE-695: Use of Low-Level Functionality,http://cwevis.org/browse/695,695,Squirrel/NOTIFYITEM_Writable/(self),logical,,,2020-05-18T14:51:57-04:00,Static Analysis,3ac9036736202c636e5a647bb8073bf5337a353e654d9216f8af1cf9293e2f3b,200968,high,,,CWE-695: Use of Low-Level Functionality,http://cwevis.org/browse/695,695,The type uses System.IntPtr or System.UIntPtr instead of System.Runtime.InteropServices.SafeHandle. Consider changing the code to use SafeHandle.,plain-text,Squirrel/NOTIFYITEM_Writable/(self),Squirrel/NOTIFYITEM_Writable/(self),logical,,,,,,PreferSafeHandleRule,Gendarme,GEND-PreferSafeHandleRule,Prefer Safe Handle ,"In general it is best to interop with native code using
**System.Runtime.InteropServices.SafeHandle** instead of
**System.IntPtr** or **System.UIntPtr** because:

SafeHandles are type safe.
SafeHandles are guaranteed to be disposed of during exceptional
conditions like a thread aborting unexpectedly or a stack overflow.
SafeHandles are not vulnerable to reycle attacks.
You don't need to write a finalizer which can be tricky to do because
they execute within their own thread, may execute on partially
constructed objects, and normally tear down the application if you allow
an exception to escape from them.


 **Bad** example:


```csharp
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable.
public sealed class Database {
    ~Database ()
    {
        // This will execute even if the ctor throws so it is important to check
        // to see if the fields are initialized.
        if (m_database != IntPtr.Zero) {
            NativeMethods.sqlite3_close (m_database);
        }
    }

    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        int err = NativeMethods.sqlite3_open_v2 (path, out m_database, flags, IntPtr.Zero);
        // handle errors
    }

    // exec and query methods would go here

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (IntPtr db);

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private IntPtr m_database;
}
```
**Good** example:


```csharp
using System.Runtime.ConstrainedExecution;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable, but you do not need to implement a finalizer because
// SafeHandle will take care of the cleanup.
internal sealed class Database {
    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        m_database = new SqlitePtr (path, flags);
    }

    // exec and query methods would go here

    // This corresponds to a native sqlite3*.
    [SecurityPermission (SecurityAction.InheritanceDemand, UnmanagedCode = true)]
    [SecurityPermission (SecurityAction.Demand, UnmanagedCode = true)]
    private sealed class SqlitePtr : SafeHandle {
        public SqlitePtr (string path, NativeMethods.OpenFlags flags) : base (IntPtr.Zero, true)
        {
            int err = NativeMethods.sqlite3_open_v2 (path, out handle, flags, IntPtr.Zero);
            // handle errors
        }

        public override bool IsInvalid {
            get {
                return (handle == IntPtr.Zero);
            }
        }

        // This will not be called if the handle is invalid. Note that this method should not throw.
        [ReliabilityContract (Consistency.WillNotCorruptState, Cer.MayFail)]
        protected override bool ReleaseHandle ()
        {
            NativeMethods.sqlite3_close (this);
            return true;
        }
    }

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (SqlitePtr db);

        // Open must take an IntPtr but all other methods take a type safe SqlitePtr.
        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private SqlitePtr m_database;
}
```",markdown,GEND-PreferSafeHandleRule,Prefer Safe Handle ,"In general it is best to interop with native code using
**System.Runtime.InteropServices.SafeHandle** instead of
**System.IntPtr** or **System.UIntPtr** because:

SafeHandles are type safe.
SafeHandles are guaranteed to be disposed of during exceptional
conditions like a thread aborting unexpectedly or a stack overflow.
SafeHandles are not vulnerable to reycle attacks.
You don't need to write a finalizer which can be tricky to do because
they execute within their own thread, may execute on partially
constructed objects, and normally tear down the application if you allow
an exception to escape from them.


 **Bad** example:


```csharp
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable.
public sealed class Database {
    ~Database ()
    {
        // This will execute even if the ctor throws so it is important to check
        // to see if the fields are initialized.
        if (m_database != IntPtr.Zero) {
            NativeMethods.sqlite3_close (m_database);
        }
    }

    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        int err = NativeMethods.sqlite3_open_v2 (path, out m_database, flags, IntPtr.Zero);
        // handle errors
    }

    // exec and query methods would go here

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (IntPtr db);

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private IntPtr m_database;
}
```
**Good** example:


```csharp
using System.Runtime.ConstrainedExecution;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable, but you do not need to implement a finalizer because
// SafeHandle will take care of the cleanup.
internal sealed class Database {
    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        m_database = new SqlitePtr (path, flags);
    }

    // exec and query methods would go here

    // This corresponds to a native sqlite3*.
    [SecurityPermission (SecurityAction.InheritanceDemand, UnmanagedCode = true)]
    [SecurityPermission (SecurityAction.Demand, UnmanagedCode = true)]
    private sealed class SqlitePtr : SafeHandle {
        public SqlitePtr (string path, NativeMethods.OpenFlags flags) : base (IntPtr.Zero, true)
        {
            int err = NativeMethods.sqlite3_open_v2 (path, out handle, flags, IntPtr.Zero);
            // handle errors
        }

        public override bool IsInvalid {
            get {
                return (handle == IntPtr.Zero);
            }
        }

        // This will not be called if the handle is invalid. Note that this method should not throw.
        [ReliabilityContract (Consistency.WillNotCorruptState, Cer.MayFail)]
        protected override bool ReleaseHandle ()
        {
            NativeMethods.sqlite3_close (this);
            return true;
        }
    }

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (SqlitePtr db);

        // Open must take an IntPtr but all other methods take a type safe SqlitePtr.
        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private SqlitePtr m_database;
}
```",markdown,,,escalated,0.8318374,1
129,Static Analysis,2020-05-18T14:51:00-04:00,69555,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Atlassian/Bitbucket/Authentication/Gui/ShowViewModel,logical,,,2020-05-18T14:51:51-04:00,Static Analysis,76b6d72d4e95684a090839ef7f980773efcf0ca60f109fccf30824c47477863c,197883,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,This disposable local is not guaranteed to be disposed of before the method returns. Use a 'using' statement or surround the local's usage with a try/finally block. Local of type 'Task' is not disposed of (at least not locally).,plain-text,Atlassian/Bitbucket/Authentication/Gui/ShowViewModel,Atlassian/Bitbucket/Authentication/Gui/ShowViewModel,logical,,,,,,EnsureLocalDisposalRule,Gendarme,GEND-EnsureLocalDisposalRule,Ensure Local Disposal ,"This rule checks that disposable locals are always disposed of before
the method returns. Use a 'using' statement (or a try/finally block) to
guarantee local disposal even in the event an unhandled exception
occurs.

**Bad** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    DecodeHeader (stream);
    if (!DecodedHeader.HasContent) {
        return;
    }
    DecodeContent (stream);
    stream.Dispose ();
}
```
**Good** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        DecodeHeader (stream);
        if (!DecodedHeader.HasContent) {
            return;
        }
        DecodeContent (stream);
    }
}
```
**Bad** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    Decode (stream);
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
    stream.Dispose ();
}
```
**Good** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        Decode (stream);
    }
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.98076445,1
130,Static Analysis,2020-05-18T14:51:00-04:00,69579,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Archives/SevenZip/SevenZipArchive/LoadVolumes,logical,,,2020-05-18T14:51:56-04:00,Static Analysis,b285acf27cf1c7a37ede309b3e7cd937734eaa5565911b86692b79f9caa11ef8,200181,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,This disposable local is not guaranteed to be disposed of before the method returns. Use a 'using' statement or surround the local's usage with a try/finally block. Local of type 'SevenZipVolume' is not disposed of (at least not locally).,plain-text,SharpCompress/Archives/SevenZip/SevenZipArchive/LoadVolumes,SharpCompress/Archives/SevenZip/SevenZipArchive/LoadVolumes,logical,,,,,,EnsureLocalDisposalRule,Gendarme,GEND-EnsureLocalDisposalRule,Ensure Local Disposal ,"This rule checks that disposable locals are always disposed of before
the method returns. Use a 'using' statement (or a try/finally block) to
guarantee local disposal even in the event an unhandled exception
occurs.

**Bad** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    DecodeHeader (stream);
    if (!DecodedHeader.HasContent) {
        return;
    }
    DecodeContent (stream);
    stream.Dispose ();
}
```
**Good** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        DecodeHeader (stream);
        if (!DecodedHeader.HasContent) {
            return;
        }
        DecodeContent (stream);
    }
}
```
**Bad** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    Decode (stream);
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
    stream.Dispose ();
}
```
**Good** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        Decode (stream);
    }
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.9817527,1
131,Static Analysis,2020-05-18T14:51:00-04:00,69580,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-388: 7PK - Errors,http://cwevis.org/browse/388,388,SharpCompress/Archives/AbstractArchive/SharpCompress/Common/IExtractionListener/FireCompressedBytesRead,logical,,,2020-05-18T14:51:56-04:00,Static Analysis,f73cef352a0b2bf1d0cc5310f027978a051db5e56968ba97879cbcb8e22239bf,199974,medium,,,CWE-754: Improper Check for Unusual or Exceptional Conditions,http://cwevis.org/browse/754,754,"Every delegate passed to native code must include an exception block which spans the entire method and has a catch all block. Surround the entire method body with a try/catch block. An exception occurred while verifying this method. This failure can probably be ignored, it's most likely due to an uncommon code sequence in the method the rule didn't understand. Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index",plain-text,SharpCompress/Archives/AbstractArchive/SharpCompress/Common/IExtractionListener/FireCompressedBytesRead,SharpCompress/Archives/AbstractArchive/SharpCompress/Common/IExtractionListener/FireCompressedBytesRead,logical,,,,,,DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRule,Gendarme,GEND-DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRule,Delegates Passed To Native Code Must Include Exception Handling ,"Every delegate which is passed to native code must include an exception
block which spans the entire method and has a catch all handler.

**Bad** example:


```csharp
public void NativeCallback ()
{
    Console.WriteLine (""{0}"", 1);
}
```
**Good** example:


```csharp
public void NativeCallback ()
{
    try {
        Console.WriteLine (""{0}"", 1);
    }
    catch {
    }
}
```",markdown,rule-e3f0972459f483bc18a68eed953b03a6c7e7fb7e495bc2047dd97eaba40f966b,Error Handling,,,,,escalated,0.88051474,1
132,Static Analysis,2020-05-18T14:51:00-04:00,69585,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Squirrel/Shell/ShellLink/set_IconIndex,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201262,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Squirrel/Shell/ShellLink/set_IconIndex,Squirrel/Shell/ShellLink/set_IconIndex,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
133,Static Analysis,2020-05-18T14:51:00-04:00,69622,2020-05-18T14:54:28-04:00,high,escalated,,,,,,CWE-695: Use of Low-Level Functionality,http://cwevis.org/browse/695,695,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/WindowsFormsWebAuthenticationDialogBase/WindowsFormsWin32Window/(self),logical,,,2020-05-18T14:51:59-04:00,Static Analysis,3ac9036736202c636e5a647bb8073bf5337a353e654d9216f8af1cf9293e2f3b,202160,high,,,CWE-695: Use of Low-Level Functionality,http://cwevis.org/browse/695,695,The type uses System.IntPtr or System.UIntPtr instead of System.Runtime.InteropServices.SafeHandle. Consider changing the code to use SafeHandle.,plain-text,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/WindowsFormsWebAuthenticationDialogBase/WindowsFormsWin32Window/(self),Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/WindowsFormsWebAuthenticationDialogBase/WindowsFormsWin32Window/(self),logical,,,,,,PreferSafeHandleRule,Gendarme,GEND-PreferSafeHandleRule,Prefer Safe Handle ,"In general it is best to interop with native code using
**System.Runtime.InteropServices.SafeHandle** instead of
**System.IntPtr** or **System.UIntPtr** because:

SafeHandles are type safe.
SafeHandles are guaranteed to be disposed of during exceptional
conditions like a thread aborting unexpectedly or a stack overflow.
SafeHandles are not vulnerable to reycle attacks.
You don't need to write a finalizer which can be tricky to do because
they execute within their own thread, may execute on partially
constructed objects, and normally tear down the application if you allow
an exception to escape from them.


 **Bad** example:


```csharp
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable.
public sealed class Database {
    ~Database ()
    {
        // This will execute even if the ctor throws so it is important to check
        // to see if the fields are initialized.
        if (m_database != IntPtr.Zero) {
            NativeMethods.sqlite3_close (m_database);
        }
    }

    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        int err = NativeMethods.sqlite3_open_v2 (path, out m_database, flags, IntPtr.Zero);
        // handle errors
    }

    // exec and query methods would go here

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (IntPtr db);

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private IntPtr m_database;
}
```
**Good** example:


```csharp
using System.Runtime.ConstrainedExecution;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable, but you do not need to implement a finalizer because
// SafeHandle will take care of the cleanup.
internal sealed class Database {
    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        m_database = new SqlitePtr (path, flags);
    }

    // exec and query methods would go here

    // This corresponds to a native sqlite3*.
    [SecurityPermission (SecurityAction.InheritanceDemand, UnmanagedCode = true)]
    [SecurityPermission (SecurityAction.Demand, UnmanagedCode = true)]
    private sealed class SqlitePtr : SafeHandle {
        public SqlitePtr (string path, NativeMethods.OpenFlags flags) : base (IntPtr.Zero, true)
        {
            int err = NativeMethods.sqlite3_open_v2 (path, out handle, flags, IntPtr.Zero);
            // handle errors
        }

        public override bool IsInvalid {
            get {
                return (handle == IntPtr.Zero);
            }
        }

        // This will not be called if the handle is invalid. Note that this method should not throw.
        [ReliabilityContract (Consistency.WillNotCorruptState, Cer.MayFail)]
        protected override bool ReleaseHandle ()
        {
            NativeMethods.sqlite3_close (this);
            return true;
        }
    }

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (SqlitePtr db);

        // Open must take an IntPtr but all other methods take a type safe SqlitePtr.
        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private SqlitePtr m_database;
}
```",markdown,GEND-PreferSafeHandleRule,Prefer Safe Handle ,"In general it is best to interop with native code using
**System.Runtime.InteropServices.SafeHandle** instead of
**System.IntPtr** or **System.UIntPtr** because:

SafeHandles are type safe.
SafeHandles are guaranteed to be disposed of during exceptional
conditions like a thread aborting unexpectedly or a stack overflow.
SafeHandles are not vulnerable to reycle attacks.
You don't need to write a finalizer which can be tricky to do because
they execute within their own thread, may execute on partially
constructed objects, and normally tear down the application if you allow
an exception to escape from them.


 **Bad** example:


```csharp
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable.
public sealed class Database {
    ~Database ()
    {
        // This will execute even if the ctor throws so it is important to check
        // to see if the fields are initialized.
        if (m_database != IntPtr.Zero) {
            NativeMethods.sqlite3_close (m_database);
        }
    }

    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        int err = NativeMethods.sqlite3_open_v2 (path, out m_database, flags, IntPtr.Zero);
        // handle errors
    }

    // exec and query methods would go here

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (IntPtr db);

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private IntPtr m_database;
}
```
**Good** example:


```csharp
using System.Runtime.ConstrainedExecution;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable, but you do not need to implement a finalizer because
// SafeHandle will take care of the cleanup.
internal sealed class Database {
    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        m_database = new SqlitePtr (path, flags);
    }

    // exec and query methods would go here

    // This corresponds to a native sqlite3*.
    [SecurityPermission (SecurityAction.InheritanceDemand, UnmanagedCode = true)]
    [SecurityPermission (SecurityAction.Demand, UnmanagedCode = true)]
    private sealed class SqlitePtr : SafeHandle {
        public SqlitePtr (string path, NativeMethods.OpenFlags flags) : base (IntPtr.Zero, true)
        {
            int err = NativeMethods.sqlite3_open_v2 (path, out handle, flags, IntPtr.Zero);
            // handle errors
        }

        public override bool IsInvalid {
            get {
                return (handle == IntPtr.Zero);
            }
        }

        // This will not be called if the handle is invalid. Note that this method should not throw.
        [ReliabilityContract (Consistency.WillNotCorruptState, Cer.MayFail)]
        protected override bool ReleaseHandle ()
        {
            NativeMethods.sqlite3_close (this);
            return true;
        }
    }

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (SqlitePtr db);

        // Open must take an IntPtr but all other methods take a type safe SqlitePtr.
        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private SqlitePtr m_database;
}
```",markdown,,,escalated,0.8318374,1
134,Static Analysis,2020-05-18T14:51:00-04:00,69752,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Readers/ReaderFactory/Open,logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.98149246,1
135,Static Analysis,2020-05-18T14:51:00-04:00,69764,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/IO/BufferedSubStream/Read,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201122,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/IO/BufferedSubStream/Read,SharpCompress/IO/BufferedSubStream/Read,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
136,Static Analysis,2020-05-18T14:51:00-04:00,69818,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/Web/XmlTransform/XmlTransformation/AddTransformationService,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201240,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Microsoft/Web/XmlTransform/XmlTransformation/AddTransformationService,Microsoft/Web/XmlTransform/XmlTransformation/AddTransformationService,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
137,Static Analysis,2020-05-18T14:51:00-04:00,69951,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-227: 7PK - API Abuse,http://cwevis.org/browse/227,227,Microsoft/IdentityModel/Clients/ActiveDirectory/AdalClaimChallengeException/(self),logical,,,2020-05-18T14:51:59-04:00,Static Analysis,47a6df44d16eb182f816f23918542a817d2995bc2ddf0168976c20b9c8c63cb2,202083,medium,,,CWE-573: Improper Following of Specification by Caller,http://cwevis.org/browse/573,573,"The required constructor for ISerializable is not present in this type. Add a (private for sealed, protected otherwise) serialization constructor for this type. The required constructor for ISerializable is not present in this type.",plain-text,Microsoft/IdentityModel/Clients/ActiveDirectory/AdalClaimChallengeException/(self),Microsoft/IdentityModel/Clients/ActiveDirectory/AdalClaimChallengeException/(self),logical,,,,,,MissingSerializationConstructorRule,Gendarme,GEND-MissingSerializationConstructorRule,Missing Serialization Constructor ,"This rule checks for types that implement **System.ISerializable** but
don't provide a serialization constructor. The constructor is required
in order to make the type serializeable but cannot be enforced by the
interface. The serialization constructor should be **private** for
**sealed** types and **protected** for unsealed types.

**Bad** example:


```csharp
[Serializable]
public class Bad : ISerializable {
    public void GetObjectData (SerializationInfo info, StreamingContext context)
    {
    }
}
```
**Good** example (sealed):


```csharp
[Serializable]
public sealed class Good : ISerializable {
    private ClassWithConstructor (SerializationInfo info, StreamingContext context)
    {
    }

    public void GetObjectData (SerializationInfo info, StreamingContext context)
    {
    }
}
```
**Good** example:


```csharp
[Serializable]
public class Good : ISerializable {
    protected ClassWithConstructor (SerializationInfo info, StreamingContext context)
    {
    }

    public void GetObjectData (SerializationInfo info, StreamingContext context)
    {
    }
}
```",markdown,rule-dc56fd6c6aaaf7aef3e91a691e1f8bd8f7311763a2d3286fce16c6c5cf52b5e2,API Abuse,"The software uses an API in a manner contrary to its intended use.

An API is a contract between a caller and a callee. The most common forms of API misuse occurs when the caller does not honor its end of this contract. For example, if a program does not call chdir() after calling chroot(), it violates the contract that specifies how to change the active root directory in a secure fashion. Another good example of library abuse is expecting the callee to return trustworthy DNS information to the caller. In this case, the caller misuses the callee API by making certain assumptions about its behavior (that the return value can be used for authentication purposes). One can also violate the caller-callee contract from the other side. For example, if a coder subclasses SecureRandom and returns a non-random value, the contract is violated.",markdown,,,escalated,0.94911677,1
138,Static Analysis,2020-05-18T14:51:00-04:00,70094,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-557: Concurrency Issues,http://cwevis.org/browse/557,557,GitHub/Shared/Converters/ValueConverterMarkupExtension/ProvideValue,logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-d1b92de2d2079261b3abb4d275473f8ffefb9c723f42c8c56f72d385fb3abc7c,Concurrency,,,,,escalated,0.7422158,1
139,Static Analysis,2020-05-18T14:51:00-04:00,70098,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-189: Numeric Errors,http://cwevis.org/browse/189,189,NuGet/VersionUtility/GetCompatibilityBetweenPortableLibraryAndNonPortableLibrary,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,03ba04f65bdee74e716d09d64feb1f004a116c5543f675d9955d1297acbf5baf,201073,medium,,,CWE-190: Integer Overflow or Wraparound,http://cwevis.org/browse/190,190,This method casts the result of an integer multiplication into a larger integer. This may result in an overflow before the cast can be done. Cast the operands instead of the result.,plain-text,NuGet/VersionUtility/GetCompatibilityBetweenPortableLibraryAndNonPortableLibrary,NuGet/VersionUtility/GetCompatibilityBetweenPortableLibraryAndNonPortableLibrary,logical,,,,,,ReviewCastOnIntegerMultiplicationRule,Gendarme,GEND-ReviewCastOnIntegerMultiplicationRule,Review Cast On Integer Multiplication ,"This rule checks for integral multiply operations where the result is
cast to a larger integral type. It's safer instead to cast an operand to
the larger type to minimize the chance of overflow.

**Bad** example:


```csharp
public long Bad (int a, int b)
{
    // e.g. Bad (Int32.MaxInt, Int32.MaxInt) == 1
    return a * b;
}
```
**Good** example:


```csharp
public long Good (int a, int b)
{
    // e.g. Good (Int32.MaxInt, Int32.MaxInt) == 4611686014132420609
    return (long) a * b;
}
```",markdown,rule-87c4a91bc4c9e20c70f0637bd67a4d03975f25b3ec675b9cc13d0f04540c76a6,Numeric Error,,,,,escalated,0.9599974,1
140,Static Analysis,2020-05-18T14:51:00-04:00,70165,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/Web/XmlTransform/XmlFileInfoDocument/Save,logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.98149246,1
141,Static Analysis,2020-05-18T14:51:00-04:00,70168,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Compressors/LZMA/Utilites/ReadingCrcBuilderStream/Finish,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201158,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Compressors/LZMA/Utilites/ReadingCrcBuilderStream/Finish,SharpCompress/Compressors/LZMA/Utilites/ReadingCrcBuilderStream/Finish,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
142,Static Analysis,2020-05-18T14:51:00-04:00,70190,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Common/Rar/RarCrcBinaryReader/ResetCrc,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201189,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Common/Rar/RarCrcBinaryReader/ResetCrc,SharpCompress/Common/Rar/RarCrcBinaryReader/ResetCrc,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
143,Static Analysis,2020-05-18T14:51:00-04:00,70318,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/Web/XmlTransform/XmlAttributePreservingWriter/WriteEntityRef,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201222,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Microsoft/Web/XmlTransform/XmlAttributePreservingWriter/WriteEntityRef,Microsoft/Web/XmlTransform/XmlAttributePreservingWriter/WriteEntityRef,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
144,Static Analysis,2020-05-18T14:51:00-04:00,70344,2020-05-18T14:54:28-04:00,medium,false-positive,"var apmVersion, nodeVersion, npmVersion, ref2, ref3, ref4;
    apmVersion = (ref2 = require('../package.json').version) != null ? ref2 : '';
    npmVersion = (ref3 = require('npm/package.json').version) != null ? ref3 : '';
    nodeVersion = (ref4 = process.versions.node) != null ? ref4 : '';
    return getPythonVersion(function(pythonVersion) {
      return git.getGitVersion(function(gitVersion) {
        return getAtomVersion(function(atomVersion) {",88,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/apm-cli.js,file,91,91,2020-05-18T14:51:32-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,191466,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/apm-cli.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\apm-cli.js,file,34,27,91,91,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
145,Static Analysis,2020-05-18T14:51:00-04:00,70346,2020-05-18T14:54:28-04:00,medium,false-positive,"setupTempDirectory();

  commandClasses = [require('./ci'), require('./clean'), require('./config'), require('./dedupe'), require('./develop'), require('./disable'), require('./docs'), require('./enable'), require('./featured'), require('./init'), require('./install'), require('./links'), require('./link'), require('./list'), require('./login'), require('./publish'), require('./rebuild'), require('./rebuild-module-cache'), require('./search'), require('./star'), require('./stars'), require('./test'), require('./uninstall'), require('./unlink'), require('./unpublish'), require('./unstar'), require('./upgrade'), require('./view')];

  commands = {};",39,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/apm-cli.js,file,42,42,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.17391245,0
146,Static Analysis,2020-05-18T14:51:00-04:00,70347,2020-05-18T14:54:28-04:00,high,escalated,"showHelp(options);
          }
          return options.callback();
        } else if (Command = commands[command]) {
          return new Command().run(options);
        } else {
          return options.callback(`Unrecognized command: ${command}`);",243,,,,CWE-697: Incorrect Comparison,http://cwevis.org/browse/697,697,Atom x64/resources/app/apm/lib/apm-cli.js,file,246,246,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-c271f2bb931810eef633f7c736d1dd934fbd6ed5f62ac8d8ea39ade811190622,Comparison,,,,,escalated,0.9110538,1
147,Static Analysis,2020-05-18T14:51:00-04:00,70349,2020-05-18T14:54:28-04:00,medium,false-positive,"setupTempDirectory = function() {
    var temp, tempDirectory;
    temp = require('temp');
    tempDirectory = require('os').tmpdir();
    // Resolve ~ in tmp dir atom/atom#2271
    tempDirectory = path.resolve(fs.absolute(tempDirectory));
    temp.dir = tempDirectory;",27,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/apm-cli.js,file,30,30,2020-05-18T14:51:32-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,191429,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/apm-cli.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\apm-cli.js,file,28,21,30,30,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
148,Static Analysis,2020-05-18T14:51:00-04:00,70350,2020-05-18T14:54:28-04:00,medium,false-positive,"if (atomVersion == null) {
              atomVersion = '';
            }
            versions = `${'apm'.red}  ${apmVersion.red}\n${'npm'.green}  ${npmVersion.green}\n${'node'.blue} ${nodeVersion.blue} ${process.arch.blue}\n${'atom'.cyan} ${atomVersion.cyan}\n${'python'.yellow} ${pythonVersion.yellow}\n${'git'.magenta} ${gitVersion.magenta}`;
            if (config.isWin32()) {
              visualStudioVersion = (ref5 = config.getInstalledVisualStudioFlag()) != null ? ref5 : '';
              versions += `\n${'visual studio'.cyan} ${visualStudioVersion.cyan}`;",117,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/apm-cli.js,file,120,120,2020-05-18T14:51:32-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,191469,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/apm-cli.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\apm-cli.js,file,139,132,120,120,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
149,Static Analysis,2020-05-18T14:51:00-04:00,70351,2020-05-18T14:54:28-04:00,medium,false-positive,"var error, ref2, unknownVersion, version;
      unknownVersion = 'unknown';
      try {
        ({version} = (ref2 = require(path.join(resourcePath, 'package.json'))) != null ? ref2 : unknownVersion);
        return callback(version);
      } catch (error1) {
        error = error1;",135,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/apm-cli.js,file,138,138,2020-05-18T14:51:32-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,191484,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/apm-cli.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\apm-cli.js,file,37,30,138,138,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
150,Static Analysis,2020-05-18T14:51:00-04:00,70353,2020-05-18T14:54:28-04:00,medium,false-positive,"};
    return npm.load(npmOptions, function() {
      var outputChunks, python, pythonExe, ref2, ref3, rootDir, spawned;
      python = (ref2 = npm.config.get('python')) != null ? ref2 : process.env.PYTHON;
      if (config.isWin32() && !python) {
        rootDir = (ref3 = process.env.SystemDrive) != null ? ref3 : 'C:\\';
        if (rootDir[rootDir.length - 1] !== '\\') {",152,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/apm-cli.js,file,155,155,2020-05-18T14:51:32-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,191520,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/apm-cli.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\apm-cli.js,file,74,67,155,155,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
151,Static Analysis,2020-05-18T14:51:00-04:00,70354,2020-05-18T14:54:28-04:00,medium,false-positive,"yargs = require('yargs');

  wordwrap = require('wordwrap');

  // Enable ""require"" scripts in asar archives
  require('asar-require');",13,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/apm-cli.js,file,16,16,2020-05-18T14:51:32-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,191423,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/apm-cli.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\apm-cli.js,file,21,14,16,16,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
152,Static Analysis,2020-05-18T14:51:00-04:00,70357,2020-05-18T14:54:28-04:00,medium,false-positive,"fs = require('./fs');

  git = require('./git');

  setupTempDirectory = function() {
    var temp, tempDirectory;",22,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/apm-cli.js,file,25,25,2020-05-18T14:51:32-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,191427,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/apm-cli.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\apm-cli.js,file,16,9,25,25,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
153,Static Analysis,2020-05-18T14:51:00-04:00,70358,2020-05-18T14:54:28-04:00,medium,false-positive,"npm = require('npm');

  yargs = require('yargs');

  wordwrap = require('wordwrap');",11,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/apm-cli.js,file,14,14,2020-05-18T14:51:32-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,191422,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/apm-cli.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\apm-cli.js,file,18,11,14,14,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
154,Static Analysis,2020-05-18T14:51:00-04:00,70359,2020-05-18T14:54:28-04:00,high,escalated,"ref1 = (ref = commandClass.commandNames) != null ? ref : [];
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      name = ref1[j];
      commands[name] = commandClass;
    }
  }",48,,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/lib/apm-cli.js,file,51,51,2020-05-18T14:51:32-04:00,Static Analysis,6569b353992e88510a975ec3412e07f9c2539e0cf8eb813d02c1c97e2a312d82,191461,high,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Generic Object Injection Sink,plain-text,Atom x64/resources/app/apm/lib/apm-cli.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\apm-cli.js,file,21,7,51,51,security,detect-object-injection,ESLint,ESLINT-SECURITY-detect-object-injection,Detect object injection,"Detects `variable[key]` as a left- or right-hand assignment operand.

More information: [The Dangers of Square Bracket Notation](https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/the-dangers-of-square-bracket-notation.md)",markdown,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.9251437,1
155,Static Analysis,2020-05-18T14:51:00-04:00,70360,2020-05-18T14:54:28-04:00,medium,false-positive,"_ = require('underscore-plus');

  colors = require('colors');

  npm = require('npm');",7,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/apm-cli.js,file,10,10,2020-05-18T14:51:32-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,191420,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/apm-cli.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\apm-cli.js,file,19,12,10,10,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
156,Static Analysis,2020-05-18T14:51:00-04:00,70361,2020-05-18T14:54:28-04:00,medium,false-positive,"(function() {
  var _, colors, commandClass, commandClasses, commands, config, fs, getAtomVersion, getPythonVersion, git, i, j, len, len1, name, npm, parseOptions, path, printVersions, ref, ref1, setupTempDirectory, showHelp, spawn, wordwrap, yargs;

  ({spawn} = require('child_process'));

  path = require('path');",1,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/apm-cli.js,file,4,4,2020-05-18T14:51:32-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,191417,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/apm-cli.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\apm-cli.js,file,21,14,4,4,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
157,Static Analysis,2020-05-18T14:51:00-04:00,70362,2020-05-18T14:54:28-04:00,medium,false-positive,"printVersions = function(args, callback) {
    var apmVersion, nodeVersion, npmVersion, ref2, ref3, ref4;
    apmVersion = (ref2 = require('../package.json').version) != null ? ref2 : '';
    npmVersion = (ref3 = require('npm/package.json').version) != null ? ref3 : '';
    nodeVersion = (ref4 = process.versions.node) != null ? ref4 : '';
    return getPythonVersion(function(pythonVersion) {",86,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/apm-cli.js,file,89,89,2020-05-18T14:51:32-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,191464,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/apm-cli.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\apm-cli.js,file,33,26,89,89,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
158,Static Analysis,2020-05-18T14:51:00-04:00,70364,2020-05-18T14:54:28-04:00,medium,false-positive,"({spawn} = require('child_process'));

  path = require('path');

  _ = require('underscore-plus');",3,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/apm-cli.js,file,6,6,2020-05-18T14:51:32-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,191418,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/apm-cli.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\apm-cli.js,file,17,10,6,6,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270798,0
159,Static Analysis,2020-05-18T14:51:00-04:00,70366,2020-05-18T14:54:28-04:00,high,escalated,"(function() {
  var _, colors, commandClass, commandClasses, commands, config, fs, getAtomVersion, getPythonVersion, git, i, j, len, len1, name, npm, parseOptions, path, printVersions, ref, ref1, setupTempDirectory, showHelp, spawn, wordwrap, yargs;

  ({spawn} = require('child_process'));

  path = require('path');",1,,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/lib/apm-cli.js,file,4,4,2020-05-18T14:51:32-04:00,Static Analysis,63cfeff1e19efa6702923410272f5381339ce1d5ae0e4401b9a7b3accccb14ee,191416,high,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,"Found require(""child_process"")",plain-text,Atom x64/resources/app/apm/lib/apm-cli.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\apm-cli.js,file,38,14,4,4,security,detect-child-process,ESLint,ESLINT-SECURITY-detect-child-process,Detect child process,"Detects instances of [`child_process`](https://nodejs.org/api/child_process.html) & non-literal [`exec()`](https://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback)

More information: [Avoiding Command Injection in Node.js](https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/avoid-command-injection-node.md)",markdown,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.93688923,1
160,Static Analysis,2020-05-18T14:51:00-04:00,70368,2020-05-18T14:54:28-04:00,medium,false-positive,"// Enable ""require"" scripts in asar archives
  require('asar-require');

  config = require('./apm');

  fs = require('./fs');",18,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/apm-cli.js,file,21,21,2020-05-18T14:51:32-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,191425,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/apm-cli.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\apm-cli.js,file,19,12,21,21,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
161,Static Analysis,2020-05-18T14:51:00-04:00,70369,2020-05-18T14:54:28-04:00,medium,false-positive,"return spawned.on('close', function(code) {
        var version;
        if (code === 0) {
          [name, version] = Buffer.concat(outputChunks).toString().split(' ');
          version = version != null ? version.trim() : void 0;
        }
        return callback(version);",178,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/apm-cli.js,file,181,181,2020-05-18T14:51:32-04:00,Static Analysis,1331ace3749ef21bd1b9d70965c34dc150b17e09dbbd23a4ee27f4a9df5c4ff4,191582,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'Buffer' is not defined.,plain-text,Atom x64/resources/app/apm/lib/apm-cli.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\apm-cli.js,file,35,29,181,181,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.10479733,0
162,Static Analysis,2020-05-18T14:51:00-04:00,70370,2020-05-18T14:54:28-04:00,high,escalated,"var error, ref2, unknownVersion, version;
      unknownVersion = 'unknown';
      try {
        ({version} = (ref2 = require(path.join(resourcePath, 'package.json'))) != null ? ref2 : unknownVersion);
        return callback(version);
      } catch (error1) {
        error = error1;",135,,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/lib/apm-cli.js,file,138,138,2020-05-18T14:51:32-04:00,Static Analysis,fd4ac87b1b2792fefa27e1f6acf43697d4e345cb11d008b0fe44dc1c9b95d9c2,191482,high,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Found non-literal argument in require,plain-text,Atom x64/resources/app/apm/lib/apm-cli.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\apm-cli.js,file,78,30,138,138,security,detect-non-literal-require,ESLint,ESLINT-SECURITY-detect-non-literal-require,Detect non literal require,"Detects `require(variable)`, which might allow an attacker to load and run arbitrary code, or access arbitrary files on disk.

More information: http://www.bennadel.com/blog/2169-where-does-node-js-and-require-look-for-modules.htm",markdown,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.94545025,1
163,Static Analysis,2020-05-18T14:51:00-04:00,70371,2020-05-18T14:54:28-04:00,high,escalated,"if (args.version) {
        return printVersions(args, options.callback);
      } else if (args.help) {
        if (Command = commands[options.command]) {
          showHelp(typeof (base = new Command()).parseOptions === ""function"" ? base.parseOptions(options.command) : void 0);
        } else {
          showHelp(options);",229,,,,CWE-697: Incorrect Comparison,http://cwevis.org/browse/697,697,Atom x64/resources/app/apm/lib/apm-cli.js,file,232,232,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-c271f2bb931810eef633f7c736d1dd934fbd6ed5f62ac8d8ea39ade811190622,Comparison,,,,,escalated,0.9110538,1
164,Static Analysis,2020-05-18T14:51:00-04:00,70372,2020-05-18T14:54:28-04:00,high,false-positive,"commandClass = commandClasses[i];
    ref1 = (ref = commandClass.commandNames) != null ? ref : [];
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      name = ref1[j];
      commands[name] = commandClass;
    }
  }",47,,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/lib/apm-cli.js,file,50,50,2020-05-18T14:51:32-04:00,Static Analysis,6569b353992e88510a975ec3412e07f9c2539e0cf8eb813d02c1c97e2a312d82,191460,high,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Generic Object Injection Sink,plain-text,Atom x64/resources/app/apm/lib/apm-cli.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\apm-cli.js,file,21,14,50,50,security,detect-object-injection,ESLint,ESLINT-SECURITY-detect-object-injection,Detect object injection,"Detects `variable[key]` as a left- or right-hand assignment operand.

More information: [The Dangers of Square Bracket Notation](https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/the-dangers-of-square-bracket-notation.md)",markdown,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.9251437,1
165,Static Analysis,2020-05-18T14:51:00-04:00,70375,2020-05-18T14:54:28-04:00,medium,false-positive,"colors = require('colors');

  npm = require('npm');

  yargs = require('yargs');",9,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/apm-cli.js,file,12,12,2020-05-18T14:51:32-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,191421,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/apm-cli.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\apm-cli.js,file,16,9,12,12,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
166,Static Analysis,2020-05-18T14:51:00-04:00,70376,2020-05-18T14:54:28-04:00,medium,false-positive,"setupTempDirectory = function() {
    var temp, tempDirectory;
    temp = require('temp');
    tempDirectory = require('os').tmpdir();
    // Resolve ~ in tmp dir atom/atom#2271
    tempDirectory = path.resolve(fs.absolute(tempDirectory));",26,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/apm-cli.js,file,29,29,2020-05-18T14:51:32-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,191428,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/apm-cli.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\apm-cli.js,file,19,12,29,29,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
167,Static Analysis,2020-05-18T14:51:00-04:00,70377,2020-05-18T14:54:28-04:00,medium,false-positive,"printVersions = function(args, callback) {
    var apmVersion, nodeVersion, npmVersion, ref2, ref3, ref4;
    apmVersion = (ref2 = require('../package.json').version) != null ? ref2 : '';
    npmVersion = (ref3 = require('npm/package.json').version) != null ? ref3 : '';
    nodeVersion = (ref4 = process.versions.node) != null ? ref4 : '';
    return getPythonVersion(function(pythonVersion) {
      return git.getGitVersion(function(gitVersion) {",87,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/apm-cli.js,file,90,90,2020-05-18T14:51:32-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,191465,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/apm-cli.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\apm-cli.js,file,33,26,90,90,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
168,Static Analysis,2020-05-18T14:51:00-04:00,70378,2020-05-18T14:54:28-04:00,medium,false-positive,"path = require('path');

  _ = require('underscore-plus');

  colors = require('colors');",5,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/apm-cli.js,file,8,8,2020-05-18T14:51:32-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,191419,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/apm-cli.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\apm-cli.js,file,14,7,8,8,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
169,Static Analysis,2020-05-18T14:51:00-04:00,70379,2020-05-18T14:54:28-04:00,high,escalated,"return options.callback();
      } else if (command) {
        if (command === 'help') {
          if (Command = commands[options.commandArgs]) {
            showHelp(typeof (base1 = new Command()).parseOptions === ""function"" ? base1.parseOptions(options.commandArgs) : void 0);
          } else {
            showHelp(options);",237,,,,CWE-697: Incorrect Comparison,http://cwevis.org/browse/697,697,Atom x64/resources/app/apm/lib/apm-cli.js,file,240,240,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-c271f2bb931810eef633f7c736d1dd934fbd6ed5f62ac8d8ea39ade811190622,Comparison,,,,,escalated,0.9110538,1
170,Static Analysis,2020-05-18T14:51:00-04:00,70381,2020-05-18T14:54:28-04:00,medium,false-positive,"atom: atomVersion,
              python: pythonVersion,
              git: gitVersion,
              nodeArch: process.arch
            };
            if (config.isWin32()) {
              versions.visualStudio = config.getInstalledVisualStudioFlag();",101,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/apm-cli.js,file,104,104,2020-05-18T14:51:32-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,191467,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/apm-cli.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\apm-cli.js,file,32,25,104,104,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
171,Static Analysis,2020-05-18T14:51:00-04:00,70383,2020-05-18T14:54:28-04:00,high,false-positive,"commands = {};

  for (i = 0, len = commandClasses.length; i < len; i++) {
    commandClass = commandClasses[i];
    ref1 = (ref = commandClass.commandNames) != null ? ref : [];
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      name = ref1[j];",44,,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/lib/apm-cli.js,file,47,47,2020-05-18T14:51:32-04:00,Static Analysis,6569b353992e88510a975ec3412e07f9c2539e0cf8eb813d02c1c97e2a312d82,191459,high,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Generic Object Injection Sink,plain-text,Atom x64/resources/app/apm/lib/apm-cli.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\apm-cli.js,file,37,20,47,47,security,detect-object-injection,ESLint,ESLINT-SECURITY-detect-object-injection,Detect object injection,"Detects `variable[key]` as a left- or right-hand assignment operand.

More information: [The Dangers of Square Bracket Notation](https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/the-dangers-of-square-bracket-notation.md)",markdown,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.9251437,1
172,Static Analysis,2020-05-18T14:51:00-04:00,70384,2020-05-18T14:54:28-04:00,high,false-positive,"options.boolean('color').default('color', true).describe('color', 'Enable colored output');
    options.command = options.argv._[0];
    for (index = k = 0, len2 = args.length; k < len2; index = ++k) {
      arg = args[index];
      if (!(arg === options.command)) {
        continue;
      }",61,,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/lib/apm-cli.js,file,64,64,2020-05-18T14:51:32-04:00,Static Analysis,6569b353992e88510a975ec3412e07f9c2539e0cf8eb813d02c1c97e2a312d82,191462,high,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Generic Object Injection Sink,plain-text,Atom x64/resources/app/apm/lib/apm-cli.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\apm-cli.js,file,24,13,64,64,security,detect-object-injection,ESLint,ESLINT-SECURITY-detect-object-injection,Detect object injection,"Detects `variable[key]` as a left- or right-hand assignment operand.

More information: [The Dangers of Square Bracket Notation](https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/the-dangers-of-square-bracket-notation.md)",markdown,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.9251437,1
173,Static Analysis,2020-05-18T14:51:00-04:00,70386,2020-05-18T14:54:28-04:00,medium,false-positive,"var outputChunks, python, pythonExe, ref2, ref3, rootDir, spawned;
      python = (ref2 = npm.config.get('python')) != null ? ref2 : process.env.PYTHON;
      if (config.isWin32() && !python) {
        rootDir = (ref3 = process.env.SystemDrive) != null ? ref3 : 'C:\\';
        if (rootDir[rootDir.length - 1] !== '\\') {
          rootDir += '\\';
        }",154,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/apm-cli.js,file,157,157,2020-05-18T14:51:32-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,191527,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/apm-cli.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\apm-cli.js,file,34,27,157,157,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
174,Static Analysis,2020-05-18T14:51:00-04:00,70387,2020-05-18T14:54:28-04:00,medium,false-positive,"config = require('./apm');

  fs = require('./fs');

  git = require('./git');",20,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/apm-cli.js,file,23,23,2020-05-18T14:51:32-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,191426,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/apm-cli.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\apm-cli.js,file,15,8,23,23,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
175,Static Analysis,2020-05-18T14:51:00-04:00,70389,2020-05-18T14:54:28-04:00,medium,false-positive,"wordwrap = require('wordwrap');

  // Enable ""require"" scripts in asar archives
  require('asar-require');

  config = require('./apm');",16,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/apm-cli.js,file,19,19,2020-05-18T14:51:32-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,191424,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/apm-cli.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\apm-cli.js,file,10,3,19,19,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
176,Static Analysis,2020-05-18T14:51:00-04:00,70392,2020-05-18T14:54:28-04:00,medium,false-positive,"});
  };

  module.exports = {
    run: function(args, callback) {
      var Command, base, base1, callbackCalled, command, options;
      config.setupApmRcFile();",186,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/apm-cli.js,file,189,189,2020-05-18T14:51:32-04:00,Static Analysis,62173c3357301b64bcb7cb49ad65b9eeb8aa24356212b93fe0fe0166d3218ce7,191592,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'module' is not defined.,plain-text,Atom x64/resources/app/apm/lib/apm-cli.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\apm-cli.js,file,9,3,189,189,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.068299174,0
177,Static Analysis,2020-05-18T14:51:00-04:00,70393,2020-05-18T14:54:28-04:00,high,escalated,"showHelp(options);
          }
          return options.callback();
        } else if (Command = commands[command]) {
          return new Command().run(options);
        } else {
          return options.callback(`Unrecognized command: ${command}`);",243,,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/lib/apm-cli.js,file,246,246,2020-05-18T14:51:32-04:00,Static Analysis,6569b353992e88510a975ec3412e07f9c2539e0cf8eb813d02c1c97e2a312d82,191719,high,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Generic Object Injection Sink,plain-text,Atom x64/resources/app/apm/lib/apm-cli.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\apm-cli.js,file,47,30,246,246,security,detect-object-injection,ESLint,ESLINT-SECURITY-detect-object-injection,Detect object injection,"Detects `variable[key]` as a left- or right-hand assignment operand.

More information: [The Dangers of Square Bracket Notation](https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/the-dangers-of-square-bracket-notation.md)",markdown,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.9251437,1
178,Static Analysis,2020-05-18T14:51:00-04:00,70399,2020-05-18T14:54:28-04:00,high,escalated,"return callback(error);
        }
        fs.writeFileSync(path.join(this.destinationPath, 'styles', 'base.less'), theme.getStylesheet());
        fs.writeFileSync(path.join(this.destinationPath, 'styles', 'syntax-variables.less'), theme.getSyntaxVariables());
        return callback();
      });
    }",60,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/lib/theme-converter.js,file,63,63,2020-05-18T14:51:42-04:00,Static Analysis,ecd1b614179fad4c5807eb746c8d93996057dc747bbd482dce6aa7e91d17e648,195038,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Found fs.writeFileSync with non literal argument at index 0,plain-text,Atom x64/resources/app/apm/lib/theme-converter.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\theme-converter.js,file,25,9,63,63,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.9786352,1
179,Static Analysis,2020-05-18T14:51:00-04:00,70400,2020-05-18T14:54:28-04:00,medium,false-positive,"fs = require('./fs');

  request = require('./request');

  TextMateTheme = require('./text-mate-theme');",7,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/theme-converter.js,file,10,10,2020-05-18T14:51:42-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,195033,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/theme-converter.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\theme-converter.js,file,20,13,10,10,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
180,Static Analysis,2020-05-18T14:51:00-04:00,70402,2020-05-18T14:54:28-04:00,medium,false-positive,"TextMateTheme = require('./text-mate-theme');

  // Convert a TextMate theme to an Atom theme
  module.exports = ThemeConverter = class ThemeConverter {
    constructor(sourcePath1, destinationPath) {
      this.sourcePath = sourcePath1;
      this.destinationPath = path.resolve(destinationPath);",12,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/theme-converter.js,file,15,15,2020-05-18T14:51:42-04:00,Static Analysis,62173c3357301b64bcb7cb49ad65b9eeb8aa24356212b93fe0fe0166d3218ce7,195035,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'module' is not defined.,plain-text,Atom x64/resources/app/apm/lib/theme-converter.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\theme-converter.js,file,9,3,15,15,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.068299174,0
181,Static Analysis,2020-05-18T14:51:00-04:00,70403,2020-05-18T14:54:28-04:00,medium,false-positive,"request = require('./request');

  TextMateTheme = require('./text-mate-theme');

  // Convert a TextMate theme to an Atom theme
  module.exports = ThemeConverter = class ThemeConverter {",9,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/theme-converter.js,file,12,12,2020-05-18T14:51:42-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,195034,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/theme-converter.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\theme-converter.js,file,26,19,12,12,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
182,Static Analysis,2020-05-18T14:51:00-04:00,70404,2020-05-18T14:54:28-04:00,high,escalated,"error = error1;
          return callback(error);
        }
        fs.writeFileSync(path.join(this.destinationPath, 'styles', 'base.less'), theme.getStylesheet());
        fs.writeFileSync(path.join(this.destinationPath, 'styles', 'syntax-variables.less'), theme.getSyntaxVariables());
        return callback();
      });",59,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/lib/theme-converter.js,file,62,62,2020-05-18T14:51:42-04:00,Static Analysis,ecd1b614179fad4c5807eb746c8d93996057dc747bbd482dce6aa7e91d17e648,195037,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Found fs.writeFileSync with non literal argument at index 0,plain-text,Atom x64/resources/app/apm/lib/theme-converter.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\theme-converter.js,file,25,9,62,62,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.9786352,1
183,Static Analysis,2020-05-18T14:51:00-04:00,70405,2020-05-18T14:54:28-04:00,medium,false-positive,"url = require('url');

  fs = require('./fs');

  request = require('./request');",5,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/theme-converter.js,file,8,8,2020-05-18T14:51:42-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,195032,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/theme-converter.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\theme-converter.js,file,15,8,8,8,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
184,Static Analysis,2020-05-18T14:51:00-04:00,70408,2020-05-18T14:54:28-04:00,medium,false-positive,"(function() {
  var TextMateTheme, ThemeConverter, fs, path, request, url;

  path = require('path');

  url = require('url');",1,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/theme-converter.js,file,4,4,2020-05-18T14:51:42-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,195030,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/theme-converter.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\theme-converter.js,file,17,10,4,4,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
185,Static Analysis,2020-05-18T14:51:00-04:00,70411,2020-05-18T14:54:28-04:00,high,escalated,"} else {
        sourcePath = path.resolve(this.sourcePath);
        if (fs.isFileSync(sourcePath)) {
          return callback(null, fs.readFileSync(sourcePath, 'utf8'));
        } else {
          return callback(`TextMate theme file not found: ${sourcePath}`);
        }",40,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/lib/theme-converter.js,file,43,43,2020-05-18T14:51:42-04:00,Static Analysis,374ad040fff48d9edaa97052bf28a674b1f4e79af66a0448f1ab1699003790cd,195036,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Found fs.readFileSync with non literal argument at index 0,plain-text,Atom x64/resources/app/apm/lib/theme-converter.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\theme-converter.js,file,48,33,43,43,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.9758102,1
186,Static Analysis,2020-05-18T14:51:00-04:00,70412,2020-05-18T14:54:28-04:00,medium,false-positive,"path = require('path');

  url = require('url');

  fs = require('./fs');",3,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/theme-converter.js,file,6,6,2020-05-18T14:51:42-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,195031,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/theme-converter.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\theme-converter.js,file,16,9,6,6,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
187,Static Analysis,2020-05-18T14:51:00-04:00,70610,2020-05-18T14:54:28-04:00,medium,false-positive,"} else {
      console.error('Please use `./bin/node` to run node, and use `./bin/npm` to run npm scripts.')
    }
    process.exit(1)
  } else {
    process.exit(0)
  }",24,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/script/check-version.js,file,27,27,2020-05-18T14:51:45-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,196328,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/script/check-version.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\script\check-version.js,file,12,5,27,27,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
188,Static Analysis,2020-05-18T14:51:00-04:00,70611,2020-05-18T14:54:28-04:00,medium,false-positive,"#!/usr/bin/env node

var path = require('path');

var getBundledNodeVersion = require('./bundled-node-version')",1,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/script/check-version.js,file,3,3,2020-05-18T14:51:45-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,196302,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/script/check-version.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\script\check-version.js,file,19,12,3,3,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
189,Static Analysis,2020-05-18T14:51:00-04:00,70612,2020-05-18T14:54:28-04:00,medium,false-positive,"}
    process.exit(1)
  } else {
    process.exit(0)
  }
});",26,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/script/check-version.js,file,29,29,2020-05-18T14:51:45-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,196333,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/script/check-version.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\script\check-version.js,file,12,5,29,29,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
190,Static Analysis,2020-05-18T14:51:00-04:00,70613,2020-05-18T14:54:28-04:00,medium,false-positive,"var getBundledNodeVersion = require('./bundled-node-version')

var bundledNodePath = path.join(__dirname, '..', 'bin', 'node')
if (process.platform === 'win32') {
  bundledNodePath += '.exe'
}",5,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/script/check-version.js,file,8,8,2020-05-18T14:51:45-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,196308,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/script/check-version.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\script\check-version.js,file,12,5,8,8,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474263,0
191,Static Analysis,2020-05-18T14:51:00-04:00,70614,2020-05-18T14:54:28-04:00,medium,false-positive,"var getBundledNodeVersion = require('./bundled-node-version')

var bundledNodePath = path.join(__dirname, '..', 'bin', 'node')
if (process.platform === 'win32') {
  bundledNodePath += '.exe'
}",4,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/script/check-version.js,file,7,7,2020-05-18T14:51:45-04:00,Static Analysis,9ced861d153ab418069da667a5c9f5fefe90861e103a53df87d410e5550ee1e7,196305,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'__dirname' is not defined.,plain-text,Atom x64/resources/app/apm/script/check-version.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\script\check-version.js,file,42,33,7,7,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.095241465,0
192,Static Analysis,2020-05-18T14:51:00-04:00,70615,2020-05-18T14:54:28-04:00,medium,false-positive,"getBundledNodeVersion(bundledNodePath, function(err, bundledVersion) {
  if (err) {
    console.error(err);
    process.exit(1);
  }

  var ourVersion = process.version",12,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/script/check-version.js,file,15,15,2020-05-18T14:51:45-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,196310,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/script/check-version.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\script\check-version.js,file,12,5,15,15,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
193,Static Analysis,2020-05-18T14:51:00-04:00,70619,2020-05-18T14:54:28-04:00,medium,false-positive,"if (ourVersion !== bundledVersion) {
    console.error('System node (' + ourVersion + ') does not match bundled node (' + bundledVersion + ').');
    if (process.platform === 'win32') {
      console.error('Please use `.\\bin\\node.exe` to run node, and use `.\\bin\\npm.cmd` to run npm scripts.')
    } else {
      console.error('Please use `./bin/node` to run node, and use `./bin/npm` to run npm scripts.')",19,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/script/check-version.js,file,22,22,2020-05-18T14:51:45-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,196313,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/script/check-version.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\script\check-version.js,file,16,9,22,22,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
194,Static Analysis,2020-05-18T14:51:00-04:00,70620,2020-05-18T14:54:28-04:00,medium,false-positive,"process.exit(1);
  }

  var ourVersion = process.version

  if (ourVersion !== bundledVersion) {
    console.error('System node (' + ourVersion + ') does not match bundled node (' + bundledVersion + ').');",15,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/script/check-version.js,file,18,18,2020-05-18T14:51:45-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,196311,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/script/check-version.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\script\check-version.js,file,27,20,18,18,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
195,Static Analysis,2020-05-18T14:51:00-04:00,70621,2020-05-18T14:54:28-04:00,medium,false-positive,"var path = require('path');

var getBundledNodeVersion = require('./bundled-node-version')

var bundledNodePath = path.join(__dirname, '..', 'bin', 'node')
if (process.platform === 'win32') {",2,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/script/check-version.js,file,5,5,2020-05-18T14:51:45-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,196304,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/script/check-version.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\script\check-version.js,file,36,29,5,5,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
196,Static Analysis,2020-05-18T14:51:00-04:00,70663,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Compressors/Rar/RarCrcStream/ResetCrc,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201142,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Compressors/Rar/RarCrcStream/ResetCrc,SharpCompress/Compressors/Rar/RarCrcStream/ResetCrc,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
197,Static Analysis,2020-05-18T14:51:00-04:00,70718,2020-05-18T14:54:28-04:00,high,escalated,,,,,,CWE-695: Use of Low-Level Functionality,http://cwevis.org/browse/695,695,Microsoft/IdentityModel/Clients/ActiveDirectory/Native/BCryptNative/BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO/(self),logical,,,2020-05-18T14:51:59-04:00,Static Analysis,3ac9036736202c636e5a647bb8073bf5337a353e654d9216f8af1cf9293e2f3b,202156,high,,,CWE-695: Use of Low-Level Functionality,http://cwevis.org/browse/695,695,The type uses System.IntPtr or System.UIntPtr instead of System.Runtime.InteropServices.SafeHandle. Consider changing the code to use SafeHandle.,plain-text,Microsoft/IdentityModel/Clients/ActiveDirectory/Native/BCryptNative/BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO/(self),Microsoft/IdentityModel/Clients/ActiveDirectory/Native/BCryptNative/BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO/(self),logical,,,,,,PreferSafeHandleRule,Gendarme,GEND-PreferSafeHandleRule,Prefer Safe Handle ,"In general it is best to interop with native code using
**System.Runtime.InteropServices.SafeHandle** instead of
**System.IntPtr** or **System.UIntPtr** because:

SafeHandles are type safe.
SafeHandles are guaranteed to be disposed of during exceptional
conditions like a thread aborting unexpectedly or a stack overflow.
SafeHandles are not vulnerable to reycle attacks.
You don't need to write a finalizer which can be tricky to do because
they execute within their own thread, may execute on partially
constructed objects, and normally tear down the application if you allow
an exception to escape from them.


 **Bad** example:


```csharp
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable.
public sealed class Database {
    ~Database ()
    {
        // This will execute even if the ctor throws so it is important to check
        // to see if the fields are initialized.
        if (m_database != IntPtr.Zero) {
            NativeMethods.sqlite3_close (m_database);
        }
    }

    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        int err = NativeMethods.sqlite3_open_v2 (path, out m_database, flags, IntPtr.Zero);
        // handle errors
    }

    // exec and query methods would go here

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (IntPtr db);

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private IntPtr m_database;
}
```
**Good** example:


```csharp
using System.Runtime.ConstrainedExecution;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable, but you do not need to implement a finalizer because
// SafeHandle will take care of the cleanup.
internal sealed class Database {
    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        m_database = new SqlitePtr (path, flags);
    }

    // exec and query methods would go here

    // This corresponds to a native sqlite3*.
    [SecurityPermission (SecurityAction.InheritanceDemand, UnmanagedCode = true)]
    [SecurityPermission (SecurityAction.Demand, UnmanagedCode = true)]
    private sealed class SqlitePtr : SafeHandle {
        public SqlitePtr (string path, NativeMethods.OpenFlags flags) : base (IntPtr.Zero, true)
        {
            int err = NativeMethods.sqlite3_open_v2 (path, out handle, flags, IntPtr.Zero);
            // handle errors
        }

        public override bool IsInvalid {
            get {
                return (handle == IntPtr.Zero);
            }
        }

        // This will not be called if the handle is invalid. Note that this method should not throw.
        [ReliabilityContract (Consistency.WillNotCorruptState, Cer.MayFail)]
        protected override bool ReleaseHandle ()
        {
            NativeMethods.sqlite3_close (this);
            return true;
        }
    }

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (SqlitePtr db);

        // Open must take an IntPtr but all other methods take a type safe SqlitePtr.
        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private SqlitePtr m_database;
}
```",markdown,GEND-PreferSafeHandleRule,Prefer Safe Handle ,"In general it is best to interop with native code using
**System.Runtime.InteropServices.SafeHandle** instead of
**System.IntPtr** or **System.UIntPtr** because:

SafeHandles are type safe.
SafeHandles are guaranteed to be disposed of during exceptional
conditions like a thread aborting unexpectedly or a stack overflow.
SafeHandles are not vulnerable to reycle attacks.
You don't need to write a finalizer which can be tricky to do because
they execute within their own thread, may execute on partially
constructed objects, and normally tear down the application if you allow
an exception to escape from them.


 **Bad** example:


```csharp
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable.
public sealed class Database {
    ~Database ()
    {
        // This will execute even if the ctor throws so it is important to check
        // to see if the fields are initialized.
        if (m_database != IntPtr.Zero) {
            NativeMethods.sqlite3_close (m_database);
        }
    }

    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        int err = NativeMethods.sqlite3_open_v2 (path, out m_database, flags, IntPtr.Zero);
        // handle errors
    }

    // exec and query methods would go here

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (IntPtr db);

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private IntPtr m_database;
}
```
**Good** example:


```csharp
using System.Runtime.ConstrainedExecution;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable, but you do not need to implement a finalizer because
// SafeHandle will take care of the cleanup.
internal sealed class Database {
    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        m_database = new SqlitePtr (path, flags);
    }

    // exec and query methods would go here

    // This corresponds to a native sqlite3*.
    [SecurityPermission (SecurityAction.InheritanceDemand, UnmanagedCode = true)]
    [SecurityPermission (SecurityAction.Demand, UnmanagedCode = true)]
    private sealed class SqlitePtr : SafeHandle {
        public SqlitePtr (string path, NativeMethods.OpenFlags flags) : base (IntPtr.Zero, true)
        {
            int err = NativeMethods.sqlite3_open_v2 (path, out handle, flags, IntPtr.Zero);
            // handle errors
        }

        public override bool IsInvalid {
            get {
                return (handle == IntPtr.Zero);
            }
        }

        // This will not be called if the handle is invalid. Note that this method should not throw.
        [ReliabilityContract (Consistency.WillNotCorruptState, Cer.MayFail)]
        protected override bool ReleaseHandle ()
        {
            NativeMethods.sqlite3_close (this);
            return true;
        }
    }

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (SqlitePtr db);

        // Open must take an IntPtr but all other methods take a type safe SqlitePtr.
        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private SqlitePtr m_database;
}
```",markdown,,,escalated,0.8318374,1
198,Static Analysis,2020-05-18T14:51:00-04:00,70761,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Splat/ModernDependencyResolver/GetServices,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201246,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Splat/ModernDependencyResolver/GetServices,Splat/ModernDependencyResolver/GetServices,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
199,Static Analysis,2020-05-18T14:51:00-04:00,70772,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Splat/ModernDependencyResolver/ServiceRegistrationCallback,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201247,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Splat/ModernDependencyResolver/ServiceRegistrationCallback,Splat/ModernDependencyResolver/ServiceRegistrationCallback,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
200,Static Analysis,2020-05-18T14:51:00-04:00,70773,2020-05-18T14:54:28-04:00,high,escalated,,,,,,CWE-693: Protection Mechanism Failure,http://cwevis.org/browse/693,693,Squirrel/NativeMethods/QueryFullProcessImageName,logical,,,2020-05-18T14:51:57-04:00,Static Analysis,5103082648fcef5a30cdc771449bbc8b54fcf3242fd637904f2a71a26509264b,200495,high,,,CWE-693: Protection Mechanism Failure,http://cwevis.org/browse/693,693,"Marshaling information for string types is missing and what is required may be different from what you expected the default to be. Add [DllImport CharSet=] to the method or [MarshalAs] on the parameter(s) Parameter 'lpImageFileName', of type 'StringBuilder', does not have [MarshalAs] attribute, yet no [DllImport CharSet=] is set for the method 'QueryFullProcessImageName'.",plain-text,Squirrel/NativeMethods/QueryFullProcessImageName,Squirrel/NativeMethods/QueryFullProcessImageName,logical,,,,,,MarshalStringsInPInvokeDeclarationsRule,Gendarme,GEND-MarshalStringsInPInvokeDeclarationsRule,Marshal Strings In PInvoke Declarations ,"This rule will fire if a P/Invoke method has System.String or
System.Text.StringBuilder arguments, and the DllImportAttribute does not
specify the **CharSet**, and the string arguments are not decorated with
**[MarshalAs]**. This is important because the defaults are different on
the various platforms. On Mono the default is to always use utf-8. On
.NET the default is to use the ANSI CharSet which is the native encoding
and will typically be some variant of ASCII or something like Shift-JIS.
On Compact .NET the default is utf-16.

**Bad** example:


```csharp
[DllImport (""coredll"")]
static extern int SHCreateShortcut (StringBuilder szShortcut, StringBuilder szTarget);
```
**Good** examples:


```csharp
[DllImport (""coredll"", CharSet = CharSet.Auto)]
static extern int SHCreateShortcut (StringBuilder szShortcut, StringBuilder szTarget);

[DllImport (""coredll"")]
static extern int SHCreateShortcut ([MarshalAs (UnmanagedType.LPTStr)] StringBuilder szShortcut,
[MarshalAs (UnmanagedType.LPTStr)] StringBuilder szTarget);
```",markdown,GEND-MarshalStringsInPInvokeDeclarationsRule,Marshal Strings In PInvoke Declarations ,"This rule will fire if a P/Invoke method has System.String or
System.Text.StringBuilder arguments, and the DllImportAttribute does not
specify the **CharSet**, and the string arguments are not decorated with
**[MarshalAs]**. This is important because the defaults are different on
the various platforms. On Mono the default is to always use utf-8. On
.NET the default is to use the ANSI CharSet which is the native encoding
and will typically be some variant of ASCII or something like Shift-JIS.
On Compact .NET the default is utf-16.

**Bad** example:


```csharp
[DllImport (""coredll"")]
static extern int SHCreateShortcut (StringBuilder szShortcut, StringBuilder szTarget);
```
**Good** examples:


```csharp
[DllImport (""coredll"", CharSet = CharSet.Auto)]
static extern int SHCreateShortcut (StringBuilder szShortcut, StringBuilder szTarget);

[DllImport (""coredll"")]
static extern int SHCreateShortcut ([MarshalAs (UnmanagedType.LPTStr)] StringBuilder szShortcut,
[MarshalAs (UnmanagedType.LPTStr)] StringBuilder szTarget);
```",markdown,,,escalated,0.57350373,1
201,Static Analysis,2020-05-18T14:51:00-04:00,70780,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,NuGet/ZipPackage/GetFilesNoCache,logical,,,2020-05-18T14:51:56-04:00,Static Analysis,7fd5ac540fc6141f822ec4930c13a54b311e1f77922ca173e0ea499c3967223c,200219,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,This disposable local is not guaranteed to be disposed of before the method returns. Use a 'using' statement or surround the local's usage with a try/finally block. Local of type 'Package' is not disposed of (is this a fluent-like API ?).,plain-text,NuGet/ZipPackage/GetFilesNoCache,NuGet/ZipPackage/GetFilesNoCache,logical,,,,,,EnsureLocalDisposalRule,Gendarme,GEND-EnsureLocalDisposalRule,Ensure Local Disposal ,"This rule checks that disposable locals are always disposed of before
the method returns. Use a 'using' statement (or a try/finally block) to
guarantee local disposal even in the event an unhandled exception
occurs.

**Bad** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    DecodeHeader (stream);
    if (!DecodedHeader.HasContent) {
        return;
    }
    DecodeContent (stream);
    stream.Dispose ();
}
```
**Good** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        DecodeHeader (stream);
        if (!DecodedHeader.HasContent) {
            return;
        }
        DecodeContent (stream);
    }
}
```
**Bad** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    Decode (stream);
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
    stream.Dispose ();
}
```
**Good** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        Decode (stream);
    }
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.9818587,1
202,Static Analysis,2020-05-18T14:51:00-04:00,70805,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Squirrel/Bsdiff/WrappingStream/EndWrite,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201278,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Squirrel/Bsdiff/WrappingStream/EndWrite,Squirrel/Bsdiff/WrappingStream/EndWrite,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
203,Static Analysis,2020-05-18T14:51:00-04:00,70807,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Squirrel/Bsdiff/WrappingStream/BeginRead,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201275,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Squirrel/Bsdiff/WrappingStream/BeginRead,Squirrel/Bsdiff/WrappingStream/BeginRead,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
204,Static Analysis,2020-05-18T14:51:00-04:00,70809,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Squirrel/Update/SetupLogLogger/SetupLogLogger,logical,,,2020-05-18T14:51:56-04:00,Static Analysis,fca0c81517ee2666e8151cd2019b61840b21071f59a185d523826490d19a838a,200145,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,This disposable local is not guaranteed to be disposed of before the method returns. Use a 'using' statement or surround the local's usage with a try/finally block. Local of type 'FileStream' is not disposed of (at least not locally).,plain-text,Squirrel/Update/SetupLogLogger/SetupLogLogger,Squirrel/Update/SetupLogLogger/SetupLogLogger,logical,,,,,,EnsureLocalDisposalRule,Gendarme,GEND-EnsureLocalDisposalRule,Ensure Local Disposal ,"This rule checks that disposable locals are always disposed of before
the method returns. Use a 'using' statement (or a try/finally block) to
guarantee local disposal even in the event an unhandled exception
occurs.

**Bad** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    DecodeHeader (stream);
    if (!DecodedHeader.HasContent) {
        return;
    }
    DecodeContent (stream);
    stream.Dispose ();
}
```
**Good** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        DecodeHeader (stream);
        if (!DecodedHeader.HasContent) {
            return;
        }
        DecodeContent (stream);
    }
}
```
**Bad** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    Decode (stream);
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
    stream.Dispose ();
}
```
**Good** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        Decode (stream);
    }
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.98094845,1
205,Static Analysis,2020-05-18T14:51:00-04:00,70939,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/Web/XmlTransform/XmlAttributePreservingWriter/WriteDocType,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201218,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Microsoft/Web/XmlTransform/XmlAttributePreservingWriter/WriteDocType,Microsoft/Web/XmlTransform/XmlAttributePreservingWriter/WriteDocType,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
206,Static Analysis,2020-05-18T14:51:00-04:00,70949,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-189: Numeric Errors,http://cwevis.org/browse/189,189,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/Platform/CustomWebBrowser/CustomSite/TranslateAccelerator,logical,,,2020-05-18T14:51:59-04:00,Static Analysis,b1b0ba14ab8f474c314a54e7b4d30d9b92dd0db21a0d56f40d188d814a390fd3,201997,medium,,,CWE-197: Numeric Truncation Error,http://cwevis.org/browse/197,197,"This method casts a [U]IntPtr to a 32-bit value which won't work on 64-bit architectures. You should always use 64 bits integers, signed or unsigned, when doing pointer math. Type cast to 'System.Int32'.",plain-text,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/Platform/CustomWebBrowser/CustomSite/TranslateAccelerator,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/Platform/CustomWebBrowser/CustomSite/TranslateAccelerator,logical,,,,,,DoNotAssumeIntPtrSizeRule,Gendarme,GEND-DoNotAssumeIntPtrSizeRule,Do Not Assume Int Ptr Size ,"This rule checks for code which casts an **IntPtr** or **UIntPtr** into
a 32-bit (or smaller) value. It will also check if memory read with the
**Marshal.ReadInt32**and **Marshal.ReadInt64** methods is being cast
into an **IntPtr** or **UIntPtr**. **IntPtr** is generally used to
reference a memory location and downcasting them to 32-bits will make
the code fail on 64-bit CPUs.

**Bad** example (cast):


```csharp
int ptr = dest.ToInt32 ();
for (int i = 0; i < 16; i++) {
    Marshal.StructureToPtr (this, (IntPtr)ptr, false);
    ptr += 4;
}
```
**Bad** example (Marshal.Read\*):


```csharp
// that won't work on 64 bits platforms
IntPtr p = (IntPtr) Marshal.ReadInt32 (p);
```
**Good** example (cast):


```csharp
long ptr = dest.ToInt64 ();
for (int i = 0; i < 16; i++) {
    Marshal.StructureToPtr (this, (IntPtr) ptr, false);
    ptr += IntPtr.Size;
}
```
**Good** example (Marshal.Read\*):


```csharp
IntPtr p = (IntPtr) Marshal.ReadIntPtr (p);
```",markdown,rule-87c4a91bc4c9e20c70f0637bd67a4d03975f25b3ec675b9cc13d0f04540c76a6,Numeric Error,,,,,escalated,0.96060944,1
207,Static Analysis,2020-05-18T14:51:00-04:00,71015,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Splat/ModernDependencyResolver/Duplicate,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201248,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Splat/ModernDependencyResolver/Duplicate,Splat/ModernDependencyResolver/Duplicate,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
208,Static Analysis,2020-05-18T14:51:00-04:00,71139,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Archives/AbstractWritableArchive/(self),logical,,,2020-05-18T14:51:56-04:00,Static Analysis,01d3f350ac6a93a3decd5a8ded9275ae718dcbe2c91be91f516bb4caea7a683f,199989,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,This type contains disposable field(s) which aren't disposed. Ensure that every disposable field(s) is correctly disposed. System.Void SharpCompress.Archives.AbstractWritableArchive`2::Dispose() should call base.Dispose().,plain-text,SharpCompress/Archives/AbstractWritableArchive/(self),SharpCompress/Archives/AbstractWritableArchive/(self),logical,,,,,,DisposableFieldsShouldBeDisposedRule,Gendarme,GEND-DisposableFieldsShouldBeDisposedRule,Disposable Fields Should Be Disposed ,"The rule inspects all fields for disposable types and, if
**System.IDisposable** is implemented, checks that the type's
**Dispose** method does indeed call **Dispose** on all disposable
fields.

**Bad** example:


```csharp
class DoesNotDisposeMember : IDisposable {
    byte[] buffer;
    IDisposable field;

    public void Dispose ()
    {
        buffer = null;
        // field is not disposed
    }
}
```
**Good** example:


```csharp
class DisposePattern : IDisposable {
    byte[] buffer;
    IDisposable field;
    bool disposed;

    public void Dispose ()
    {
        Dispose (true);
    }

    private void Dispose (bool disposing)
    {
        if (!disposed) {
            if (disposing) {
                field.Dispose ();
            }
            buffer = null;
            disposed = true;
        }
    }
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.98136836,1
209,Static Analysis,2020-05-18T14:51:00-04:00,71182,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Squirrel/Bsdiff/WrappingStream/BeginWrite,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201276,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Squirrel/Bsdiff/WrappingStream/BeginWrite,Squirrel/Bsdiff/WrappingStream/BeginWrite,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
210,Static Analysis,2020-05-18T14:51:00-04:00,71196,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Squirrel/UpdateManager/RemoveUninstallerRegistryEntry,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201254,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Squirrel/UpdateManager/RemoveUninstallerRegistryEntry,Squirrel/UpdateManager/RemoveUninstallerRegistryEntry,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
211,Static Analysis,2020-05-18T14:51:00-04:00,71383,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Compressors/Xz/XZIndex/FromStream,logical,,,2020-05-18T14:51:56-04:00,Static Analysis,f1a784bcc8db4a1699133da6f083651de3ffe2d8bfed7ec03494af61ca139db5,200165,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,This disposable local is not guaranteed to be disposed of before the method returns. Use a 'using' statement or surround the local's usage with a try/finally block. Local of type 'NonDisposingStream' is not disposed of (at least not locally).,plain-text,SharpCompress/Compressors/Xz/XZIndex/FromStream,SharpCompress/Compressors/Xz/XZIndex/FromStream,logical,,,,,,EnsureLocalDisposalRule,Gendarme,GEND-EnsureLocalDisposalRule,Ensure Local Disposal ,"This rule checks that disposable locals are always disposed of before
the method returns. Use a 'using' statement (or a try/finally block) to
guarantee local disposal even in the event an unhandled exception
occurs.

**Bad** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    DecodeHeader (stream);
    if (!DecodedHeader.HasContent) {
        return;
    }
    DecodeContent (stream);
    stream.Dispose ();
}
```
**Good** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        DecodeHeader (stream);
        if (!DecodedHeader.HasContent) {
            return;
        }
        DecodeContent (stream);
    }
}
```
**Bad** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    Decode (stream);
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
    stream.Dispose ();
}
```
**Good** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        Decode (stream);
    }
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.9820098,1
212,Static Analysis,2020-05-18T14:51:00-04:00,71399,2020-05-18T14:54:28-04:00,medium,false-positive,"var error, metadataPath, pack;
        metadataPath = path.resolve('package.json');
        if (!fs.isFileSync(metadataPath)) {
          throw new Error(`No package.json file found at ${process.cwd()}/package.json`);
        }
        try {
          return pack = JSON.parse(fs.readFileSync(metadataPath));",277,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/publish.js,file,280,280,2020-05-18T14:51:37-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,193875,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/publish.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\publish.js,file,67,60,280,280,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
213,Static Analysis,2020-05-18T14:51:00-04:00,71400,2020-05-18T14:54:28-04:00,high,escalated,"if (!(repo != null ? repo.isWorkingDirectory(currentDirectory) : void 0)) {
          throw new Error('Package must be in a Git repository before publishing: https://help.github.com/articles/create-a-repo');
        }
        if (currentBranch = repo.getShortHead()) {
          remoteName = repo.getConfigValue(`branch.${currentBranch}.remote`);
        }
        if (remoteName == null) {",301,,,,CWE-697: Incorrect Comparison,http://cwevis.org/browse/697,697,Atom x64/resources/app/apm/lib/publish.js,file,304,304,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-c271f2bb931810eef633f7c736d1dd934fbd6ed5f62ac8d8ea39ade811190622,Comparison,,,,,escalated,0.9110538,1
214,Static Analysis,2020-05-18T14:51:00-04:00,71402,2020-05-18T14:54:28-04:00,high,escalated,"parseOptions(argv) {
        var options;
        options = yargs(argv).wrap(Math.min(100, yargs.terminalWidth()));
        options.usage(""\nUsage: apm publish [<newversion> | major | minor | patch | build]\n       apm publish --tag <tagname>\n       apm publish --rename <new-name>\n\nPublish a new version of the package in the current working directory.\n\nIf a new version or version increment is specified, then a new Git tag is\ncreated and the package.json file is updated with that new version before\nit is published to the apm registry. The HEAD branch and the new tag are\npushed up to the remote repository automatically using this option.\n\nIf a tag is provided via the --tag flag, it must have the form `vx.y.z`.\nFor example, `apm publish -t v1.12.0`.\n\nIf a new name is provided via the --rename flag, the package.json file is\nupdated with the new name and the package's name is updated on Atom.io.\n\nRun `apm featured` to see all the featured packages or\n`apm view <packagename>` to see information about your package after you\nhave published it."");
        options.alias('h', 'help').describe('help', 'Print this usage message');
        options.alias('t', 'tag').string('tag').describe('tag', 'Specify a tag to publish. Must be of the form vx.y.z');
        return options.alias('r', 'rename').string('rename').describe('rename', 'Specify a new name for the package');",34,,,,CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'),http://cwevis.org/browse/79,79,Atom x64/resources/app/apm/lib/publish.js,file,37,37,2020-05-18T14:51:37-04:00,Static Analysis,b4414dd3b1087806bb332146e753f5917a3aec259e29c568ca289f9ab428d0d4,193757,high,,,CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS),http://cwevis.org/browse/80,80,HTML passed in to function 'options.usage',plain-text,Atom x64/resources/app/apm/lib/publish.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\publish.js,file,22,9,37,37,xss,no-mixed-html,ESLint,ESLINT-XSS-no-mixed-html,No mixed html,"Wanted a way to catch XSS issues in code before they end up in production.

## Rule Details

This rule aims to catch as many XSS issues by examining the code as possible.
The rule checks for mixed html/non-html content, unescaped input, etc.

The following patterns are considered warnings:

```js

// Mixed content
var x = '<div>' + input + '</div>';
$node.html( '<div>' + input + '</div>' );

// Unsafe container names.
var html = input;
var text = htmlInput;
displayValue( htmlInput );

// Checking certain expression parameters that might end up in the variables.
var htmlItems = [ input1, input2 ].join();
var textItems = [ '<div>', input, '</div>' ].join();
var tag = isNumbered ? '<ol>' : '<ul>';

// Checking function return values.
var createHtml = function( item ) { return item.name; }
var createBox = function( item ) { return '<div>' + encode( item ) + '</div>' }

```

The following patterns are not warnings:

```js

// Proper encoding
var html = '<div>' + encode( input ) + '</div>';
$node.html( '<div>' + encode( input ) + '</div>' );

// Proper container names
var html = '<img src=""happy.png"">';
var text = textbox.value;

```

## When Not To Use It

If you are creating a Node.js application that doesn't output any HTML, you can
safely disable this rule.

## Further Reading

- [XSS Prevention CHeat Sheet - OWASP](https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet)",markdown,rule-396ebe8bb0c3dc5d4eb2b5368a97688fdb0f2587416453645c3d06db2b216479,Cross-site Scripting (XSS),"Cross-site scripting (XSS) vulnerabilities occur when:
1. Untrusted data enters a web application, typically from a web request.
2. The web application dynamically generates a web page that contains this untrusted data.
3. During page generation, the application does not prevent the data from containing content that is executable by a web browser, such as JavaScript, HTML tags, HTML attributes, mouse events, Flash, ActiveX, etc.
4. A victim visits the generated web page through a web browser, which contains malicious script that was injected using the untrusted data.
5. Since the script comes from a web page that was sent by the web server, the victim's web browser executes the malicious script in the context of the web server's domain.
6. This effectively violates the intention of the web browser's same-origin policy, which states that scripts in one domain should not be able to access resources or run code in a different domain.
There are three main kinds of XSS:

*Reflected XSS (or Non-Persistent)*

The server reads data directly from the HTTP request and reflects it back in the HTTP response. Reflected XSS exploits occur when an attacker causes a victim to supply dangerous content to a vulnerable web application, which is then reflected back to the victim and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to the victim. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces a victim to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the victim, the content is executed by the victim's browser.

*Stored XSS (or Persistent)*

The application stores dangerous data in a database, message forum, visitor log, or other trusted data store. At a later time, the dangerous data is subsequently read back into the application and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. For example, the attacker might inject XSS into a log message, which might not be handled properly when an administrator views the logs.

*DOM-Based XSS*

In DOM-based XSS, the client performs the injection of XSS into the page; in the other types, the server performs the injection. DOM-based XSS generally involves server-controlled, trusted script that is sent to the client, such as Javascript that performs sanity checks on a form before the user submits it. If the server-supplied script processes user-supplied data and then injects it back into the web page (such as with dynamic HTML), then DOM-based XSS is possible.

Once the malicious script is injected, the attacker can perform a variety of malicious activities. The attacker could transfer private information, such as cookies that may include session information, from the victim's machine to the attacker. The attacker could send malicious requests to a web site on behalf of the victim, which could be especially dangerous to the site if the victim has administrator privileges to manage that site. Phishing attacks could be used to emulate trusted web sites and trick the victim into entering a password, allowing the attacker to compromise the victim's account on that web site. Finally, the script could exploit a vulnerability in the web browser itself possibly taking over the victim's machine, sometimes referred to as ""drive-by hacking.""

In many cases, the attack can be launched without the victim even being aware of it. Even with careful users, attackers frequently use a variety of methods to encode the malicious portion of the attack, such as URL encoding or Unicode, so the request looks less suspicious.

**Guidance**

To remedy XSS vulnerabilities, it is important to never use untrusted or unfiltered data within the code of a HTML page.

Untrusted data can originate not only form the client but potentially a third party or previously uploaded file etc.

Filtering of untrusted data typically involves converting special characters to their HTML entity encoded counterparts (however, other methods do exist, see references).

These special characters include:

* `&`
* `<`
* `>`
* `""`
* `'`
* `/`

An example of HTML entity encoding is converting `<` to `&lt;`.

Although it is possible to filter untrusted input, there are five locations within an HTML page where untrusted input (even if it has been filtered) should never be placed:

1. Directly in a script.
2. Inside an HTML comment.
3. In an attribute name.
4. In a tag name.
5. Directly in CSS.

Each of these locations have their own form of escaping and filtering.

Because many browsers attempt to implement XSS protection, any manual verification of this finding should be conducted using multiple different browsers and browser
versions.

**References**

- [WASC](http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting)
- [Secunia](http://secunia.com/advisories/9716/)
- [OWASP XSS Prevention Cheat Sheet](https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet)
- [OWASP DOM Based XSS](https://www.owasp.org/index.php/DOM_Based_XSS)
- [OWASP DOM Based XSS Prevention Cheat Sheet](https://www.owasp.org/index.php/DOM_based_XSS_Prevention_Cheat_Sheet)",markdown,,,escalated,0.8266207,1
215,Static Analysis,2020-05-18T14:51:00-04:00,71403,2020-05-18T14:54:28-04:00,medium,false-positive,"(function() {
  var Command, Git, Login, Packages, Publish, config, fs, path, request, semver, url, yargs;

  path = require('path');

  url = require('url');",1,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/publish.js,file,4,4,2020-05-18T14:51:37-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,193730,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/publish.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\publish.js,file,17,10,4,4,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
216,Static Analysis,2020-05-18T14:51:00-04:00,71405,2020-05-18T14:54:28-04:00,medium,false-positive,"Git = require('git-utils');

  semver = require('semver');

  fs = require('./fs');",9,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/publish.js,file,12,12,2020-05-18T14:51:37-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,193735,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/publish.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\publish.js,file,19,12,12,12,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
217,Static Analysis,2020-05-18T14:51:00-04:00,71406,2020-05-18T14:54:28-04:00,medium,false-positive,"//             argument.
      pushVersion(tag, pack, callback) {
        var pushArgs;
        process.stdout.write(`Pushing ${tag} tag `);
        pushArgs = ['push', Packages.getRemote(pack), 'HEAD', tag];
        return this.spawn('git', pushArgs, (...args) => {
          return this.logCommandResults(callback, ...args);",68,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/publish.js,file,71,71,2020-05-18T14:51:37-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,193774,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/publish.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\publish.js,file,16,9,71,71,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
218,Static Analysis,2020-05-18T14:51:00-04:00,71407,2020-05-18T14:54:28-04:00,medium,false-positive,"yargs = require('yargs');

  Git = require('git-utils');

  semver = require('semver');",7,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/publish.js,file,10,10,2020-05-18T14:51:37-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,193734,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/publish.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\publish.js,file,16,9,10,10,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
219,Static Analysis,2020-05-18T14:51:00-04:00,71408,2020-05-18T14:54:28-04:00,medium,false-positive,"fs = require('./fs');

  config = require('./apm');

  Command = require('./command');",13,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/publish.js,file,16,16,2020-05-18T14:51:37-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,193738,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/publish.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\publish.js,file,19,12,16,16,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
220,Static Analysis,2020-05-18T14:51:00-04:00,71411,2020-05-18T14:54:28-04:00,medium,false-positive,"semver = require('semver');

  fs = require('./fs');

  config = require('./apm');",11,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/publish.js,file,14,14,2020-05-18T14:51:37-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,193736,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/publish.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\publish.js,file,15,8,14,14,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
221,Static Analysis,2020-05-18T14:51:00-04:00,71412,2020-05-18T14:54:28-04:00,high,escalated,"}
        ref1 = pack.dependencies;
        for (packageName in ref1) {
          semverRange = ref1[packageName];
          if (!isValidRange(semverRange)) {
            throw new Error(`The ${packageName} dependency range in the package.json file is invalid: ${semverRange}`);
          }",391,,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/lib/publish.js,file,394,394,2020-05-18T14:51:37-04:00,Static Analysis,6569b353992e88510a975ec3412e07f9c2539e0cf8eb813d02c1c97e2a312d82,194009,high,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Generic Object Injection Sink,plain-text,Atom x64/resources/app/apm/lib/publish.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\publish.js,file,42,25,394,394,security,detect-object-injection,ESLint,ESLINT-SECURITY-detect-object-injection,Detect object injection,"Detects `variable[key]` as a left- or right-hand assignment operand.

More information: [The Dangers of Square Bracket Notation](https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/the-dangers-of-square-bracket-notation.md)",markdown,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.9251437,1
222,Static Analysis,2020-05-18T14:51:00-04:00,71415,2020-05-18T14:54:28-04:00,high,false-positive,"var i, index, len, name;
            if ((response != null ? response.statusCode : void 0) === 200) {
              for (index = i = 0, len = tags.length; i < len; index = ++i) {
                ({name} = tags[index]);
                if (name === tag) {
                  return callback();
                }",98,,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/lib/publish.js,file,101,101,2020-05-18T14:51:37-04:00,Static Analysis,6569b353992e88510a975ec3412e07f9c2539e0cf8eb813d02c1c97e2a312d82,193787,high,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Generic Object Injection Sink,plain-text,Atom x64/resources/app/apm/lib/publish.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\publish.js,file,38,27,101,101,security,detect-object-injection,ESLint,ESLINT-SECURITY-detect-object-injection,Detect object injection,"Detects `variable[key]` as a left- or right-hand assignment operand.

More information: [The Dangers of Square Bracket Notation](https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/the-dangers-of-square-bracket-notation.md)",markdown,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.9251437,1
223,Static Analysis,2020-05-18T14:51:00-04:00,71418,2020-05-18T14:54:28-04:00,medium,false-positive,"config = require('./apm');

  Command = require('./command');

  Login = require('./login');",15,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/publish.js,file,18,18,2020-05-18T14:51:37-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,193740,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/publish.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\publish.js,file,20,13,18,18,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270798,0
224,Static Analysis,2020-05-18T14:51:00-04:00,71421,2020-05-18T14:54:28-04:00,medium,false-positive,"options = {};
        }
        callback = remaining.shift();
        process.stdout.write(`Publishing ${options.rename || pack.name}@${tag} `);
        return this.createPackageVersion(pack.name, tag, options, (error) => {
          if (error != null) {
            this.logFailure();",252,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/publish.js,file,255,255,2020-05-18T14:51:37-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,193858,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/publish.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\publish.js,file,16,9,255,255,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
225,Static Analysis,2020-05-18T14:51:00-04:00,71423,2020-05-18T14:54:28-04:00,medium,false-positive,"url = require('url');

  yargs = require('yargs');

  Git = require('git-utils');",5,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/publish.js,file,8,8,2020-05-18T14:51:37-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,193732,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/publish.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\publish.js,file,18,11,8,8,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
226,Static Analysis,2020-05-18T14:51:00-04:00,71425,2020-05-18T14:54:28-04:00,high,escalated,"if (--retryCount <= 0) {
              return callback();
            } else {
              return setTimeout(requestTags, interval);
            }
          });
        };",107,The function setTimeout can be unsafe,admin,2020-05-27T14:03:39-04:00,,,,Atom x64/resources/app/apm/lib/publish.js,file,110,110,2020-05-18T14:51:37-04:00,Static Analysis,f3d3a775d124efda94c2da6c66294c13b08ef46c34d4ef1c67f4a00765ec9bba,193790,high,,,,,,The function setTimeout can be unsafe,plain-text,Atom x64/resources/app/apm/lib/publish.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\publish.js,file,55,22,110,110,scanjs-rules,call_setTimeout,ESLint,ESLINT-SCANJS-RULES-call_setTimeout,Call setTimeout,,,ESLINT-SCANJS-RULES-call_setTimeout,Call setTimeout,,,PCI DSS 3.1,6.5.6 All 'high risk' vulnerabilities,escalated,0.8585056,1
227,Static Analysis,2020-05-18T14:51:00-04:00,71426,2020-05-18T14:54:28-04:00,medium,false-positive,"}

      logFirstTimePublishMessage(pack) {
        process.stdout.write('Congrats on publishing a new package!'.rainbow);
        // :+1: :package: :tada: when available
        if (process.platform === 'darwin') {
          process.stdout.write(' \uD83D\uDC4D  \uD83D\uDCE6  \uD83C\uDF89');",265,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/publish.js,file,268,268,2020-05-18T14:51:37-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,193862,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/publish.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\publish.js,file,16,9,268,268,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
228,Static Analysis,2020-05-18T14:51:00-04:00,71427,2020-05-18T14:54:28-04:00,medium,false-positive,"logFirstTimePublishMessage(pack) {
        process.stdout.write('Congrats on publishing a new package!'.rainbow);
        // :+1: :package: :tada: when available
        if (process.platform === 'darwin') {
          process.stdout.write(' \uD83D\uDC4D  \uD83D\uDCE6  \uD83C\uDF89');
        }
        return process.stdout.write(`\nCheck it out at https://atom.io/packages/${pack.name}\n`);",267,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/publish.js,file,270,270,2020-05-18T14:51:37-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,193865,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/publish.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\publish.js,file,20,13,270,270,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
229,Static Analysis,2020-05-18T14:51:00-04:00,71428,2020-05-18T14:54:28-04:00,medium,false-positive,"if (process.platform === 'darwin') {
          process.stdout.write(' \uD83D\uDC4D  \uD83D\uDCE6  \uD83C\uDF89');
        }
        return process.stdout.write(`\nCheck it out at https://atom.io/packages/${pack.name}\n`);
      }

      loadMetadata() {",270,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/publish.js,file,273,273,2020-05-18T14:51:37-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,193872,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/publish.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\publish.js,file,23,16,273,273,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
230,Static Analysis,2020-05-18T14:51:00-04:00,71429,2020-05-18T14:54:28-04:00,medium,false-positive,"//            argument and a the generated tag string as the second argument.
      versionPackage(version, callback) {
        var versionArgs;
        process.stdout.write('Preparing and tagging a new version ');
        versionArgs = ['version', version, '-m', 'Prepare v%s release'];
        return this.fork(this.atomNpmPath, versionArgs, (code, stderr = '', stdout = '') => {
          if (code === 0) {",47,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/publish.js,file,50,50,2020-05-18T14:51:37-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,193764,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/publish.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\publish.js,file,16,9,50,50,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
231,Static Analysis,2020-05-18T14:51:00-04:00,71430,2020-05-18T14:54:28-04:00,high,escalated,"loadRepository() {
        var currentBranch, currentDirectory, remoteName, repo, upstreamUrl;
        currentDirectory = process.cwd();
        repo = Git.open(currentDirectory);
        if (!(repo != null ? repo.isWorkingDirectory(currentDirectory) : void 0)) {
          throw new Error('Package must be in a Git repository before publishing: https://help.github.com/articles/create-a-repo');
        }",297,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/lib/publish.js,file,300,300,2020-05-18T14:51:37-04:00,Static Analysis,b80ca388d465258c8abb19130f91ee150a36df47299916a74d04b1c7580ca12e,193885,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Found fs.open with non literal argument at index 0,plain-text,Atom x64/resources/app/apm/lib/publish.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\publish.js,file,24,16,300,300,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.9677861,1
232,Static Analysis,2020-05-18T14:51:00-04:00,71432,2020-05-18T14:54:28-04:00,medium,false-positive,"return callback('The new package name must be different than the name in the package.json file');
          }
          message = `Renaming ${pack.name} to ${name} `;
          process.stdout.write(message);
          return this.setPackageName(pack, name, (error) => {
            if (error != null) {
              this.logFailure();",326,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/publish.js,file,329,329,2020-05-18T14:51:37-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,193908,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/publish.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\publish.js,file,18,11,329,329,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
233,Static Analysis,2020-05-18T14:51:00-04:00,71434,2020-05-18T14:54:28-04:00,high,escalated,"}
        ref2 = pack.devDependencies;
        for (packageName in ref2) {
          semverRange = ref2[packageName];
          if (!isValidRange(semverRange)) {
            throw new Error(`The ${packageName} dev dependency range in the package.json file is invalid: ${semverRange}`);
          }",398,,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/lib/publish.js,file,401,401,2020-05-18T14:51:37-04:00,Static Analysis,6569b353992e88510a975ec3412e07f9c2539e0cf8eb813d02c1c97e2a312d82,194014,high,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Generic Object Injection Sink,plain-text,Atom x64/resources/app/apm/lib/publish.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\publish.js,file,42,25,401,401,security,detect-object-injection,ESLint,ESLINT-SECURITY-detect-object-injection,Detect object injection,"Detects `variable[key]` as a left- or right-hand assignment operand.

More information: [The Dangers of Square Bracket Notation](https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/the-dangers-of-square-bracket-notation.md)",markdown,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.9251437,1
234,Static Analysis,2020-05-18T14:51:00-04:00,71435,2020-05-18T14:54:28-04:00,medium,false-positive,"Packages = require('./packages');

  request = require('./request');

  module.exports = Publish = (function() {
    class Publish extends Command {",21,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/publish.js,file,24,24,2020-05-18T14:51:37-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,193745,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/publish.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\publish.js,file,20,13,24,24,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
235,Static Analysis,2020-05-18T14:51:00-04:00,71437,2020-05-18T14:54:28-04:00,medium,false-positive,"Login = require('./login');

  Packages = require('./packages');

  request = require('./request');",19,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/publish.js,file,22,22,2020-05-18T14:51:37-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,193744,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/publish.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\publish.js,file,21,14,22,22,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
236,Static Analysis,2020-05-18T14:51:00-04:00,71439,2020-05-18T14:54:28-04:00,medium,false-positive,"request = require('./request');

  module.exports = Publish = (function() {
    class Publish extends Command {
      constructor() {
        super();",23,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/publish.js,file,26,26,2020-05-18T14:51:37-04:00,Static Analysis,62173c3357301b64bcb7cb49ad65b9eeb8aa24356212b93fe0fe0166d3218ce7,193746,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'module' is not defined.,plain-text,Atom x64/resources/app/apm/lib/publish.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\publish.js,file,9,3,26,26,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.068299174,0
237,Static Analysis,2020-05-18T14:51:00-04:00,71442,2020-05-18T14:54:28-04:00,medium,false-positive,"process.stdout.write('Congrats on publishing a new package!'.rainbow);
        // :+1: :package: :tada: when available
        if (process.platform === 'darwin') {
          process.stdout.write(' \uD83D\uDC4D  \uD83D\uDCE6  \uD83C\uDF89');
        }
        return process.stdout.write(`\nCheck it out at https://atom.io/packages/${pack.name}\n`);
      }",268,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/publish.js,file,271,271,2020-05-18T14:51:37-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,193868,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/publish.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\publish.js,file,18,11,271,271,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
238,Static Analysis,2020-05-18T14:51:00-04:00,71444,2020-05-18T14:54:28-04:00,high,escalated,"throw new Error(`No package.json file found at ${process.cwd()}/package.json`);
        }
        try {
          return pack = JSON.parse(fs.readFileSync(metadataPath));
        } catch (error1) {
          error = error1;
          throw new Error(`Error parsing package.json file: ${error.message}`);",280,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/lib/publish.js,file,283,283,2020-05-18T14:51:37-04:00,Static Analysis,374ad040fff48d9edaa97052bf28a674b1f4e79af66a0448f1ab1699003790cd,193876,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Found fs.readFileSync with non literal argument at index 0,plain-text,Atom x64/resources/app/apm/lib/publish.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\publish.js,file,51,36,283,283,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.9758102,1
239,Static Analysis,2020-05-18T14:51:00-04:00,71446,2020-05-18T14:54:28-04:00,medium,false-positive,"callback('Unable to parse repository name/owner from package.json repository field');
            return;
          }
          process.stdout.write(`Registering ${pack.name} `);
          return Login.getTokenOrLogin((error, token) => {
            var requestSettings;
            if (error != null) {",163,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/publish.js,file,166,166,2020-05-18T14:51:37-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,193818,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/publish.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\publish.js,file,18,11,166,166,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
240,Static Analysis,2020-05-18T14:51:00-04:00,71447,2020-05-18T14:54:28-04:00,medium,false-positive,"path = require('path');

  url = require('url');

  yargs = require('yargs');",3,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/publish.js,file,6,6,2020-05-18T14:51:37-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,193731,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/publish.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\publish.js,file,16,9,6,6,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
241,Static Analysis,2020-05-18T14:51:00-04:00,71448,2020-05-18T14:54:28-04:00,medium,false-positive,"Command = require('./command');

  Login = require('./login');

  Packages = require('./packages');",17,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/publish.js,file,20,20,2020-05-18T14:51:37-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,193743,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/publish.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\publish.js,file,18,11,20,20,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
242,Static Analysis,2020-05-18T14:51:00-04:00,71452,2020-05-18T14:54:28-04:00,medium,false-positive,"constructor() {
        super();
        this.userConfigPath = config.getUserConfigPath();
        this.atomNpmPath = require.resolve('npm/bin/npm-cli');
      }

      parseOptions(argv) {",28,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/publish.js,file,31,31,2020-05-18T14:51:37-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,193752,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/publish.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\publish.js,file,35,28,31,31,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
243,Static Analysis,2020-05-18T14:51:00-04:00,71453,2020-05-18T14:54:28-04:00,high,escalated,"var metadataJson, metadataPath;
        metadataPath = path.resolve('package.json');
        metadataJson = JSON.stringify(pack, null, 2);
        return fs.writeFile(metadataPath, `${metadataJson}\n`, callback);
      }

      loadRepository() {",291,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/lib/publish.js,file,294,294,2020-05-18T14:51:37-04:00,Static Analysis,de156296231aecb4c4578ea09f38338cd08718481e3e00cb180cee34f584d19d,193881,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Found fs.writeFile with non literal argument at index 0,plain-text,Atom x64/resources/app/apm/lib/publish.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\publish.js,file,28,16,294,294,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.97772336,1
244,Static Analysis,2020-05-18T14:51:00-04:00,71454,2020-05-18T14:54:28-04:00,medium,false-positive,"loadRepository() {
        var currentBranch, currentDirectory, remoteName, repo, upstreamUrl;
        currentDirectory = process.cwd();
        repo = Git.open(currentDirectory);
        if (!(repo != null ? repo.isWorkingDirectory(currentDirectory) : void 0)) {
          throw new Error('Package must be in a Git repository before publishing: https://help.github.com/articles/create-a-repo');",296,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/publish.js,file,299,299,2020-05-18T14:51:37-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,193884,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/publish.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\publish.js,file,35,28,299,299,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
245,Static Analysis,2020-05-18T14:51:00-04:00,71464,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/Web/XmlTransform/PositionTrackingTextReader/ReadToPosition,logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.98149246,1
246,Static Analysis,2020-05-18T14:51:00-04:00,71693,2020-05-18T14:54:28-04:00,high,escalated,,,,,,CWE-695: Use of Low-Level Functionality,http://cwevis.org/browse/695,695,Microsoft/Alm/Win32/Ntdll/(self),logical,,,2020-05-18T14:52:00-04:00,Static Analysis,3ac9036736202c636e5a647bb8073bf5337a353e654d9216f8af1cf9293e2f3b,202444,high,,,CWE-695: Use of Low-Level Functionality,http://cwevis.org/browse/695,695,The type uses System.IntPtr or System.UIntPtr instead of System.Runtime.InteropServices.SafeHandle. Consider changing the code to use SafeHandle.,plain-text,Microsoft/Alm/Win32/Ntdll/(self),Microsoft/Alm/Win32/Ntdll/(self),logical,,,,,,PreferSafeHandleRule,Gendarme,GEND-PreferSafeHandleRule,Prefer Safe Handle ,"In general it is best to interop with native code using
**System.Runtime.InteropServices.SafeHandle** instead of
**System.IntPtr** or **System.UIntPtr** because:

SafeHandles are type safe.
SafeHandles are guaranteed to be disposed of during exceptional
conditions like a thread aborting unexpectedly or a stack overflow.
SafeHandles are not vulnerable to reycle attacks.
You don't need to write a finalizer which can be tricky to do because
they execute within their own thread, may execute on partially
constructed objects, and normally tear down the application if you allow
an exception to escape from them.


 **Bad** example:


```csharp
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable.
public sealed class Database {
    ~Database ()
    {
        // This will execute even if the ctor throws so it is important to check
        // to see if the fields are initialized.
        if (m_database != IntPtr.Zero) {
            NativeMethods.sqlite3_close (m_database);
        }
    }

    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        int err = NativeMethods.sqlite3_open_v2 (path, out m_database, flags, IntPtr.Zero);
        // handle errors
    }

    // exec and query methods would go here

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (IntPtr db);

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private IntPtr m_database;
}
```
**Good** example:


```csharp
using System.Runtime.ConstrainedExecution;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable, but you do not need to implement a finalizer because
// SafeHandle will take care of the cleanup.
internal sealed class Database {
    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        m_database = new SqlitePtr (path, flags);
    }

    // exec and query methods would go here

    // This corresponds to a native sqlite3*.
    [SecurityPermission (SecurityAction.InheritanceDemand, UnmanagedCode = true)]
    [SecurityPermission (SecurityAction.Demand, UnmanagedCode = true)]
    private sealed class SqlitePtr : SafeHandle {
        public SqlitePtr (string path, NativeMethods.OpenFlags flags) : base (IntPtr.Zero, true)
        {
            int err = NativeMethods.sqlite3_open_v2 (path, out handle, flags, IntPtr.Zero);
            // handle errors
        }

        public override bool IsInvalid {
            get {
                return (handle == IntPtr.Zero);
            }
        }

        // This will not be called if the handle is invalid. Note that this method should not throw.
        [ReliabilityContract (Consistency.WillNotCorruptState, Cer.MayFail)]
        protected override bool ReleaseHandle ()
        {
            NativeMethods.sqlite3_close (this);
            return true;
        }
    }

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (SqlitePtr db);

        // Open must take an IntPtr but all other methods take a type safe SqlitePtr.
        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private SqlitePtr m_database;
}
```",markdown,GEND-PreferSafeHandleRule,Prefer Safe Handle ,"In general it is best to interop with native code using
**System.Runtime.InteropServices.SafeHandle** instead of
**System.IntPtr** or **System.UIntPtr** because:

SafeHandles are type safe.
SafeHandles are guaranteed to be disposed of during exceptional
conditions like a thread aborting unexpectedly or a stack overflow.
SafeHandles are not vulnerable to reycle attacks.
You don't need to write a finalizer which can be tricky to do because
they execute within their own thread, may execute on partially
constructed objects, and normally tear down the application if you allow
an exception to escape from them.


 **Bad** example:


```csharp
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable.
public sealed class Database {
    ~Database ()
    {
        // This will execute even if the ctor throws so it is important to check
        // to see if the fields are initialized.
        if (m_database != IntPtr.Zero) {
            NativeMethods.sqlite3_close (m_database);
        }
    }

    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        int err = NativeMethods.sqlite3_open_v2 (path, out m_database, flags, IntPtr.Zero);
        // handle errors
    }

    // exec and query methods would go here

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (IntPtr db);

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private IntPtr m_database;
}
```
**Good** example:


```csharp
using System.Runtime.ConstrainedExecution;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable, but you do not need to implement a finalizer because
// SafeHandle will take care of the cleanup.
internal sealed class Database {
    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        m_database = new SqlitePtr (path, flags);
    }

    // exec and query methods would go here

    // This corresponds to a native sqlite3*.
    [SecurityPermission (SecurityAction.InheritanceDemand, UnmanagedCode = true)]
    [SecurityPermission (SecurityAction.Demand, UnmanagedCode = true)]
    private sealed class SqlitePtr : SafeHandle {
        public SqlitePtr (string path, NativeMethods.OpenFlags flags) : base (IntPtr.Zero, true)
        {
            int err = NativeMethods.sqlite3_open_v2 (path, out handle, flags, IntPtr.Zero);
            // handle errors
        }

        public override bool IsInvalid {
            get {
                return (handle == IntPtr.Zero);
            }
        }

        // This will not be called if the handle is invalid. Note that this method should not throw.
        [ReliabilityContract (Consistency.WillNotCorruptState, Cer.MayFail)]
        protected override bool ReleaseHandle ()
        {
            NativeMethods.sqlite3_close (this);
            return true;
        }
    }

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (SqlitePtr db);

        // Open must take an IntPtr but all other methods take a type safe SqlitePtr.
        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private SqlitePtr m_database;
}
```",markdown,,,escalated,0.8318374,1
247,Static Analysis,2020-05-18T14:51:00-04:00,71747,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-227: 7PK - API Abuse,http://cwevis.org/browse/227,227,Microsoft/Web/XmlTransform/XmlTransformation/PreprocessImportElement,logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-dc56fd6c6aaaf7aef3e91a691e1f8bd8f7311763a2d3286fce16c6c5cf52b5e2,API Abuse,"The software uses an API in a manner contrary to its intended use.

An API is a contract between a caller and a callee. The most common forms of API misuse occurs when the caller does not honor its end of this contract. For example, if a program does not call chdir() after calling chroot(), it violates the contract that specifies how to change the active root directory in a secure fashion. Another good example of library abuse is expecting the callee to return trustworthy DNS information to the caller. In this case, the caller misuses the callee API by making certain assumptions about its behavior (that the return value can be used for authentication purposes). One can also violate the caller-callee contract from the other side. For example, if a coder subclasses SecureRandom and returns a non-random value, the contract is violated.",markdown,,,escalated,0.94525355,1
248,Static Analysis,2020-05-18T14:51:00-04:00,71762,2020-05-18T14:54:28-04:00,high,escalated,,,,,,CWE-695: Use of Low-Level Functionality,http://cwevis.org/browse/695,695,Microsoft/Alm/NativeMethods/CredentialUiInfo/(self),logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,GEND-PreferSafeHandleRule,Prefer Safe Handle ,"In general it is best to interop with native code using
**System.Runtime.InteropServices.SafeHandle** instead of
**System.IntPtr** or **System.UIntPtr** because:

SafeHandles are type safe.
SafeHandles are guaranteed to be disposed of during exceptional
conditions like a thread aborting unexpectedly or a stack overflow.
SafeHandles are not vulnerable to reycle attacks.
You don't need to write a finalizer which can be tricky to do because
they execute within their own thread, may execute on partially
constructed objects, and normally tear down the application if you allow
an exception to escape from them.


 **Bad** example:


```csharp
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable.
public sealed class Database {
    ~Database ()
    {
        // This will execute even if the ctor throws so it is important to check
        // to see if the fields are initialized.
        if (m_database != IntPtr.Zero) {
            NativeMethods.sqlite3_close (m_database);
        }
    }

    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        int err = NativeMethods.sqlite3_open_v2 (path, out m_database, flags, IntPtr.Zero);
        // handle errors
    }

    // exec and query methods would go here

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (IntPtr db);

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private IntPtr m_database;
}
```
**Good** example:


```csharp
using System.Runtime.ConstrainedExecution;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable, but you do not need to implement a finalizer because
// SafeHandle will take care of the cleanup.
internal sealed class Database {
    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        m_database = new SqlitePtr (path, flags);
    }

    // exec and query methods would go here

    // This corresponds to a native sqlite3*.
    [SecurityPermission (SecurityAction.InheritanceDemand, UnmanagedCode = true)]
    [SecurityPermission (SecurityAction.Demand, UnmanagedCode = true)]
    private sealed class SqlitePtr : SafeHandle {
        public SqlitePtr (string path, NativeMethods.OpenFlags flags) : base (IntPtr.Zero, true)
        {
            int err = NativeMethods.sqlite3_open_v2 (path, out handle, flags, IntPtr.Zero);
            // handle errors
        }

        public override bool IsInvalid {
            get {
                return (handle == IntPtr.Zero);
            }
        }

        // This will not be called if the handle is invalid. Note that this method should not throw.
        [ReliabilityContract (Consistency.WillNotCorruptState, Cer.MayFail)]
        protected override bool ReleaseHandle ()
        {
            NativeMethods.sqlite3_close (this);
            return true;
        }
    }

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (SqlitePtr db);

        // Open must take an IntPtr but all other methods take a type safe SqlitePtr.
        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private SqlitePtr m_database;
}
```",markdown,,,escalated,0.7580282,1
249,Static Analysis,2020-05-18T14:51:00-04:00,71828,2020-05-18T14:54:28-04:00,medium,false-positive,"tree = require('./tree');

  git = require('./git');

  module.exports = Upgrade = (function() {
    class Upgrade extends Command {",29,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/upgrade.js,file,32,32,2020-05-18T14:51:43-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,195706,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/upgrade.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\upgrade.js,file,16,9,32,32,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
250,Static Analysis,2020-05-18T14:51:00-04:00,71830,2020-05-18T14:54:28-04:00,medium,false-positive,"async = require('async');

  yargs = require('yargs');

  read = require('read');",7,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/upgrade.js,file,10,10,2020-05-18T14:51:43-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,195694,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/upgrade.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\upgrade.js,file,18,11,10,10,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
251,Static Analysis,2020-05-18T14:51:00-04:00,71831,2020-05-18T14:54:28-04:00,high,escalated,"parseOptions(argv) {
        var options;
        options = yargs(argv).wrap(Math.min(100, yargs.terminalWidth()));
        options.usage(""\nUsage: apm upgrade\n       apm upgrade --list\n       apm upgrade [<package_name>...]\n\nUpgrade out of date packages installed to ~/.atom/packages\n\nThis command lists the out of date packages and then prompts to install\navailable updates."");
        options.alias('c', 'confirm').boolean('confirm').default('confirm', true).describe('confirm', 'Confirm before installing updates');
        options.alias('h', 'help').describe('help', 'Print this usage message');
        options.alias('l', 'list').boolean('list').describe('list', 'List but don\'t install the outdated packages');",42,,,,CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'),http://cwevis.org/browse/79,79,Atom x64/resources/app/apm/lib/upgrade.js,file,45,45,2020-05-18T14:51:43-04:00,Static Analysis,b4414dd3b1087806bb332146e753f5917a3aec259e29c568ca289f9ab428d0d4,195724,high,,,CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS),http://cwevis.org/browse/80,80,HTML passed in to function 'options.usage',plain-text,Atom x64/resources/app/apm/lib/upgrade.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\upgrade.js,file,22,9,45,45,xss,no-mixed-html,ESLint,ESLINT-XSS-no-mixed-html,No mixed html,"Wanted a way to catch XSS issues in code before they end up in production.

## Rule Details

This rule aims to catch as many XSS issues by examining the code as possible.
The rule checks for mixed html/non-html content, unescaped input, etc.

The following patterns are considered warnings:

```js

// Mixed content
var x = '<div>' + input + '</div>';
$node.html( '<div>' + input + '</div>' );

// Unsafe container names.
var html = input;
var text = htmlInput;
displayValue( htmlInput );

// Checking certain expression parameters that might end up in the variables.
var htmlItems = [ input1, input2 ].join();
var textItems = [ '<div>', input, '</div>' ].join();
var tag = isNumbered ? '<ol>' : '<ul>';

// Checking function return values.
var createHtml = function( item ) { return item.name; }
var createBox = function( item ) { return '<div>' + encode( item ) + '</div>' }

```

The following patterns are not warnings:

```js

// Proper encoding
var html = '<div>' + encode( input ) + '</div>';
$node.html( '<div>' + encode( input ) + '</div>' );

// Proper container names
var html = '<img src=""happy.png"">';
var text = textbox.value;

```

## When Not To Use It

If you are creating a Node.js application that doesn't output any HTML, you can
safely disable this rule.

## Further Reading

- [XSS Prevention CHeat Sheet - OWASP](https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet)",markdown,rule-396ebe8bb0c3dc5d4eb2b5368a97688fdb0f2587416453645c3d06db2b216479,Cross-site Scripting (XSS),"Cross-site scripting (XSS) vulnerabilities occur when:
1. Untrusted data enters a web application, typically from a web request.
2. The web application dynamically generates a web page that contains this untrusted data.
3. During page generation, the application does not prevent the data from containing content that is executable by a web browser, such as JavaScript, HTML tags, HTML attributes, mouse events, Flash, ActiveX, etc.
4. A victim visits the generated web page through a web browser, which contains malicious script that was injected using the untrusted data.
5. Since the script comes from a web page that was sent by the web server, the victim's web browser executes the malicious script in the context of the web server's domain.
6. This effectively violates the intention of the web browser's same-origin policy, which states that scripts in one domain should not be able to access resources or run code in a different domain.
There are three main kinds of XSS:

*Reflected XSS (or Non-Persistent)*

The server reads data directly from the HTTP request and reflects it back in the HTTP response. Reflected XSS exploits occur when an attacker causes a victim to supply dangerous content to a vulnerable web application, which is then reflected back to the victim and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to the victim. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces a victim to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the victim, the content is executed by the victim's browser.

*Stored XSS (or Persistent)*

The application stores dangerous data in a database, message forum, visitor log, or other trusted data store. At a later time, the dangerous data is subsequently read back into the application and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. For example, the attacker might inject XSS into a log message, which might not be handled properly when an administrator views the logs.

*DOM-Based XSS*

In DOM-based XSS, the client performs the injection of XSS into the page; in the other types, the server performs the injection. DOM-based XSS generally involves server-controlled, trusted script that is sent to the client, such as Javascript that performs sanity checks on a form before the user submits it. If the server-supplied script processes user-supplied data and then injects it back into the web page (such as with dynamic HTML), then DOM-based XSS is possible.

Once the malicious script is injected, the attacker can perform a variety of malicious activities. The attacker could transfer private information, such as cookies that may include session information, from the victim's machine to the attacker. The attacker could send malicious requests to a web site on behalf of the victim, which could be especially dangerous to the site if the victim has administrator privileges to manage that site. Phishing attacks could be used to emulate trusted web sites and trick the victim into entering a password, allowing the attacker to compromise the victim's account on that web site. Finally, the script could exploit a vulnerability in the web browser itself possibly taking over the victim's machine, sometimes referred to as ""drive-by hacking.""

In many cases, the attack can be launched without the victim even being aware of it. Even with careful users, attackers frequently use a variety of methods to encode the malicious portion of the attack, such as URL encoding or Unicode, so the request looks less suspicious.

**Guidance**

To remedy XSS vulnerabilities, it is important to never use untrusted or unfiltered data within the code of a HTML page.

Untrusted data can originate not only form the client but potentially a third party or previously uploaded file etc.

Filtering of untrusted data typically involves converting special characters to their HTML entity encoded counterparts (however, other methods do exist, see references).

These special characters include:

* `&`
* `<`
* `>`
* `""`
* `'`
* `/`

An example of HTML entity encoding is converting `<` to `&lt;`.

Although it is possible to filter untrusted input, there are five locations within an HTML page where untrusted input (even if it has been filtered) should never be placed:

1. Directly in a script.
2. Inside an HTML comment.
3. In an attribute name.
4. In a tag name.
5. Directly in CSS.

Each of these locations have their own form of escaping and filtering.

Because many browsers attempt to implement XSS protection, any manual verification of this finding should be conducted using multiple different browsers and browser
versions.

**References**

- [WASC](http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting)
- [Secunia](http://secunia.com/advisories/9716/)
- [OWASP XSS Prevention Cheat Sheet](https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet)
- [OWASP DOM Based XSS](https://www.owasp.org/index.php/DOM_Based_XSS)
- [OWASP DOM Based XSS Prevention Cheat Sheet](https://www.owasp.org/index.php/DOM_based_XSS_Prevention_Cheat_Sheet)",markdown,,,escalated,0.8266207,1
252,Static Analysis,2020-05-18T14:51:00-04:00,71835,2020-05-18T14:54:28-04:00,medium,false-positive,"read = require('read');

  semver = require('semver');

  Git = require('git-utils');",11,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/upgrade.js,file,14,14,2020-05-18T14:51:43-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,195696,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/upgrade.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\upgrade.js,file,19,12,14,14,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
253,Static Analysis,2020-05-18T14:51:00-04:00,71842,2020-05-18T14:54:28-04:00,medium,false-positive,"fs = require('./fs');

  Install = require('./install');

  Packages = require('./packages');",21,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/upgrade.js,file,24,24,2020-05-18T14:51:43-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,195702,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/upgrade.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\upgrade.js,file,20,13,24,24,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
254,Static Analysis,2020-05-18T14:51:00-04:00,71845,2020-05-18T14:54:28-04:00,medium,false-positive,"semver = require('semver');

  Git = require('git-utils');

  Command = require('./command');",13,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/upgrade.js,file,16,16,2020-05-18T14:51:43-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,195697,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/upgrade.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\upgrade.js,file,16,9,16,16,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270798,0
255,Static Analysis,2020-05-18T14:51:00-04:00,71853,2020-05-18T14:54:28-04:00,medium,false-positive,"_ = require('underscore-plus');

  async = require('async');

  yargs = require('yargs');",5,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/upgrade.js,file,8,8,2020-05-18T14:51:43-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,195693,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/upgrade.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\upgrade.js,file,18,11,8,8,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270798,0
256,Static Analysis,2020-05-18T14:51:00-04:00,71856,2020-05-18T14:54:28-04:00,high,escalated,"folderIsRepo(pack) {
        var repoGitFolderPath;
        repoGitFolderPath = path.join(this.atomPackagesDirectory, pack.name, '.git');
        return fs.existsSync(repoGitFolderPath);
      }

      getLatestVersion(pack, callback) {",102,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/lib/upgrade.js,file,105,105,2020-05-18T14:51:43-04:00,Static Analysis,a8eb318301dc105f6b242fce363923637060c403e8c9c7b93b984891497b7744,195808,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Found fs.existsSync with non literal argument at index 0,plain-text,Atom x64/resources/app/apm/lib/upgrade.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\upgrade.js,file,29,16,105,105,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.96763015,1
257,Static Analysis,2020-05-18T14:51:00-04:00,71857,2020-05-18T14:54:28-04:00,medium,false-positive,"config = require('./apm');

  fs = require('./fs');

  Install = require('./install');",19,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/upgrade.js,file,22,22,2020-05-18T14:51:43-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,195701,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/upgrade.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\upgrade.js,file,15,8,22,22,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
258,Static Analysis,2020-05-18T14:51:00-04:00,71860,2020-05-18T14:54:28-04:00,medium,false-positive,"git = require('./git');

  module.exports = Upgrade = (function() {
    class Upgrade extends Command {
      constructor() {
        super();",31,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/upgrade.js,file,34,34,2020-05-18T14:51:43-04:00,Static Analysis,62173c3357301b64bcb7cb49ad65b9eeb8aa24356212b93fe0fe0166d3218ce7,195708,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'module' is not defined.,plain-text,Atom x64/resources/app/apm/lib/upgrade.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\upgrade.js,file,9,3,34,34,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.068299174,0
259,Static Analysis,2020-05-18T14:51:00-04:00,71861,2020-05-18T14:54:28-04:00,medium,false-positive,"yargs = require('yargs');

  read = require('read');

  semver = require('semver');",9,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/upgrade.js,file,12,12,2020-05-18T14:51:43-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,195695,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/upgrade.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\upgrade.js,file,17,10,12,12,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
260,Static Analysis,2020-05-18T14:51:00-04:00,71862,2020-05-18T14:54:28-04:00,medium,false-positive,"this.verbose = options.argv.verbose;
        if (this.verbose) {
          request.debug(true);
          process.env.NODE_DEBUG = 'request';
        }
        return this.loadInstalledAtomVersion(options, () => {
          if (this.installedAtomVersion) {",254,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/upgrade.js,file,257,257,2020-05-18T14:51:44-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,196040,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/upgrade.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\upgrade.js,file,18,11,257,257,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
261,Static Analysis,2020-05-18T14:51:00-04:00,71864,2020-05-18T14:54:28-04:00,medium,false-positive,"Packages = require('./packages');

  request = require('./request');

  tree = require('./tree');",25,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/upgrade.js,file,28,28,2020-05-18T14:51:43-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,195704,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/upgrade.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\upgrade.js,file,20,13,28,28,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
262,Static Analysis,2020-05-18T14:51:00-04:00,71870,2020-05-18T14:54:28-04:00,high,false-positive,"installCommands = [];
        verbose = this.verbose;
        for (i = 0, len = updates.length; i < len; i++) {
          ({pack, latestVersion} = updates[i]);
          (function(pack, latestVersion) {
            return installCommands.push(function(callback) {
              var commandArgs, ref;",227,,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/lib/upgrade.js,file,230,230,2020-05-18T14:51:44-04:00,Static Analysis,6569b353992e88510a975ec3412e07f9c2539e0cf8eb813d02c1c97e2a312d82,195999,high,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Generic Object Injection Sink,plain-text,Atom x64/resources/app/apm/lib/upgrade.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\upgrade.js,file,46,36,230,230,security,detect-object-injection,ESLint,ESLINT-SECURITY-detect-object-injection,Detect object injection,"Detects `variable[key]` as a left- or right-hand assignment operand.

More information: [The Dangers of Square Bracket Notation](https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/the-dangers-of-square-bracket-notation.md)",markdown,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.9251437,1
263,Static Analysis,2020-05-18T14:51:00-04:00,71876,2020-05-18T14:54:28-04:00,medium,false-positive,"Git = require('git-utils');

  Command = require('./command');

  config = require('./apm');",15,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/upgrade.js,file,18,18,2020-05-18T14:51:43-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,195698,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/upgrade.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\upgrade.js,file,20,13,18,18,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
264,Static Analysis,2020-05-18T14:51:00-04:00,71877,2020-05-18T14:54:28-04:00,high,escalated,"if (code !== 0) {
              return callback(new Error('Exit code: ' + code + ' - ' + stderr));
            }
            repo = Git.open(repoPath);
            sha = repo.getReferenceTarget(repo.getUpstreamBranch('refs/heads/master'));
            if (sha !== pack.apmInstallSource.sha) {
              return callback(null, sha);",169,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/lib/upgrade.js,file,172,172,2020-05-18T14:51:44-04:00,Static Analysis,b80ca388d465258c8abb19130f91ee150a36df47299916a74d04b1c7580ca12e,195919,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Found fs.open with non literal argument at index 0,plain-text,Atom x64/resources/app/apm/lib/upgrade.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\upgrade.js,file,28,20,172,172,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.9677861,1
265,Static Analysis,2020-05-18T14:51:00-04:00,71882,2020-05-18T14:54:28-04:00,medium,false-positive,"loadInstalledAtomVersion(options, callback) {
        if (options.argv.compatible) {
          return process.nextTick(() => {
            var version;
            version = this.normalizeVersion(options.argv.compatible);
            if (semver.valid(version)) {",86,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/upgrade.js,file,89,89,2020-05-18T14:51:43-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,195787,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/upgrade.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\upgrade.js,file,25,18,89,89,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
266,Static Analysis,2020-05-18T14:51:00-04:00,71883,2020-05-18T14:54:28-04:00,high,escalated,"latestVersion = pack.version;
            ref3 = (ref2 = body.versions) != null ? ref2 : {};
            for (version in ref3) {
              metadata = ref3[version];
              if (!semver.valid(version)) {
                continue;
              }",125,,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/lib/upgrade.js,file,128,128,2020-05-18T14:51:44-04:00,Static Analysis,6569b353992e88510a975ec3412e07f9c2539e0cf8eb813d02c1c97e2a312d82,195842,high,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Generic Object Injection Sink,plain-text,Atom x64/resources/app/apm/lib/upgrade.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\upgrade.js,file,39,26,128,128,security,detect-object-injection,ESLint,ESLINT-SECURITY-detect-object-injection,Detect object injection,"Detects `variable[key]` as a left- or right-hand assignment operand.

More information: [The Dangers of Square Bracket Notation](https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/the-dangers-of-square-bracket-notation.md)",markdown,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.9251437,1
267,Static Analysis,2020-05-18T14:51:00-04:00,71884,2020-05-18T14:54:28-04:00,medium,false-positive,"(function() {
  var Command, Git, Install, Packages, Upgrade, _, async, config, fs, git, path, read, request, semver, tree, yargs;

  path = require('path');

  _ = require('underscore-plus');",1,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/upgrade.js,file,4,4,2020-05-18T14:51:43-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,195691,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/upgrade.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\upgrade.js,file,17,10,4,4,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
268,Static Analysis,2020-05-18T14:51:00-04:00,71886,2020-05-18T14:54:28-04:00,medium,false-positive,"command = 'git';
          }
          args = ['fetch', 'origin', 'master'];
          git.addGitToEnv(process.env);
          return this.spawn(command, args, {
            cwd: repoPath
          }, function(code, stderr = '', stdout = '') {",161,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/upgrade.js,file,164,164,2020-05-18T14:51:44-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,195894,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/upgrade.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\upgrade.js,file,34,27,164,164,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
269,Static Analysis,2020-05-18T14:51:00-04:00,71887,2020-05-18T14:54:28-04:00,medium,false-positive,"request = require('./request');

  tree = require('./tree');

  git = require('./git');",27,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/upgrade.js,file,30,30,2020-05-18T14:51:43-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,195705,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/upgrade.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\upgrade.js,file,17,10,30,30,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
270,Static Analysis,2020-05-18T14:51:00-04:00,71888,2020-05-18T14:54:28-04:00,high,escalated,"ref = fs.list(this.atomPackagesDirectory);
        for (i = 0, len = ref.length; i < len; i++) {
          name = ref[i];
          if (pack = this.getIntalledPackage(name)) {
            packages.push(pack);
          }
        }",57,,,,CWE-697: Incorrect Comparison,http://cwevis.org/browse/697,697,Atom x64/resources/app/apm/lib/upgrade.js,file,60,60,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-c271f2bb931810eef633f7c736d1dd934fbd6ed5f62ac8d8ea39ade811190622,Comparison,,,,,escalated,0.9110538,1
271,Static Analysis,2020-05-18T14:51:00-04:00,71890,2020-05-18T14:54:28-04:00,medium,false-positive,"path = require('path');

  _ = require('underscore-plus');

  async = require('async');",3,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/upgrade.js,file,6,6,2020-05-18T14:51:43-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,195692,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/upgrade.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\upgrade.js,file,14,7,6,6,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
272,Static Analysis,2020-05-18T14:51:00-04:00,71897,2020-05-18T14:54:28-04:00,medium,false-positive,"Install = require('./install');

  Packages = require('./packages');

  request = require('./request');",23,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/upgrade.js,file,26,26,2020-05-18T14:51:43-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,195703,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/upgrade.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\upgrade.js,file,21,14,26,26,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
273,Static Analysis,2020-05-18T14:51:00-04:00,71898,2020-05-18T14:54:28-04:00,high,escalated,"return;
        }
        try {
          metadata = JSON.parse(fs.readFileSync(path.join(packageDirectory, 'package.json')));
          if ((metadata != null ? metadata.name : void 0) && (metadata != null ? metadata.version : void 0)) {
            return metadata;
          }",77,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/lib/upgrade.js,file,80,80,2020-05-18T14:51:43-04:00,Static Analysis,374ad040fff48d9edaa97052bf28a674b1f4e79af66a0448f1ab1699003790cd,195772,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Found fs.readFileSync with non literal argument at index 0,plain-text,Atom x64/resources/app/apm/lib/upgrade.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\upgrade.js,file,48,33,80,80,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.9758102,1
274,Static Analysis,2020-05-18T14:51:00-04:00,71899,2020-05-18T14:54:28-04:00,high,false-positive,"packages = [];
        ref = fs.list(this.atomPackagesDirectory);
        for (i = 0, len = ref.length; i < len; i++) {
          name = ref[i];
          if (pack = this.getIntalledPackage(name)) {
            packages.push(pack);
          }",56,,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/lib/upgrade.js,file,59,59,2020-05-18T14:51:43-04:00,Static Analysis,6569b353992e88510a975ec3412e07f9c2539e0cf8eb813d02c1c97e2a312d82,195754,high,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Generic Object Injection Sink,plain-text,Atom x64/resources/app/apm/lib/upgrade.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\upgrade.js,file,24,18,59,59,security,detect-object-injection,ESLint,ESLINT-SECURITY-detect-object-injection,Detect object injection,"Detects `variable[key]` as a left- or right-hand assignment operand.

More information: [The Dangers of Square Bracket Notation](https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/the-dangers-of-square-bracket-notation.md)",markdown,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.9251437,1
275,Static Analysis,2020-05-18T14:51:00-04:00,71901,2020-05-18T14:54:28-04:00,medium,false-positive,"Command = require('./command');

  config = require('./apm');

  fs = require('./fs');",17,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/upgrade.js,file,20,20,2020-05-18T14:51:43-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,195700,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/upgrade.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\upgrade.js,file,19,12,20,20,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
276,Static Analysis,2020-05-18T14:51:00-04:00,71909,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-388: 7PK - Errors,http://cwevis.org/browse/388,388,Microsoft/Alm/Gui/PasswordBoxHintAdorner/PasswordBoxHintAdorner,logical,,,2020-05-18T14:52:13-04:00,Static Analysis,f73cef352a0b2bf1d0cc5310f027978a051db5e56968ba97879cbcb8e22239bf,202643,medium,,,CWE-754: Improper Check for Unusual or Exceptional Conditions,http://cwevis.org/browse/754,754,"Every delegate passed to native code must include an exception block which spans the entire method and has a catch all block. Surround the entire method body with a try/catch block. An exception occurred while verifying this method. This failure can probably be ignored, it's most likely due to an uncommon code sequence in the method the rule didn't understand. Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index",plain-text,Microsoft/Alm/Gui/PasswordBoxHintAdorner/PasswordBoxHintAdorner,Microsoft/Alm/Gui/PasswordBoxHintAdorner/PasswordBoxHintAdorner,logical,,,,,,DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRule,Gendarme,GEND-DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRule,Delegates Passed To Native Code Must Include Exception Handling ,"Every delegate which is passed to native code must include an exception
block which spans the entire method and has a catch all handler.

**Bad** example:


```csharp
public void NativeCallback ()
{
    Console.WriteLine (""{0}"", 1);
}
```
**Good** example:


```csharp
public void NativeCallback ()
{
    try {
        Console.WriteLine (""{0}"", 1);
    }
    catch {
    }
}
```",markdown,rule-e3f0972459f483bc18a68eed953b03a6c7e7fb7e495bc2047dd97eaba40f966b,Error Handling,,,,,escalated,0.88051474,1
277,Static Analysis,2020-05-18T14:51:00-04:00,72016,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/Web/XmlTransform/XmlAttributePreservationDict/EnumerateAttributes,logical,,,2020-05-18T14:51:56-04:00,Static Analysis,ef830747e5551b2f0cf322560adc2bb59b9ab6e54cc06227b94c01d4f09142ad,200186,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,This disposable local is not guaranteed to be disposed of before the method returns. Use a 'using' statement or surround the local's usage with a try/finally block. Local of type 'XmlTextReader' is not disposed of (at least not locally).,plain-text,Microsoft/Web/XmlTransform/XmlAttributePreservationDict/EnumerateAttributes,Microsoft/Web/XmlTransform/XmlAttributePreservationDict/EnumerateAttributes,logical,,,,,,EnsureLocalDisposalRule,Gendarme,GEND-EnsureLocalDisposalRule,Ensure Local Disposal ,"This rule checks that disposable locals are always disposed of before
the method returns. Use a 'using' statement (or a try/finally block) to
guarantee local disposal even in the event an unhandled exception
occurs.

**Bad** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    DecodeHeader (stream);
    if (!DecodedHeader.HasContent) {
        return;
    }
    DecodeContent (stream);
    stream.Dispose ();
}
```
**Good** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        DecodeHeader (stream);
        if (!DecodedHeader.HasContent) {
            return;
        }
        DecodeContent (stream);
    }
}
```
**Bad** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    Decode (stream);
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
    stream.Dispose ();
}
```
**Good** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        Decode (stream);
    }
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.98028827,1
278,Static Analysis,2020-05-18T14:51:00-04:00,72018,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-189: Numeric Errors,http://cwevis.org/browse/189,189,SharpCompress/Compressors/Xz/XZFooter/Process,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,03ba04f65bdee74e716d09d64feb1f004a116c5543f675d9955d1297acbf5baf,201055,medium,,,CWE-190: Integer Overflow or Wraparound,http://cwevis.org/browse/190,190,This method casts the result of an integer multiplication into a larger integer. This may result in an overflow before the cast can be done. Cast the operands instead of the result.,plain-text,SharpCompress/Compressors/Xz/XZFooter/Process,SharpCompress/Compressors/Xz/XZFooter/Process,logical,,,,,,ReviewCastOnIntegerMultiplicationRule,Gendarme,GEND-ReviewCastOnIntegerMultiplicationRule,Review Cast On Integer Multiplication ,"This rule checks for integral multiply operations where the result is
cast to a larger integral type. It's safer instead to cast an operand to
the larger type to minimize the chance of overflow.

**Bad** example:


```csharp
public long Bad (int a, int b)
{
    // e.g. Bad (Int32.MaxInt, Int32.MaxInt) == 1
    return a * b;
}
```
**Good** example:


```csharp
public long Good (int a, int b)
{
    // e.g. Good (Int32.MaxInt, Int32.MaxInt) == 4611686014132420609
    return (long) a * b;
}
```",markdown,rule-87c4a91bc4c9e20c70f0637bd67a4d03975f25b3ec675b9cc13d0f04540c76a6,Numeric Error,,,,,escalated,0.9599974,1
279,Static Analysis,2020-05-18T14:51:00-04:00,72024,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Squirrel/UpdateManager/CreateUninstallerRegistryEntry,logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.98149246,1
280,Static Analysis,2020-05-18T14:51:00-04:00,72048,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-227: 7PK - API Abuse,http://cwevis.org/browse/227,227,Org/BouncyCastle/Crypto/DataLengthException/(self),logical,,,2020-05-18T14:51:57-04:00,Static Analysis,47a6df44d16eb182f816f23918542a817d2995bc2ddf0168976c20b9c8c63cb2,200675,medium,,,CWE-573: Improper Following of Specification by Caller,http://cwevis.org/browse/573,573,"The required constructor for ISerializable is not present in this type. Add a (private for sealed, protected otherwise) serialization constructor for this type. The required constructor for ISerializable is not present in this type.",plain-text,Org/BouncyCastle/Crypto/DataLengthException/(self),Org/BouncyCastle/Crypto/DataLengthException/(self),logical,,,,,,MissingSerializationConstructorRule,Gendarme,GEND-MissingSerializationConstructorRule,Missing Serialization Constructor ,"This rule checks for types that implement **System.ISerializable** but
don't provide a serialization constructor. The constructor is required
in order to make the type serializeable but cannot be enforced by the
interface. The serialization constructor should be **private** for
**sealed** types and **protected** for unsealed types.

**Bad** example:


```csharp
[Serializable]
public class Bad : ISerializable {
    public void GetObjectData (SerializationInfo info, StreamingContext context)
    {
    }
}
```
**Good** example (sealed):


```csharp
[Serializable]
public sealed class Good : ISerializable {
    private ClassWithConstructor (SerializationInfo info, StreamingContext context)
    {
    }

    public void GetObjectData (SerializationInfo info, StreamingContext context)
    {
    }
}
```
**Good** example:


```csharp
[Serializable]
public class Good : ISerializable {
    protected ClassWithConstructor (SerializationInfo info, StreamingContext context)
    {
    }

    public void GetObjectData (SerializationInfo info, StreamingContext context)
    {
    }
}
```",markdown,rule-dc56fd6c6aaaf7aef3e91a691e1f8bd8f7311763a2d3286fce16c6c5cf52b5e2,API Abuse,"The software uses an API in a manner contrary to its intended use.

An API is a contract between a caller and a callee. The most common forms of API misuse occurs when the caller does not honor its end of this contract. For example, if a program does not call chdir() after calling chroot(), it violates the contract that specifies how to change the active root directory in a secure fashion. Another good example of library abuse is expecting the callee to return trustworthy DNS information to the caller. In this case, the caller misuses the callee API by making certain assumptions about its behavior (that the return value can be used for authentication purposes). One can also violate the caller-callee contract from the other side. For example, if a coder subclasses SecureRandom and returns a non-random value, the contract is violated.",markdown,,,escalated,0.94911677,1
281,Static Analysis,2020-05-18T14:51:00-04:00,72055,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,GitHub/Shared/Helpers/HyperLinkCommand/ExecuteNavigateUrl,logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.98149246,1
282,Static Analysis,2020-05-18T14:51:00-04:00,72126,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Mono/Security/Cryptography/CryptoConvert/FromCapiPrivateKeyBlob,logical,,,2020-05-18T14:51:56-04:00,Static Analysis,bc5fa992a6ea506efe264bf9f2a2390b09c1d6a6a5a03a700f866e38afa9957f,200233,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,This disposable local is not guaranteed to be disposed of before the method returns. Use a 'using' statement or surround the local's usage with a try/finally block. Local of type 'RSA' is not disposed before being re-assigned.,plain-text,Mono/Security/Cryptography/CryptoConvert/FromCapiPrivateKeyBlob,Mono/Security/Cryptography/CryptoConvert/FromCapiPrivateKeyBlob,logical,,,,,,EnsureLocalDisposalRule,Gendarme,GEND-EnsureLocalDisposalRule,Ensure Local Disposal ,"This rule checks that disposable locals are always disposed of before
the method returns. Use a 'using' statement (or a try/finally block) to
guarantee local disposal even in the event an unhandled exception
occurs.

**Bad** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    DecodeHeader (stream);
    if (!DecodedHeader.HasContent) {
        return;
    }
    DecodeContent (stream);
    stream.Dispose ();
}
```
**Good** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        DecodeHeader (stream);
        if (!DecodedHeader.HasContent) {
            return;
        }
        DecodeContent (stream);
    }
}
```
**Bad** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    Decode (stream);
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
    stream.Dispose ();
}
```
**Good** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        Decode (stream);
    }
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.98059994,1
283,Static Analysis,2020-05-18T14:51:00-04:00,72131,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-189: Numeric Errors,http://cwevis.org/browse/189,189,SharpCompress/Compressors/PPMd/I1/PpmState/op_Subtraction,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,03ba04f65bdee74e716d09d64feb1f004a116c5543f675d9955d1297acbf5baf,201069,medium,,,CWE-190: Integer Overflow or Wraparound,http://cwevis.org/browse/190,190,This method casts the result of an integer multiplication into a larger integer. This may result in an overflow before the cast can be done. Cast the operands instead of the result.,plain-text,SharpCompress/Compressors/PPMd/I1/PpmState/op_Subtraction,SharpCompress/Compressors/PPMd/I1/PpmState/op_Subtraction,logical,,,,,,ReviewCastOnIntegerMultiplicationRule,Gendarme,GEND-ReviewCastOnIntegerMultiplicationRule,Review Cast On Integer Multiplication ,"This rule checks for integral multiply operations where the result is
cast to a larger integral type. It's safer instead to cast an operand to
the larger type to minimize the chance of overflow.

**Bad** example:


```csharp
public long Bad (int a, int b)
{
    // e.g. Bad (Int32.MaxInt, Int32.MaxInt) == 1
    return a * b;
}
```
**Good** example:


```csharp
public long Good (int a, int b)
{
    // e.g. Good (Int32.MaxInt, Int32.MaxInt) == 4611686014132420609
    return (long) a * b;
}
```",markdown,rule-87c4a91bc4c9e20c70f0637bd67a4d03975f25b3ec675b9cc13d0f04540c76a6,Numeric Error,,,,,escalated,0.9599974,1
284,Static Analysis,2020-05-18T14:51:00-04:00,72198,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-465: Pointer Issues,http://cwevis.org/browse/465,465,Mono/Options/Option/Parse,logical,,,2020-05-18T14:51:55-04:00,Static Analysis,a5fceea52596662e61c66f7abfad9036937d4f22e1a53681e48ab77fa50bb893,199792,medium,,,CWE-476: NULL Pointer Dereference,http://cwevis.org/browse/476,476,A visible method does not check its parameter(s) for null values. Since the caller is unknown you should always verify all of your parameters to protect yourself.,plain-text,Mono/Options/Option/Parse,Mono/Options/Option/Parse,logical,,,,,,CheckParametersNullityInVisibleMethodsRule,Gendarme,GEND-CheckParametersNullityInVisibleMethodsRule,Check Parameters Nullity In Visible Methods ,"This rule checks if all nullable parameters of visible methods are
compared with **null** before they get used. This reduce the likelyhood
of the runtime throwing a **NullReferenceException**.

**Bad** example:


```csharp
[DllImport (""message"")]
internal static extern byte [] Parse (string s, int length);

public bool TryParse (string s, out Message m)
{
    // is 's' is null then 's.Length' will throw a NullReferenceException
    // which a TryParse method should never do
    byte [] data = Parse (s, s.Length);
    if (data == null) {
        m = null;
        return false;
    }
    m = new Message (data);
    return true;
}
```
**Good** example:


```csharp
[DllImport (""message"")]
internal static extern byte [] Parse (string s, int length);

public bool TryParse (string s, out Message m)
{
    if (s == null) {
        m = null;
        return false;
    }
    byte [] data = Parse (s, s.Length);
    if (data == null) {
        m = null;
        return false;
    }
    m = new Message (data);
    return true;
}
```",markdown,rule-0dd0e028a5ce327b29cd3ffa9ef62c97353c7155364a9a4b89933187ee675fef,Invalid Pointer,,,,,escalated,0.56592375,1
285,Static Analysis,2020-05-18T14:51:00-04:00,72263,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-189: Numeric Errors,http://cwevis.org/browse/189,189,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/Native/SafeNCryptBuffer/ReadArray,logical,,,2020-05-18T14:52:00-04:00,Static Analysis,03ba04f65bdee74e716d09d64feb1f004a116c5543f675d9955d1297acbf5baf,202205,medium,,,CWE-190: Integer Overflow or Wraparound,http://cwevis.org/browse/190,190,This method casts the result of an integer multiplication into a larger integer. This may result in an overflow before the cast can be done. Cast the operands instead of the result.,plain-text,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/Native/SafeNCryptBuffer/ReadArray,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/Native/SafeNCryptBuffer/ReadArray,logical,,,,,,ReviewCastOnIntegerMultiplicationRule,Gendarme,GEND-ReviewCastOnIntegerMultiplicationRule,Review Cast On Integer Multiplication ,"This rule checks for integral multiply operations where the result is
cast to a larger integral type. It's safer instead to cast an operand to
the larger type to minimize the chance of overflow.

**Bad** example:


```csharp
public long Bad (int a, int b)
{
    // e.g. Bad (Int32.MaxInt, Int32.MaxInt) == 1
    return a * b;
}
```
**Good** example:


```csharp
public long Good (int a, int b)
{
    // e.g. Good (Int32.MaxInt, Int32.MaxInt) == 4611686014132420609
    return (long) a * b;
}
```",markdown,rule-87c4a91bc4c9e20c70f0637bd67a4d03975f25b3ec675b9cc13d0f04540c76a6,Numeric Error,,,,,escalated,0.9599974,1
286,Static Analysis,2020-05-18T14:51:00-04:00,72277,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-755: Improper Handling of Exceptional Conditions,http://cwevis.org/browse/755,755,Squirrel/DeltaPackageBuilder/verifyPatchedFile,logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,GEND-CheckNewExceptionWithoutThrowingRule,Check New Exception Without Throwing ,"This rule checks for exception objects which are created but not thrown,
not returned, and not passed to another method as an argument.

**Bad** example:


```csharp
void MissingThrow (object arg)
{
    if (arg == null) {
        new ArgumentNullException (""arg"");
    }
    DoWork (arg);
}
```
**Good** examples:


```csharp
void Throw (object arg)
{
    if (arg == null) {
        throw new ArgumentNullException (""arg"");
    }
    DoWork (arg);
}

Exception CreateException ()
{
    return new Exception ();
}
```",markdown,,,escalated,0.82145643,1
287,Static Analysis,2020-05-18T14:51:00-04:00,72279,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Mono/Cecil/EmbeddedResource/ReadStream,logical,,,2020-05-18T14:51:56-04:00,Static Analysis,0038154dc66022b9fff47a29da571c2d0b91e196ecb5f5658e5cec5d908f0001,200231,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,This disposable local is not guaranteed to be disposed of before the method returns. Use a 'using' statement or surround the local's usage with a try/finally block. Local of type 'MemoryStream' is not disposed of (at least not locally).,plain-text,Mono/Cecil/EmbeddedResource/ReadStream,Mono/Cecil/EmbeddedResource/ReadStream,logical,,,,,,EnsureLocalDisposalRule,Gendarme,GEND-EnsureLocalDisposalRule,Ensure Local Disposal ,"This rule checks that disposable locals are always disposed of before
the method returns. Use a 'using' statement (or a try/finally block) to
guarantee local disposal even in the event an unhandled exception
occurs.

**Bad** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    DecodeHeader (stream);
    if (!DecodedHeader.HasContent) {
        return;
    }
    DecodeContent (stream);
    stream.Dispose ();
}
```
**Good** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        DecodeHeader (stream);
        if (!DecodedHeader.HasContent) {
            return;
        }
        DecodeContent (stream);
    }
}
```
**Bad** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    Decode (stream);
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
    stream.Dispose ();
}
```
**Good** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        Decode (stream);
    }
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.98154014,1
288,Static Analysis,2020-05-18T14:51:00-04:00,72290,2020-05-18T14:54:28-04:00,medium,false-positive,"} catch (error1) {}
        }
        if (!name) {
          name = path.basename(process.cwd());
        }
        if (options.argv.force) {
          return this.unpublishPackage(name, version, callback);",116,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/unpublish.js,file,119,119,2020-05-18T14:51:43-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,195589,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/unpublish.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\unpublish.js,file,39,32,119,119,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
289,Static Analysis,2020-05-18T14:51:00-04:00,72291,2020-05-18T14:54:28-04:00,medium,false-positive,"yargs = require('yargs');

  auth = require('./auth');

  Command = require('./command');",7,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/unpublish.js,file,10,10,2020-05-18T14:51:43-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,195459,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/unpublish.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\unpublish.js,file,17,10,10,10,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
290,Static Analysis,2020-05-18T14:51:00-04:00,72292,2020-05-18T14:54:28-04:00,medium,false-positive,"(function() {
  var Command, Unpublish, auth, config, fs, path, readline, request, yargs;

  path = require('path');

  readline = require('readline');",1,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/unpublish.js,file,4,4,2020-05-18T14:51:43-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,195451,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/unpublish.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\unpublish.js,file,17,10,4,4,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
291,Static Analysis,2020-05-18T14:51:00-04:00,72293,2020-05-18T14:54:28-04:00,medium,false-positive,"prompt(question, callback) {
        var prompt;
        prompt = readline.createInterface(process.stdin, process.stdout);
        return prompt.question(question, function(answer) {
          prompt.close();
          return callback(answer);",91,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/unpublish.js,file,94,94,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.17391245,0
292,Static Analysis,2020-05-18T14:51:00-04:00,72304,2020-05-18T14:54:28-04:00,medium,false-positive,"fs = require('./fs');

  request = require('./request');

  module.exports = Unpublish = (function() {
    class Unpublish extends Command {",15,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/unpublish.js,file,18,18,2020-05-18T14:51:43-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,195465,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/unpublish.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\unpublish.js,file,20,13,18,18,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
293,Static Analysis,2020-05-18T14:51:00-04:00,72307,2020-05-18T14:54:28-04:00,medium,false-positive,"if (packageVersion) {
          packageLabel += `@${packageVersion}`;
        }
        process.stdout.write(`Unpublishing ${packageLabel} `);
        return auth.getToken((error, token) => {
          var options;
          if (error != null) {",33,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/unpublish.js,file,36,36,2020-05-18T14:51:43-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,195500,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/unpublish.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\unpublish.js,file,16,9,36,36,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
294,Static Analysis,2020-05-18T14:51:00-04:00,72309,2020-05-18T14:54:28-04:00,medium,false-positive,"auth = require('./auth');

  Command = require('./command');

  config = require('./apm');",9,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/unpublish.js,file,12,12,2020-05-18T14:51:43-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,195460,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/unpublish.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\unpublish.js,file,20,13,12,12,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
295,Static Analysis,2020-05-18T14:51:00-04:00,72312,2020-05-18T14:54:28-04:00,medium,false-positive,"path = require('path');

  readline = require('readline');

  yargs = require('yargs');",3,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/unpublish.js,file,6,6,2020-05-18T14:51:43-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,195453,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/unpublish.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\unpublish.js,file,21,14,6,6,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
296,Static Analysis,2020-05-18T14:51:00-04:00,72313,2020-05-18T14:54:28-04:00,medium,false-positive,"request = require('./request');

  module.exports = Unpublish = (function() {
    class Unpublish extends Command {
      parseOptions(argv) {
        var options;",17,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/unpublish.js,file,20,20,2020-05-18T14:51:43-04:00,Static Analysis,62173c3357301b64bcb7cb49ad65b9eeb8aa24356212b93fe0fe0166d3218ce7,195467,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'module' is not defined.,plain-text,Atom x64/resources/app/apm/lib/unpublish.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\unpublish.js,file,9,3,20,20,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.068299174,0
297,Static Analysis,2020-05-18T14:51:00-04:00,72314,2020-05-18T14:54:28-04:00,medium,false-positive,"Command = require('./command');

  config = require('./apm');

  fs = require('./fs');",11,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/unpublish.js,file,14,14,2020-05-18T14:51:43-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,195461,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/unpublish.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\unpublish.js,file,19,12,14,14,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
298,Static Analysis,2020-05-18T14:51:00-04:00,72315,2020-05-18T14:54:28-04:00,high,escalated,"parseOptions(argv) {
        var options;
        options = yargs(argv).wrap(Math.min(100, yargs.terminalWidth()));
        options.usage(""Usage: apm unpublish [<package_name>]\n       apm unpublish <package_name>@<package_version>\n\nRemove a published package or package version from the atom.io registry.\n\nThe package in the current working directory will be used if no package\nname is specified."");
        options.alias('h', 'help').describe('help', 'Print this usage message');
        return options.alias('f', 'force').boolean('force').describe('force', 'Do not prompt for confirmation');
      }",22,,,,CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'),http://cwevis.org/browse/79,79,Atom x64/resources/app/apm/lib/unpublish.js,file,25,25,2020-05-18T14:51:43-04:00,Static Analysis,b4414dd3b1087806bb332146e753f5917a3aec259e29c568ca289f9ab428d0d4,195480,high,,,CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS),http://cwevis.org/browse/80,80,HTML passed in to function 'options.usage',plain-text,Atom x64/resources/app/apm/lib/unpublish.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\unpublish.js,file,22,9,25,25,xss,no-mixed-html,ESLint,ESLINT-XSS-no-mixed-html,No mixed html,"Wanted a way to catch XSS issues in code before they end up in production.

## Rule Details

This rule aims to catch as many XSS issues by examining the code as possible.
The rule checks for mixed html/non-html content, unescaped input, etc.

The following patterns are considered warnings:

```js

// Mixed content
var x = '<div>' + input + '</div>';
$node.html( '<div>' + input + '</div>' );

// Unsafe container names.
var html = input;
var text = htmlInput;
displayValue( htmlInput );

// Checking certain expression parameters that might end up in the variables.
var htmlItems = [ input1, input2 ].join();
var textItems = [ '<div>', input, '</div>' ].join();
var tag = isNumbered ? '<ol>' : '<ul>';

// Checking function return values.
var createHtml = function( item ) { return item.name; }
var createBox = function( item ) { return '<div>' + encode( item ) + '</div>' }

```

The following patterns are not warnings:

```js

// Proper encoding
var html = '<div>' + encode( input ) + '</div>';
$node.html( '<div>' + encode( input ) + '</div>' );

// Proper container names
var html = '<img src=""happy.png"">';
var text = textbox.value;

```

## When Not To Use It

If you are creating a Node.js application that doesn't output any HTML, you can
safely disable this rule.

## Further Reading

- [XSS Prevention CHeat Sheet - OWASP](https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet)",markdown,rule-396ebe8bb0c3dc5d4eb2b5368a97688fdb0f2587416453645c3d06db2b216479,Cross-site Scripting (XSS),"Cross-site scripting (XSS) vulnerabilities occur when:
1. Untrusted data enters a web application, typically from a web request.
2. The web application dynamically generates a web page that contains this untrusted data.
3. During page generation, the application does not prevent the data from containing content that is executable by a web browser, such as JavaScript, HTML tags, HTML attributes, mouse events, Flash, ActiveX, etc.
4. A victim visits the generated web page through a web browser, which contains malicious script that was injected using the untrusted data.
5. Since the script comes from a web page that was sent by the web server, the victim's web browser executes the malicious script in the context of the web server's domain.
6. This effectively violates the intention of the web browser's same-origin policy, which states that scripts in one domain should not be able to access resources or run code in a different domain.
There are three main kinds of XSS:

*Reflected XSS (or Non-Persistent)*

The server reads data directly from the HTTP request and reflects it back in the HTTP response. Reflected XSS exploits occur when an attacker causes a victim to supply dangerous content to a vulnerable web application, which is then reflected back to the victim and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to the victim. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces a victim to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the victim, the content is executed by the victim's browser.

*Stored XSS (or Persistent)*

The application stores dangerous data in a database, message forum, visitor log, or other trusted data store. At a later time, the dangerous data is subsequently read back into the application and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. For example, the attacker might inject XSS into a log message, which might not be handled properly when an administrator views the logs.

*DOM-Based XSS*

In DOM-based XSS, the client performs the injection of XSS into the page; in the other types, the server performs the injection. DOM-based XSS generally involves server-controlled, trusted script that is sent to the client, such as Javascript that performs sanity checks on a form before the user submits it. If the server-supplied script processes user-supplied data and then injects it back into the web page (such as with dynamic HTML), then DOM-based XSS is possible.

Once the malicious script is injected, the attacker can perform a variety of malicious activities. The attacker could transfer private information, such as cookies that may include session information, from the victim's machine to the attacker. The attacker could send malicious requests to a web site on behalf of the victim, which could be especially dangerous to the site if the victim has administrator privileges to manage that site. Phishing attacks could be used to emulate trusted web sites and trick the victim into entering a password, allowing the attacker to compromise the victim's account on that web site. Finally, the script could exploit a vulnerability in the web browser itself possibly taking over the victim's machine, sometimes referred to as ""drive-by hacking.""

In many cases, the attack can be launched without the victim even being aware of it. Even with careful users, attackers frequently use a variety of methods to encode the malicious portion of the attack, such as URL encoding or Unicode, so the request looks less suspicious.

**Guidance**

To remedy XSS vulnerabilities, it is important to never use untrusted or unfiltered data within the code of a HTML page.

Untrusted data can originate not only form the client but potentially a third party or previously uploaded file etc.

Filtering of untrusted data typically involves converting special characters to their HTML entity encoded counterparts (however, other methods do exist, see references).

These special characters include:

* `&`
* `<`
* `>`
* `""`
* `'`
* `/`

An example of HTML entity encoding is converting `<` to `&lt;`.

Although it is possible to filter untrusted input, there are five locations within an HTML page where untrusted input (even if it has been filtered) should never be placed:

1. Directly in a script.
2. Inside an HTML comment.
3. In an attribute name.
4. In a tag name.
5. Directly in CSS.

Each of these locations have their own form of escaping and filtering.

Because many browsers attempt to implement XSS protection, any manual verification of this finding should be conducted using multiple different browsers and browser
versions.

**References**

- [WASC](http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting)
- [Secunia](http://secunia.com/advisories/9716/)
- [OWASP XSS Prevention Cheat Sheet](https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet)
- [OWASP DOM Based XSS](https://www.owasp.org/index.php/DOM_Based_XSS)
- [OWASP DOM Based XSS Prevention Cheat Sheet](https://www.owasp.org/index.php/DOM_based_XSS_Prevention_Cheat_Sheet)",markdown,,,escalated,0.8266207,1
299,Static Analysis,2020-05-18T14:51:00-04:00,72316,2020-05-18T14:54:28-04:00,medium,false-positive,"readline = require('readline');

  yargs = require('yargs');

  auth = require('./auth');",5,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/unpublish.js,file,8,8,2020-05-18T14:51:43-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,195456,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/unpublish.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\unpublish.js,file,18,11,8,8,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
300,Static Analysis,2020-05-18T14:51:00-04:00,72317,2020-05-18T14:54:28-04:00,medium,false-positive,"config = require('./apm');

  fs = require('./fs');

  request = require('./request');",13,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/unpublish.js,file,16,16,2020-05-18T14:51:43-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,195463,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/unpublish.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\unpublish.js,file,15,8,16,16,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
301,Static Analysis,2020-05-18T14:51:00-04:00,72398,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Compressors/Rar/RarCrcStream/GetCrc,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201141,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Compressors/Rar/RarCrcStream/GetCrc,SharpCompress/Compressors/Rar/RarCrcStream/GetCrc,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
302,Static Analysis,2020-05-18T14:51:00-04:00,72401,2020-05-18T14:54:28-04:00,high,escalated,,,,,,CWE-227: 7PK - API Abuse,http://cwevis.org/browse/227,227,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/Native/NCryptNative/UnsafeNativeMethods/NCryptFreeBuffer,logical,,,2020-05-18T14:52:00-04:00,Static Analysis,dbd57bbd7b01d2cdc8d58222b94308e03da707a5c7a5e9eab6acb7a083c63ff7,202212,high,,,CWE-676: Use of Potentially Dangerous Function,http://cwevis.org/browse/676,676,This type or method is decorated with [SuppressUnmanagedCodeSecurity] which reduce the number of security checks done when unmanaged code is called. Ensure that use of this attribute does not compromise the security of the application.,plain-text,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/Native/NCryptNative/UnsafeNativeMethods/NCryptFreeBuffer,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/Native/NCryptNative/UnsafeNativeMethods/NCryptFreeBuffer,logical,,,,,,ReviewSuppressUnmanagedCodeSecurityUsageRule,Gendarme,GEND-ReviewSuppressUnmanagedCodeSecurityUsageRule,Review Suppress Unmanaged Code Security Usage ,"This rule fires if a type or method is decorated with the
**[SuppressUnmanagedCodeSecurity]**attribute. This attribute reduces the
security checks done when executing unmanaged code and its usage should
be reviewed to confirm that no exploitable security holes are present.

Example:


```csharp
[SuppressUnmanagedCodeSecurity]
public class Safe {
    [DllImport (""User32.dll"")]
    static extern Boolean MessageBeep (UInt32 beepType);
}
```",markdown,rule-dc56fd6c6aaaf7aef3e91a691e1f8bd8f7311763a2d3286fce16c6c5cf52b5e2,API Abuse,"The software uses an API in a manner contrary to its intended use.

An API is a contract between a caller and a callee. The most common forms of API misuse occurs when the caller does not honor its end of this contract. For example, if a program does not call chdir() after calling chroot(), it violates the contract that specifies how to change the active root directory in a secure fashion. Another good example of library abuse is expecting the callee to return trustworthy DNS information to the caller. In this case, the caller misuses the callee API by making certain assumptions about its behavior (that the return value can be used for authentication purposes). One can also violate the caller-callee contract from the other side. For example, if a coder subclasses SecureRandom and returns a non-random value, the contract is violated.",markdown,,,escalated,0.9466878,1
303,Static Analysis,2020-05-18T14:51:00-04:00,72531,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Writers/Zip/ZipWriter/WriteToStream,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201114,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Writers/Zip/ZipWriter/WriteToStream,SharpCompress/Writers/Zip/ZipWriter/WriteToStream,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
304,Static Analysis,2020-05-18T14:51:00-04:00,72545,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Common/Zip/PkwareTraditionalCryptoStream/Read,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201182,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Common/Zip/PkwareTraditionalCryptoStream/Read,SharpCompress/Common/Zip/PkwareTraditionalCryptoStream/Read,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
305,Static Analysis,2020-05-18T14:51:00-04:00,72561,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Compressors/Rar/RarCrcStream/Read,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201143,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Compressors/Rar/RarCrcStream/Read,SharpCompress/Compressors/Rar/RarCrcStream/Read,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
306,Static Analysis,2020-05-18T14:51:00-04:00,72615,2020-05-18T14:54:28-04:00,medium,false-positive,"yargs = require('yargs');

  Q = require('q');

  read = require('read');",6,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/login.js,file,9,9,2020-05-18T14:51:36-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,193635,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/login.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\login.js,file,14,7,9,9,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
307,Static Analysis,2020-05-18T14:51:00-04:00,72617,2020-05-18T14:54:28-04:00,medium,false-positive,"_ = require('underscore-plus');

  yargs = require('yargs');

  Q = require('q');",4,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/login.js,file,7,7,2020-05-18T14:51:36-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,193633,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/login.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\login.js,file,18,11,7,7,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
308,Static Analysis,2020-05-18T14:51:00-04:00,72618,2020-05-18T14:54:28-04:00,medium,false-positive,"Q = require('q');

  read = require('read');

  open = require('open');",8,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/login.js,file,11,11,2020-05-18T14:51:36-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,193637,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/login.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\login.js,file,17,10,11,11,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
309,Static Analysis,2020-05-18T14:51:00-04:00,72619,2020-05-18T14:54:28-04:00,medium,false-positive,"auth = require('./auth');

  Command = require('./command');

  module.exports = Login = (function() {
    class Login extends Command {",14,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/login.js,file,17,17,2020-05-18T14:51:36-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,193641,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/login.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\login.js,file,20,13,17,17,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
310,Static Analysis,2020-05-18T14:51:00-04:00,72620,2020-05-18T14:54:28-04:00,medium,false-positive,"var Command, Login, Q, _, auth, open, read, yargs,
    boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

  _ = require('underscore-plus');

  yargs = require('yargs');",2,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/login.js,file,5,5,2020-05-18T14:51:36-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,193631,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/login.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\login.js,file,14,7,5,5,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
311,Static Analysis,2020-05-18T14:51:00-04:00,72622,2020-05-18T14:54:28-04:00,medium,false-positive,"read = require('read');

  open = require('open');

  auth = require('./auth');",10,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/login.js,file,13,13,2020-05-18T14:51:36-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,193639,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/login.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\login.js,file,17,10,13,13,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
312,Static Analysis,2020-05-18T14:51:00-04:00,72623,2020-05-18T14:54:28-04:00,medium,false-positive,"open = require('open');

  auth = require('./auth');

  Command = require('./command');",12,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/login.js,file,15,15,2020-05-18T14:51:36-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,193640,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/login.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\login.js,file,17,10,15,15,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
313,Static Analysis,2020-05-18T14:51:00-04:00,72625,2020-05-18T14:54:28-04:00,medium,false-positive,"if (!token) {
          throw new Error(""Token is required"");
        }
        process.stdout.write('Saving token to Keychain ');
        auth.saveToken(token);
        this.logSuccess();
        return Q(token);",102,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/login.js,file,105,105,2020-05-18T14:51:36-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,193649,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/login.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\login.js,file,16,9,105,105,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
314,Static Analysis,2020-05-18T14:51:00-04:00,72627,2020-05-18T14:54:28-04:00,medium,false-positive,"Command = require('./command');

  module.exports = Login = (function() {
    class Login extends Command {
      constructor() {
        super(...arguments);",16,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/login.js,file,19,19,2020-05-18T14:51:36-04:00,Static Analysis,62173c3357301b64bcb7cb49ad65b9eeb8aa24356212b93fe0fe0166d3218ce7,193643,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'module' is not defined.,plain-text,Atom x64/resources/app/apm/lib/login.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\login.js,file,9,3,19,19,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.068299174,0
315,Static Analysis,2020-05-18T14:51:00-04:00,72670,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Squirrel/Update/WINTRUST_FILE_INFO/(self),logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.98149246,1
316,Static Analysis,2020-05-18T14:51:00-04:00,72671,2020-05-18T14:54:28-04:00,high,escalated,,,,,,CWE-695: Use of Low-Level Functionality,http://cwevis.org/browse/695,695,Squirrel/Update/WINTRUST_FILE_INFO/(self),logical,,,2020-05-18T14:51:57-04:00,Static Analysis,3ac9036736202c636e5a647bb8073bf5337a353e654d9216f8af1cf9293e2f3b,200962,high,,,CWE-695: Use of Low-Level Functionality,http://cwevis.org/browse/695,695,The type uses System.IntPtr or System.UIntPtr instead of System.Runtime.InteropServices.SafeHandle. Consider changing the code to use SafeHandle.,plain-text,Squirrel/Update/WINTRUST_FILE_INFO/(self),Squirrel/Update/WINTRUST_FILE_INFO/(self),logical,,,,,,PreferSafeHandleRule,Gendarme,GEND-PreferSafeHandleRule,Prefer Safe Handle ,"In general it is best to interop with native code using
**System.Runtime.InteropServices.SafeHandle** instead of
**System.IntPtr** or **System.UIntPtr** because:

SafeHandles are type safe.
SafeHandles are guaranteed to be disposed of during exceptional
conditions like a thread aborting unexpectedly or a stack overflow.
SafeHandles are not vulnerable to reycle attacks.
You don't need to write a finalizer which can be tricky to do because
they execute within their own thread, may execute on partially
constructed objects, and normally tear down the application if you allow
an exception to escape from them.


 **Bad** example:


```csharp
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable.
public sealed class Database {
    ~Database ()
    {
        // This will execute even if the ctor throws so it is important to check
        // to see if the fields are initialized.
        if (m_database != IntPtr.Zero) {
            NativeMethods.sqlite3_close (m_database);
        }
    }

    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        int err = NativeMethods.sqlite3_open_v2 (path, out m_database, flags, IntPtr.Zero);
        // handle errors
    }

    // exec and query methods would go here

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (IntPtr db);

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private IntPtr m_database;
}
```
**Good** example:


```csharp
using System.Runtime.ConstrainedExecution;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable, but you do not need to implement a finalizer because
// SafeHandle will take care of the cleanup.
internal sealed class Database {
    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        m_database = new SqlitePtr (path, flags);
    }

    // exec and query methods would go here

    // This corresponds to a native sqlite3*.
    [SecurityPermission (SecurityAction.InheritanceDemand, UnmanagedCode = true)]
    [SecurityPermission (SecurityAction.Demand, UnmanagedCode = true)]
    private sealed class SqlitePtr : SafeHandle {
        public SqlitePtr (string path, NativeMethods.OpenFlags flags) : base (IntPtr.Zero, true)
        {
            int err = NativeMethods.sqlite3_open_v2 (path, out handle, flags, IntPtr.Zero);
            // handle errors
        }

        public override bool IsInvalid {
            get {
                return (handle == IntPtr.Zero);
            }
        }

        // This will not be called if the handle is invalid. Note that this method should not throw.
        [ReliabilityContract (Consistency.WillNotCorruptState, Cer.MayFail)]
        protected override bool ReleaseHandle ()
        {
            NativeMethods.sqlite3_close (this);
            return true;
        }
    }

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (SqlitePtr db);

        // Open must take an IntPtr but all other methods take a type safe SqlitePtr.
        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private SqlitePtr m_database;
}
```",markdown,GEND-PreferSafeHandleRule,Prefer Safe Handle ,"In general it is best to interop with native code using
**System.Runtime.InteropServices.SafeHandle** instead of
**System.IntPtr** or **System.UIntPtr** because:

SafeHandles are type safe.
SafeHandles are guaranteed to be disposed of during exceptional
conditions like a thread aborting unexpectedly or a stack overflow.
SafeHandles are not vulnerable to reycle attacks.
You don't need to write a finalizer which can be tricky to do because
they execute within their own thread, may execute on partially
constructed objects, and normally tear down the application if you allow
an exception to escape from them.


 **Bad** example:


```csharp
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable.
public sealed class Database {
    ~Database ()
    {
        // This will execute even if the ctor throws so it is important to check
        // to see if the fields are initialized.
        if (m_database != IntPtr.Zero) {
            NativeMethods.sqlite3_close (m_database);
        }
    }

    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        int err = NativeMethods.sqlite3_open_v2 (path, out m_database, flags, IntPtr.Zero);
        // handle errors
    }

    // exec and query methods would go here

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (IntPtr db);

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private IntPtr m_database;
}
```
**Good** example:


```csharp
using System.Runtime.ConstrainedExecution;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable, but you do not need to implement a finalizer because
// SafeHandle will take care of the cleanup.
internal sealed class Database {
    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        m_database = new SqlitePtr (path, flags);
    }

    // exec and query methods would go here

    // This corresponds to a native sqlite3*.
    [SecurityPermission (SecurityAction.InheritanceDemand, UnmanagedCode = true)]
    [SecurityPermission (SecurityAction.Demand, UnmanagedCode = true)]
    private sealed class SqlitePtr : SafeHandle {
        public SqlitePtr (string path, NativeMethods.OpenFlags flags) : base (IntPtr.Zero, true)
        {
            int err = NativeMethods.sqlite3_open_v2 (path, out handle, flags, IntPtr.Zero);
            // handle errors
        }

        public override bool IsInvalid {
            get {
                return (handle == IntPtr.Zero);
            }
        }

        // This will not be called if the handle is invalid. Note that this method should not throw.
        [ReliabilityContract (Consistency.WillNotCorruptState, Cer.MayFail)]
        protected override bool ReleaseHandle ()
        {
            NativeMethods.sqlite3_close (this);
            return true;
        }
    }

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (SqlitePtr db);

        // Open must take an IntPtr but all other methods take a type safe SqlitePtr.
        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private SqlitePtr m_database;
}
```",markdown,,,escalated,0.8318374,1
317,Static Analysis,2020-05-18T14:51:00-04:00,72729,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Squirrel/Shell/ShellLink/SetAppUserModelId,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201269,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Squirrel/Shell/ShellLink/SetAppUserModelId,Squirrel/Shell/ShellLink/SetAppUserModelId,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
318,Static Analysis,2020-05-18T14:51:00-04:00,72736,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Squirrel/Bsdiff/WrappingStream/Write,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201284,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Squirrel/Bsdiff/WrappingStream/Write,Squirrel/Bsdiff/WrappingStream/Write,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
319,Static Analysis,2020-05-18T14:51:00-04:00,72780,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/Web/XmlTransform/XmlAttributePreservingWriter/Flush,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201211,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Microsoft/Web/XmlTransform/XmlAttributePreservingWriter/Flush,Microsoft/Web/XmlTransform/XmlAttributePreservingWriter/Flush,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
320,Static Analysis,2020-05-18T14:51:00-04:00,72876,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,NuGet/ZipPackage/GetSupportedFrameworks,logical,,,2020-05-18T14:51:56-04:00,Static Analysis,7fd5ac540fc6141f822ec4930c13a54b311e1f77922ca173e0ea499c3967223c,200218,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,This disposable local is not guaranteed to be disposed of before the method returns. Use a 'using' statement or surround the local's usage with a try/finally block. Local of type 'Package' is not disposed of (is this a fluent-like API ?).,plain-text,NuGet/ZipPackage/GetSupportedFrameworks,NuGet/ZipPackage/GetSupportedFrameworks,logical,,,,,,EnsureLocalDisposalRule,Gendarme,GEND-EnsureLocalDisposalRule,Ensure Local Disposal ,"This rule checks that disposable locals are always disposed of before
the method returns. Use a 'using' statement (or a try/finally block) to
guarantee local disposal even in the event an unhandled exception
occurs.

**Bad** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    DecodeHeader (stream);
    if (!DecodedHeader.HasContent) {
        return;
    }
    DecodeContent (stream);
    stream.Dispose ();
}
```
**Good** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        DecodeHeader (stream);
        if (!DecodedHeader.HasContent) {
            return;
        }
        DecodeContent (stream);
    }
}
```
**Bad** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    Decode (stream);
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
    stream.Dispose ();
}
```
**Good** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        Decode (stream);
    }
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.9818587,1
321,Static Analysis,2020-05-18T14:51:00-04:00,72880,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-227: 7PK - API Abuse,http://cwevis.org/browse/227,227,Mono/Cecil/ResolutionException/(self),logical,,,2020-05-18T14:51:56-04:00,Static Analysis,fce232a5b4bac794dbecd71cb13108c24f47cd5b80a47b79890f33963df64c17,200337,medium,,,CWE-573: Improper Following of Specification by Caller,http://cwevis.org/browse/573,573,"Although you are implementing the ISerializable interface, there are some fields that aren't going to be serialized and aren't marked with the [NonSerialized] attribute. Either add the [NonSerialized] attribute to the field or serialize it. This will help developers better understand your code and make errors easier to find.",plain-text,Mono/Cecil/ResolutionException/(self),Mono/Cecil/ResolutionException/(self),logical,,,,,,ImplementISerializableCorrectlyRule,Gendarme,GEND-ImplementISerializableCorrectlyRule,Implement ISerializable Correctly ,"This rule checks for types that implement **ISerializable**. Such types
serialize their data by implementing **GetObjectData**. This rule
verifies that every instance field, not decorated with the
**[NonSerialized]**attribute is serialized by the **GetObjectData**
method. This rule will also warn if the type is unsealed and the
**GetObjectData** is not **virtual**.

**Bad** example:


```csharp
[Serializable]
public class Bad : ISerializable {
    int foo;
    string bar;

    protected Bad (SerializationInfo info, StreamingContext context)
    {
        foo = info.GetInt32 (""foo"");
    }

    // extensibility is limited since GetObjectData is not virtual:
    // any type inheriting won't be able to serialized additional fields
    public void GetObjectData (SerializationInfo info, StreamingContext context)
    {
        info.AddValue (""foo"", foo);
        // 'bar' is not serialized, if not needed then the field should
        // be decorated with [NotSerialized]
    }
}
```
**Good** example (virtual and not serialized):


```csharp
[Serializable]
public class Good : ISerializable {
    int foo;
    [NotSerialized]
    string bar;

    protected Good (SerializationInfo info, StreamingContext context)
    {
        foo = info.GetInt32 (""foo"");
    }

    public virtual void GetObjectData (SerializationInfo info, StreamingContext context)
    {
        info.AddValue (""foo"", foo);
    }
}
```
**Good** example (sealed type and serialized):


```csharp
[Serializable]
public sealed class Good : ISerializable {
    int foo;
    string bar;

    protected Good (SerializationInfo info, StreamingContext context)
    {
        foo = info.GetInt32 (""foo"");
    }

    public void GetObjectData (SerializationInfo info, StreamingContext context)
    {
        info.AddValue (""foo"", foo);
        info.AddValue (""bar"", bar);
    }
}
```",markdown,rule-dc56fd6c6aaaf7aef3e91a691e1f8bd8f7311763a2d3286fce16c6c5cf52b5e2,API Abuse,"The software uses an API in a manner contrary to its intended use.

An API is a contract between a caller and a callee. The most common forms of API misuse occurs when the caller does not honor its end of this contract. For example, if a program does not call chdir() after calling chroot(), it violates the contract that specifies how to change the active root directory in a secure fashion. Another good example of library abuse is expecting the callee to return trustworthy DNS information to the caller. In this case, the caller misuses the callee API by making certain assumptions about its behavior (that the return value can be used for authentication purposes). One can also violate the caller-callee contract from the other side. For example, if a coder subclasses SecureRandom and returns a non-random value, the contract is violated.",markdown,,,escalated,0.9353106,1
322,Static Analysis,2020-05-18T14:51:00-04:00,72902,2020-05-18T14:54:28-04:00,high,escalated,,,,,,CWE-693: Protection Mechanism Failure,http://cwevis.org/browse/693,693,Squirrel/NativeMethods/BeginUpdateResource,logical,,,2020-05-18T14:51:57-04:00,Static Analysis,f86fbdb41e9afefe6cabdb29cb9b5c66213d7779f1f399356f4acdfdeed25cca,200496,high,,,CWE-693: Protection Mechanism Failure,http://cwevis.org/browse/693,693,"Marshaling information for string types is missing and what is required may be different from what you expected the default to be. Add [DllImport CharSet=] to the method or [MarshalAs] on the parameter(s) Parameter 'pFileName', of type 'String', does not have [MarshalAs] attribute, yet no [DllImport CharSet=] is set for the method 'BeginUpdateResource'.",plain-text,Squirrel/NativeMethods/BeginUpdateResource,Squirrel/NativeMethods/BeginUpdateResource,logical,,,,,,MarshalStringsInPInvokeDeclarationsRule,Gendarme,GEND-MarshalStringsInPInvokeDeclarationsRule,Marshal Strings In PInvoke Declarations ,"This rule will fire if a P/Invoke method has System.String or
System.Text.StringBuilder arguments, and the DllImportAttribute does not
specify the **CharSet**, and the string arguments are not decorated with
**[MarshalAs]**. This is important because the defaults are different on
the various platforms. On Mono the default is to always use utf-8. On
.NET the default is to use the ANSI CharSet which is the native encoding
and will typically be some variant of ASCII or something like Shift-JIS.
On Compact .NET the default is utf-16.

**Bad** example:


```csharp
[DllImport (""coredll"")]
static extern int SHCreateShortcut (StringBuilder szShortcut, StringBuilder szTarget);
```
**Good** examples:


```csharp
[DllImport (""coredll"", CharSet = CharSet.Auto)]
static extern int SHCreateShortcut (StringBuilder szShortcut, StringBuilder szTarget);

[DllImport (""coredll"")]
static extern int SHCreateShortcut ([MarshalAs (UnmanagedType.LPTStr)] StringBuilder szShortcut,
[MarshalAs (UnmanagedType.LPTStr)] StringBuilder szTarget);
```",markdown,GEND-MarshalStringsInPInvokeDeclarationsRule,Marshal Strings In PInvoke Declarations ,"This rule will fire if a P/Invoke method has System.String or
System.Text.StringBuilder arguments, and the DllImportAttribute does not
specify the **CharSet**, and the string arguments are not decorated with
**[MarshalAs]**. This is important because the defaults are different on
the various platforms. On Mono the default is to always use utf-8. On
.NET the default is to use the ANSI CharSet which is the native encoding
and will typically be some variant of ASCII or something like Shift-JIS.
On Compact .NET the default is utf-16.

**Bad** example:


```csharp
[DllImport (""coredll"")]
static extern int SHCreateShortcut (StringBuilder szShortcut, StringBuilder szTarget);
```
**Good** examples:


```csharp
[DllImport (""coredll"", CharSet = CharSet.Auto)]
static extern int SHCreateShortcut (StringBuilder szShortcut, StringBuilder szTarget);

[DllImport (""coredll"")]
static extern int SHCreateShortcut ([MarshalAs (UnmanagedType.LPTStr)] StringBuilder szShortcut,
[MarshalAs (UnmanagedType.LPTStr)] StringBuilder szTarget);
```",markdown,,,escalated,0.592484,1
323,Static Analysis,2020-05-18T14:51:00-04:00,72911,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-227: 7PK - API Abuse,http://cwevis.org/browse/227,227,SharpCompress/Common/IncompleteArchiveException/(self),logical,,,2020-05-18T14:51:57-04:00,Static Analysis,47a6df44d16eb182f816f23918542a817d2995bc2ddf0168976c20b9c8c63cb2,200683,medium,,,CWE-573: Improper Following of Specification by Caller,http://cwevis.org/browse/573,573,"The required constructor for ISerializable is not present in this type. Add a (private for sealed, protected otherwise) serialization constructor for this type. The required constructor for ISerializable is not present in this type.",plain-text,SharpCompress/Common/IncompleteArchiveException/(self),SharpCompress/Common/IncompleteArchiveException/(self),logical,,,,,,MissingSerializationConstructorRule,Gendarme,GEND-MissingSerializationConstructorRule,Missing Serialization Constructor ,"This rule checks for types that implement **System.ISerializable** but
don't provide a serialization constructor. The constructor is required
in order to make the type serializeable but cannot be enforced by the
interface. The serialization constructor should be **private** for
**sealed** types and **protected** for unsealed types.

**Bad** example:


```csharp
[Serializable]
public class Bad : ISerializable {
    public void GetObjectData (SerializationInfo info, StreamingContext context)
    {
    }
}
```
**Good** example (sealed):


```csharp
[Serializable]
public sealed class Good : ISerializable {
    private ClassWithConstructor (SerializationInfo info, StreamingContext context)
    {
    }

    public void GetObjectData (SerializationInfo info, StreamingContext context)
    {
    }
}
```
**Good** example:


```csharp
[Serializable]
public class Good : ISerializable {
    protected ClassWithConstructor (SerializationInfo info, StreamingContext context)
    {
    }

    public void GetObjectData (SerializationInfo info, StreamingContext context)
    {
    }
}
```",markdown,rule-dc56fd6c6aaaf7aef3e91a691e1f8bd8f7311763a2d3286fce16c6c5cf52b5e2,API Abuse,"The software uses an API in a manner contrary to its intended use.

An API is a contract between a caller and a callee. The most common forms of API misuse occurs when the caller does not honor its end of this contract. For example, if a program does not call chdir() after calling chroot(), it violates the contract that specifies how to change the active root directory in a secure fashion. Another good example of library abuse is expecting the callee to return trustworthy DNS information to the caller. In this case, the caller misuses the callee API by making certain assumptions about its behavior (that the return value can be used for authentication purposes). One can also violate the caller-callee contract from the other side. For example, if a coder subclasses SecureRandom and returns a non-random value, the contract is violated.",markdown,,,escalated,0.94911677,1
324,Static Analysis,2020-05-18T14:51:00-04:00,72929,2020-05-18T14:54:28-04:00,high,escalated,,,,,,CWE-227: 7PK - API Abuse,http://cwevis.org/browse/227,227,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/Native/SafeLocalAllocHandle/LocalFree,logical,,,2020-05-18T14:52:00-04:00,Static Analysis,dbd57bbd7b01d2cdc8d58222b94308e03da707a5c7a5e9eab6acb7a083c63ff7,202215,high,,,CWE-676: Use of Potentially Dangerous Function,http://cwevis.org/browse/676,676,This type or method is decorated with [SuppressUnmanagedCodeSecurity] which reduce the number of security checks done when unmanaged code is called. Ensure that use of this attribute does not compromise the security of the application.,plain-text,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/Native/SafeLocalAllocHandle/LocalFree,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/Native/SafeLocalAllocHandle/LocalFree,logical,,,,,,ReviewSuppressUnmanagedCodeSecurityUsageRule,Gendarme,GEND-ReviewSuppressUnmanagedCodeSecurityUsageRule,Review Suppress Unmanaged Code Security Usage ,"This rule fires if a type or method is decorated with the
**[SuppressUnmanagedCodeSecurity]**attribute. This attribute reduces the
security checks done when executing unmanaged code and its usage should
be reviewed to confirm that no exploitable security holes are present.

Example:


```csharp
[SuppressUnmanagedCodeSecurity]
public class Safe {
    [DllImport (""User32.dll"")]
    static extern Boolean MessageBeep (UInt32 beepType);
}
```",markdown,rule-dc56fd6c6aaaf7aef3e91a691e1f8bd8f7311763a2d3286fce16c6c5cf52b5e2,API Abuse,"The software uses an API in a manner contrary to its intended use.

An API is a contract between a caller and a callee. The most common forms of API misuse occurs when the caller does not honor its end of this contract. For example, if a program does not call chdir() after calling chroot(), it violates the contract that specifies how to change the active root directory in a secure fashion. Another good example of library abuse is expecting the callee to return trustworthy DNS information to the caller. In this case, the caller misuses the callee API by making certain assumptions about its behavior (that the return value can be used for authentication purposes). One can also violate the caller-callee contract from the other side. For example, if a coder subclasses SecureRandom and returns a non-random value, the contract is violated.",markdown,,,escalated,0.9466878,1
325,Static Analysis,2020-05-18T14:51:00-04:00,72944,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/Alm/Cli/Program/Erase,logical,,,2020-05-18T14:52:14-04:00,Static Analysis,9d4d0dd753ee6745414a354655547d7752c27107ac72758d72ca674f677a4473,202960,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,This disposable local is not guaranteed to be disposed of before the method returns. Use a 'using' statement or surround the local's usage with a try/finally block. Local of type 'Task' is not disposed of (is this a fluent-like API ?).,plain-text,Microsoft/Alm/Cli/Program/Erase,Microsoft/Alm/Cli/Program/Erase,logical,,,,,,EnsureLocalDisposalRule,Gendarme,GEND-EnsureLocalDisposalRule,Ensure Local Disposal ,"This rule checks that disposable locals are always disposed of before
the method returns. Use a 'using' statement (or a try/finally block) to
guarantee local disposal even in the event an unhandled exception
occurs.

**Bad** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    DecodeHeader (stream);
    if (!DecodedHeader.HasContent) {
        return;
    }
    DecodeContent (stream);
    stream.Dispose ();
}
```
**Good** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        DecodeHeader (stream);
        if (!DecodedHeader.HasContent) {
            return;
        }
        DecodeContent (stream);
    }
}
```
**Bad** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    Decode (stream);
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
    stream.Dispose ();
}
```
**Good** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        Decode (stream);
    }
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.9824454,1
326,Static Analysis,2020-05-18T14:51:00-04:00,73135,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/Web/XmlTransform/XmlFileInfoDocument/(self),logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.98149246,1
327,Static Analysis,2020-05-18T14:51:00-04:00,73182,2020-05-18T14:54:28-04:00,medium,false-positive,"(function() {
  var Command, Login, Unstar, async, config, request, yargs;

  async = require('async');

  yargs = require('yargs');",1,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/unstar.js,file,4,4,2020-05-18T14:51:43-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,195611,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/unstar.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\unstar.js,file,18,11,4,4,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
328,Static Analysis,2020-05-18T14:51:00-04:00,73183,2020-05-18T14:54:28-04:00,medium,false-positive,"yargs = require('yargs');

  config = require('./apm');

  Command = require('./command');",5,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/unstar.js,file,8,8,2020-05-18T14:51:43-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,195615,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/unstar.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\unstar.js,file,19,12,8,8,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
329,Static Analysis,2020-05-18T14:51:00-04:00,73184,2020-05-18T14:54:28-04:00,medium,false-positive,"Command = require('./command');

  Login = require('./login');

  request = require('./request');",9,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/unstar.js,file,12,12,2020-05-18T14:51:43-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,195617,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/unstar.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\unstar.js,file,18,11,12,12,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
330,Static Analysis,2020-05-18T14:51:00-04:00,73186,2020-05-18T14:54:28-04:00,medium,false-positive,"config = require('./apm');

  Command = require('./command');

  Login = require('./login');",7,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/unstar.js,file,10,10,2020-05-18T14:51:43-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,195616,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/unstar.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\unstar.js,file,20,13,10,10,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
331,Static Analysis,2020-05-18T14:51:00-04:00,73188,2020-05-18T14:54:28-04:00,medium,false-positive,"async = require('async');

  yargs = require('yargs');

  config = require('./apm');",3,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/unstar.js,file,6,6,2020-05-18T14:51:43-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,195613,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/unstar.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\unstar.js,file,18,11,6,6,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
332,Static Analysis,2020-05-18T14:51:00-04:00,73189,2020-05-18T14:54:28-04:00,medium,false-positive,"if (process.platform === 'darwin') {
          process.stdout.write('\uD83D\uDC5F \u2B50  ');
        }
        process.stdout.write(`Unstarring ${packageName} `);
        requestSettings = {
          json: true,
          url: `${config.getAtomPackagesUrl()}/${packageName}/star`,",27,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/unstar.js,file,30,30,2020-05-18T14:51:43-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,195626,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/unstar.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\unstar.js,file,16,9,30,30,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
333,Static Analysis,2020-05-18T14:51:00-04:00,73193,2020-05-18T14:54:28-04:00,medium,false-positive,"starPackage(packageName, token, callback) {
        var requestSettings;
        if (process.platform === 'darwin') {
          process.stdout.write('\uD83D\uDC5F \u2B50  ');
        }
        process.stdout.write(`Unstarring ${packageName} `);
        requestSettings = {",25,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/unstar.js,file,28,28,2020-05-18T14:51:43-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,195625,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/unstar.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\unstar.js,file,18,11,28,28,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
334,Static Analysis,2020-05-18T14:51:00-04:00,73194,2020-05-18T14:54:28-04:00,medium,false-positive,"starPackage(packageName, token, callback) {
        var requestSettings;
        if (process.platform === 'darwin') {
          process.stdout.write('\uD83D\uDC5F \u2B50  ');
        }
        process.stdout.write(`Unstarring ${packageName} `);",24,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/unstar.js,file,27,27,2020-05-18T14:51:43-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,195624,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/unstar.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\unstar.js,file,20,13,27,27,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
335,Static Analysis,2020-05-18T14:51:00-04:00,73196,2020-05-18T14:54:28-04:00,medium,false-positive,"Login = require('./login');

  request = require('./request');

  module.exports = Unstar = (function() {
    class Unstar extends Command {",11,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/unstar.js,file,14,14,2020-05-18T14:51:43-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,195619,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/unstar.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\unstar.js,file,20,13,14,14,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
336,Static Analysis,2020-05-18T14:51:00-04:00,73197,2020-05-18T14:54:28-04:00,medium,false-positive,"request = require('./request');

  module.exports = Unstar = (function() {
    class Unstar extends Command {
      parseOptions(argv) {
        var options;",13,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/unstar.js,file,16,16,2020-05-18T14:51:43-04:00,Static Analysis,62173c3357301b64bcb7cb49ad65b9eeb8aa24356212b93fe0fe0166d3218ce7,195620,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'module' is not defined.,plain-text,Atom x64/resources/app/apm/lib/unstar.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\unstar.js,file,9,3,16,16,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.068299174,0
337,Static Analysis,2020-05-18T14:51:00-04:00,73198,2020-05-18T14:54:28-04:00,high,escalated,"parseOptions(argv) {
        var options;
        options = yargs(argv).wrap(Math.min(100, yargs.terminalWidth()));
        options.usage(""\nUsage: apm unstar <package_name>...\n\nUnstar the given packages on https://atom.io\n\nRun `apm stars` to see all your starred packages."");
        return options.alias('h', 'help').describe('help', 'Print this usage message');
      }",18,,,,CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'),http://cwevis.org/browse/79,79,Atom x64/resources/app/apm/lib/unstar.js,file,21,21,2020-05-18T14:51:43-04:00,Static Analysis,b4414dd3b1087806bb332146e753f5917a3aec259e29c568ca289f9ab428d0d4,195623,high,,,CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS),http://cwevis.org/browse/80,80,HTML passed in to function 'options.usage',plain-text,Atom x64/resources/app/apm/lib/unstar.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\unstar.js,file,22,9,21,21,xss,no-mixed-html,ESLint,ESLINT-XSS-no-mixed-html,No mixed html,"Wanted a way to catch XSS issues in code before they end up in production.

## Rule Details

This rule aims to catch as many XSS issues by examining the code as possible.
The rule checks for mixed html/non-html content, unescaped input, etc.

The following patterns are considered warnings:

```js

// Mixed content
var x = '<div>' + input + '</div>';
$node.html( '<div>' + input + '</div>' );

// Unsafe container names.
var html = input;
var text = htmlInput;
displayValue( htmlInput );

// Checking certain expression parameters that might end up in the variables.
var htmlItems = [ input1, input2 ].join();
var textItems = [ '<div>', input, '</div>' ].join();
var tag = isNumbered ? '<ol>' : '<ul>';

// Checking function return values.
var createHtml = function( item ) { return item.name; }
var createBox = function( item ) { return '<div>' + encode( item ) + '</div>' }

```

The following patterns are not warnings:

```js

// Proper encoding
var html = '<div>' + encode( input ) + '</div>';
$node.html( '<div>' + encode( input ) + '</div>' );

// Proper container names
var html = '<img src=""happy.png"">';
var text = textbox.value;

```

## When Not To Use It

If you are creating a Node.js application that doesn't output any HTML, you can
safely disable this rule.

## Further Reading

- [XSS Prevention CHeat Sheet - OWASP](https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet)",markdown,rule-396ebe8bb0c3dc5d4eb2b5368a97688fdb0f2587416453645c3d06db2b216479,Cross-site Scripting (XSS),"Cross-site scripting (XSS) vulnerabilities occur when:
1. Untrusted data enters a web application, typically from a web request.
2. The web application dynamically generates a web page that contains this untrusted data.
3. During page generation, the application does not prevent the data from containing content that is executable by a web browser, such as JavaScript, HTML tags, HTML attributes, mouse events, Flash, ActiveX, etc.
4. A victim visits the generated web page through a web browser, which contains malicious script that was injected using the untrusted data.
5. Since the script comes from a web page that was sent by the web server, the victim's web browser executes the malicious script in the context of the web server's domain.
6. This effectively violates the intention of the web browser's same-origin policy, which states that scripts in one domain should not be able to access resources or run code in a different domain.
There are three main kinds of XSS:

*Reflected XSS (or Non-Persistent)*

The server reads data directly from the HTTP request and reflects it back in the HTTP response. Reflected XSS exploits occur when an attacker causes a victim to supply dangerous content to a vulnerable web application, which is then reflected back to the victim and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to the victim. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces a victim to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the victim, the content is executed by the victim's browser.

*Stored XSS (or Persistent)*

The application stores dangerous data in a database, message forum, visitor log, or other trusted data store. At a later time, the dangerous data is subsequently read back into the application and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. For example, the attacker might inject XSS into a log message, which might not be handled properly when an administrator views the logs.

*DOM-Based XSS*

In DOM-based XSS, the client performs the injection of XSS into the page; in the other types, the server performs the injection. DOM-based XSS generally involves server-controlled, trusted script that is sent to the client, such as Javascript that performs sanity checks on a form before the user submits it. If the server-supplied script processes user-supplied data and then injects it back into the web page (such as with dynamic HTML), then DOM-based XSS is possible.

Once the malicious script is injected, the attacker can perform a variety of malicious activities. The attacker could transfer private information, such as cookies that may include session information, from the victim's machine to the attacker. The attacker could send malicious requests to a web site on behalf of the victim, which could be especially dangerous to the site if the victim has administrator privileges to manage that site. Phishing attacks could be used to emulate trusted web sites and trick the victim into entering a password, allowing the attacker to compromise the victim's account on that web site. Finally, the script could exploit a vulnerability in the web browser itself possibly taking over the victim's machine, sometimes referred to as ""drive-by hacking.""

In many cases, the attack can be launched without the victim even being aware of it. Even with careful users, attackers frequently use a variety of methods to encode the malicious portion of the attack, such as URL encoding or Unicode, so the request looks less suspicious.

**Guidance**

To remedy XSS vulnerabilities, it is important to never use untrusted or unfiltered data within the code of a HTML page.

Untrusted data can originate not only form the client but potentially a third party or previously uploaded file etc.

Filtering of untrusted data typically involves converting special characters to their HTML entity encoded counterparts (however, other methods do exist, see references).

These special characters include:

* `&`
* `<`
* `>`
* `""`
* `'`
* `/`

An example of HTML entity encoding is converting `<` to `&lt;`.

Although it is possible to filter untrusted input, there are five locations within an HTML page where untrusted input (even if it has been filtered) should never be placed:

1. Directly in a script.
2. Inside an HTML comment.
3. In an attribute name.
4. In a tag name.
5. Directly in CSS.

Each of these locations have their own form of escaping and filtering.

Because many browsers attempt to implement XSS protection, any manual verification of this finding should be conducted using multiple different browsers and browser
versions.

**References**

- [WASC](http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting)
- [Secunia](http://secunia.com/advisories/9716/)
- [OWASP XSS Prevention Cheat Sheet](https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet)
- [OWASP DOM Based XSS](https://www.owasp.org/index.php/DOM_Based_XSS)
- [OWASP DOM Based XSS Prevention Cheat Sheet](https://www.owasp.org/index.php/DOM_based_XSS_Prevention_Cheat_Sheet)",markdown,,,escalated,0.8266207,1
338,Static Analysis,2020-05-18T14:51:00-04:00,73218,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-227: 7PK - API Abuse,http://cwevis.org/browse/227,227,SharpCompress/Common/MultipartStreamRequiredException/(self),logical,,,2020-05-18T14:51:57-04:00,Static Analysis,47a6df44d16eb182f816f23918542a817d2995bc2ddf0168976c20b9c8c63cb2,200685,medium,,,CWE-573: Improper Following of Specification by Caller,http://cwevis.org/browse/573,573,"The required constructor for ISerializable is not present in this type. Add a (private for sealed, protected otherwise) serialization constructor for this type. The required constructor for ISerializable is not present in this type.",plain-text,SharpCompress/Common/MultipartStreamRequiredException/(self),SharpCompress/Common/MultipartStreamRequiredException/(self),logical,,,,,,MissingSerializationConstructorRule,Gendarme,GEND-MissingSerializationConstructorRule,Missing Serialization Constructor ,"This rule checks for types that implement **System.ISerializable** but
don't provide a serialization constructor. The constructor is required
in order to make the type serializeable but cannot be enforced by the
interface. The serialization constructor should be **private** for
**sealed** types and **protected** for unsealed types.

**Bad** example:


```csharp
[Serializable]
public class Bad : ISerializable {
    public void GetObjectData (SerializationInfo info, StreamingContext context)
    {
    }
}
```
**Good** example (sealed):


```csharp
[Serializable]
public sealed class Good : ISerializable {
    private ClassWithConstructor (SerializationInfo info, StreamingContext context)
    {
    }

    public void GetObjectData (SerializationInfo info, StreamingContext context)
    {
    }
}
```
**Good** example:


```csharp
[Serializable]
public class Good : ISerializable {
    protected ClassWithConstructor (SerializationInfo info, StreamingContext context)
    {
    }

    public void GetObjectData (SerializationInfo info, StreamingContext context)
    {
    }
}
```",markdown,rule-dc56fd6c6aaaf7aef3e91a691e1f8bd8f7311763a2d3286fce16c6c5cf52b5e2,API Abuse,"The software uses an API in a manner contrary to its intended use.

An API is a contract between a caller and a callee. The most common forms of API misuse occurs when the caller does not honor its end of this contract. For example, if a program does not call chdir() after calling chroot(), it violates the contract that specifies how to change the active root directory in a secure fashion. Another good example of library abuse is expecting the callee to return trustworthy DNS information to the caller. In this case, the caller misuses the callee API by making certain assumptions about its behavior (that the return value can be used for authentication purposes). One can also violate the caller-callee contract from the other side. For example, if a coder subclasses SecureRandom and returns a non-random value, the contract is violated.",markdown,,,escalated,0.94911677,1
339,Static Analysis,2020-05-18T14:51:00-04:00,73252,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Squirrel/Update/SetupLogLogger/Write,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201110,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Squirrel/Update/SetupLogLogger/Write,Squirrel/Update/SetupLogLogger/Write,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
340,Static Analysis,2020-05-18T14:51:00-04:00,73282,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,NuGet/ZipPackageFile/ZipPackageFile,logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.98149246,1
341,Static Analysis,2020-05-18T14:51:00-04:00,73295,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/Platform/DeviceAuthHelper/FindCertificate,logical,,,2020-05-18T14:51:59-04:00,Static Analysis,2e63cc809b0d4c991d4a7cc19665f9076f6a17a16746d06f68222107cbcb639a,202009,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,This disposable local is not guaranteed to be disposed of before the method returns. Use a 'using' statement or surround the local's usage with a try/finally block. Local of type 'X509Store' is not disposed of (at least not locally).,plain-text,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/Platform/DeviceAuthHelper/FindCertificate,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/Platform/DeviceAuthHelper/FindCertificate,logical,,,,,,EnsureLocalDisposalRule,Gendarme,GEND-EnsureLocalDisposalRule,Ensure Local Disposal ,"This rule checks that disposable locals are always disposed of before
the method returns. Use a 'using' statement (or a try/finally block) to
guarantee local disposal even in the event an unhandled exception
occurs.

**Bad** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    DecodeHeader (stream);
    if (!DecodedHeader.HasContent) {
        return;
    }
    DecodeContent (stream);
    stream.Dispose ();
}
```
**Good** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        DecodeHeader (stream);
        if (!DecodedHeader.HasContent) {
            return;
        }
        DecodeContent (stream);
    }
}
```
**Bad** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    Decode (stream);
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
    stream.Dispose ();
}
```
**Good** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        Decode (stream);
    }
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.98239136,1
342,Static Analysis,2020-05-18T14:51:00-04:00,73414,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-227: 7PK - API Abuse,http://cwevis.org/browse/227,227,SharpCompress/Common/PasswordProtectedException/(self),logical,,,2020-05-18T14:51:57-04:00,Static Analysis,47a6df44d16eb182f816f23918542a817d2995bc2ddf0168976c20b9c8c63cb2,200687,medium,,,CWE-573: Improper Following of Specification by Caller,http://cwevis.org/browse/573,573,"The required constructor for ISerializable is not present in this type. Add a (private for sealed, protected otherwise) serialization constructor for this type. The required constructor for ISerializable is not present in this type.",plain-text,SharpCompress/Common/PasswordProtectedException/(self),SharpCompress/Common/PasswordProtectedException/(self),logical,,,,,,MissingSerializationConstructorRule,Gendarme,GEND-MissingSerializationConstructorRule,Missing Serialization Constructor ,"This rule checks for types that implement **System.ISerializable** but
don't provide a serialization constructor. The constructor is required
in order to make the type serializeable but cannot be enforced by the
interface. The serialization constructor should be **private** for
**sealed** types and **protected** for unsealed types.

**Bad** example:


```csharp
[Serializable]
public class Bad : ISerializable {
    public void GetObjectData (SerializationInfo info, StreamingContext context)
    {
    }
}
```
**Good** example (sealed):


```csharp
[Serializable]
public sealed class Good : ISerializable {
    private ClassWithConstructor (SerializationInfo info, StreamingContext context)
    {
    }

    public void GetObjectData (SerializationInfo info, StreamingContext context)
    {
    }
}
```
**Good** example:


```csharp
[Serializable]
public class Good : ISerializable {
    protected ClassWithConstructor (SerializationInfo info, StreamingContext context)
    {
    }

    public void GetObjectData (SerializationInfo info, StreamingContext context)
    {
    }
}
```",markdown,rule-dc56fd6c6aaaf7aef3e91a691e1f8bd8f7311763a2d3286fce16c6c5cf52b5e2,API Abuse,"The software uses an API in a manner contrary to its intended use.

An API is a contract between a caller and a callee. The most common forms of API misuse occurs when the caller does not honor its end of this contract. For example, if a program does not call chdir() after calling chroot(), it violates the contract that specifies how to change the active root directory in a secure fashion. Another good example of library abuse is expecting the callee to return trustworthy DNS information to the caller. In this case, the caller misuses the callee API by making certain assumptions about its behavior (that the return value can be used for authentication purposes). One can also violate the caller-callee contract from the other side. For example, if a coder subclasses SecureRandom and returns a non-random value, the contract is violated.",markdown,,,escalated,0.94911677,1
343,Static Analysis,2020-05-18T14:51:00-04:00,73423,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-227: 7PK - API Abuse,http://cwevis.org/browse/227,227,Microsoft/IdentityModel/Clients/ActiveDirectory/AdalException/(self),logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-dc56fd6c6aaaf7aef3e91a691e1f8bd8f7311763a2d3286fce16c6c5cf52b5e2,API Abuse,"The software uses an API in a manner contrary to its intended use.

An API is a contract between a caller and a callee. The most common forms of API misuse occurs when the caller does not honor its end of this contract. For example, if a program does not call chdir() after calling chroot(), it violates the contract that specifies how to change the active root directory in a secure fashion. Another good example of library abuse is expecting the callee to return trustworthy DNS information to the caller. In this case, the caller misuses the callee API by making certain assumptions about its behavior (that the return value can be used for authentication purposes). One can also violate the caller-callee contract from the other side. For example, if a coder subclasses SecureRandom and returns a non-random value, the contract is violated.",markdown,,,escalated,0.94525355,1
344,Static Analysis,2020-05-18T14:51:00-04:00,73433,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/Web/XmlTransform/XmlAttributePreservingWriter/WriteAttributeTrailingWhitespace,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201209,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Microsoft/Web/XmlTransform/XmlAttributePreservingWriter/WriteAttributeTrailingWhitespace,Microsoft/Web/XmlTransform/XmlAttributePreservingWriter/WriteAttributeTrailingWhitespace,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
345,Static Analysis,2020-05-18T14:51:00-04:00,73434,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Archives/AbstractArchive/ExtractAllEntries,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201198,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Archives/AbstractArchive/ExtractAllEntries,SharpCompress/Archives/AbstractArchive/ExtractAllEntries,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
346,Static Analysis,2020-05-18T14:51:00-04:00,73436,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-189: Numeric Errors,http://cwevis.org/browse/189,189,Squirrel/NativeMethods/GetParentProcessId,logical,,,2020-05-18T14:51:56-04:00,Static Analysis,b1b0ba14ab8f474c314a54e7b4d30d9b92dd0db21a0d56f40d188d814a390fd3,200006,medium,,,CWE-197: Numeric Truncation Error,http://cwevis.org/browse/197,197,"This method casts a [U]IntPtr to a 32-bit value which won't work on 64-bit architectures. You should always use 64 bits integers, signed or unsigned, when doing pointer math. Type cast to 'System.Int32'.",plain-text,Squirrel/NativeMethods/GetParentProcessId,Squirrel/NativeMethods/GetParentProcessId,logical,,,,,,DoNotAssumeIntPtrSizeRule,Gendarme,GEND-DoNotAssumeIntPtrSizeRule,Do Not Assume Int Ptr Size ,"This rule checks for code which casts an **IntPtr** or **UIntPtr** into
a 32-bit (or smaller) value. It will also check if memory read with the
**Marshal.ReadInt32**and **Marshal.ReadInt64** methods is being cast
into an **IntPtr** or **UIntPtr**. **IntPtr** is generally used to
reference a memory location and downcasting them to 32-bits will make
the code fail on 64-bit CPUs.

**Bad** example (cast):


```csharp
int ptr = dest.ToInt32 ();
for (int i = 0; i < 16; i++) {
    Marshal.StructureToPtr (this, (IntPtr)ptr, false);
    ptr += 4;
}
```
**Bad** example (Marshal.Read\*):


```csharp
// that won't work on 64 bits platforms
IntPtr p = (IntPtr) Marshal.ReadInt32 (p);
```
**Good** example (cast):


```csharp
long ptr = dest.ToInt64 ();
for (int i = 0; i < 16; i++) {
    Marshal.StructureToPtr (this, (IntPtr) ptr, false);
    ptr += IntPtr.Size;
}
```
**Good** example (Marshal.Read\*):


```csharp
IntPtr p = (IntPtr) Marshal.ReadIntPtr (p);
```",markdown,rule-87c4a91bc4c9e20c70f0637bd67a4d03975f25b3ec675b9cc13d0f04540c76a6,Numeric Error,,,,,escalated,0.96060944,1
347,Static Analysis,2020-05-18T14:51:00-04:00,73437,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Squirrel/NativeMethods/GetParentProcessId,logical,,,2020-05-18T14:51:56-04:00,Static Analysis,990659a019388e4890643c93cad3046863745119ab7b4b291e2e747b1b3d211d,200208,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,This disposable local is not guaranteed to be disposed of before the method returns. Use a 'using' statement or surround the local's usage with a try/finally block. Local of type 'Process' is not disposed of (is this a fluent-like API ?).,plain-text,Squirrel/NativeMethods/GetParentProcessId,Squirrel/NativeMethods/GetParentProcessId,logical,,,,,,EnsureLocalDisposalRule,Gendarme,GEND-EnsureLocalDisposalRule,Ensure Local Disposal ,"This rule checks that disposable locals are always disposed of before
the method returns. Use a 'using' statement (or a try/finally block) to
guarantee local disposal even in the event an unhandled exception
occurs.

**Bad** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    DecodeHeader (stream);
    if (!DecodedHeader.HasContent) {
        return;
    }
    DecodeContent (stream);
    stream.Dispose ();
}
```
**Good** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        DecodeHeader (stream);
        if (!DecodedHeader.HasContent) {
            return;
        }
        DecodeContent (stream);
    }
}
```
**Bad** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    Decode (stream);
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
    stream.Dispose ();
}
```
**Good** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        Decode (stream);
    }
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.9805271,1
348,Static Analysis,2020-05-18T14:51:00-04:00,73445,2020-05-18T14:54:28-04:00,high,escalated,,,,,,CWE-695: Use of Low-Level Functionality,http://cwevis.org/browse/695,695,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/Platform/PlatformInformation/NativeMethods/SYSTEM_INFO/(self),logical,,,2020-05-18T14:51:59-04:00,Static Analysis,3ac9036736202c636e5a647bb8073bf5337a353e654d9216f8af1cf9293e2f3b,202162,high,,,CWE-695: Use of Low-Level Functionality,http://cwevis.org/browse/695,695,The type uses System.IntPtr or System.UIntPtr instead of System.Runtime.InteropServices.SafeHandle. Consider changing the code to use SafeHandle.,plain-text,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/Platform/PlatformInformation/NativeMethods/SYSTEM_INFO/(self),Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/Platform/PlatformInformation/NativeMethods/SYSTEM_INFO/(self),logical,,,,,,PreferSafeHandleRule,Gendarme,GEND-PreferSafeHandleRule,Prefer Safe Handle ,"In general it is best to interop with native code using
**System.Runtime.InteropServices.SafeHandle** instead of
**System.IntPtr** or **System.UIntPtr** because:

SafeHandles are type safe.
SafeHandles are guaranteed to be disposed of during exceptional
conditions like a thread aborting unexpectedly or a stack overflow.
SafeHandles are not vulnerable to reycle attacks.
You don't need to write a finalizer which can be tricky to do because
they execute within their own thread, may execute on partially
constructed objects, and normally tear down the application if you allow
an exception to escape from them.


 **Bad** example:


```csharp
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable.
public sealed class Database {
    ~Database ()
    {
        // This will execute even if the ctor throws so it is important to check
        // to see if the fields are initialized.
        if (m_database != IntPtr.Zero) {
            NativeMethods.sqlite3_close (m_database);
        }
    }

    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        int err = NativeMethods.sqlite3_open_v2 (path, out m_database, flags, IntPtr.Zero);
        // handle errors
    }

    // exec and query methods would go here

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (IntPtr db);

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private IntPtr m_database;
}
```
**Good** example:


```csharp
using System.Runtime.ConstrainedExecution;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable, but you do not need to implement a finalizer because
// SafeHandle will take care of the cleanup.
internal sealed class Database {
    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        m_database = new SqlitePtr (path, flags);
    }

    // exec and query methods would go here

    // This corresponds to a native sqlite3*.
    [SecurityPermission (SecurityAction.InheritanceDemand, UnmanagedCode = true)]
    [SecurityPermission (SecurityAction.Demand, UnmanagedCode = true)]
    private sealed class SqlitePtr : SafeHandle {
        public SqlitePtr (string path, NativeMethods.OpenFlags flags) : base (IntPtr.Zero, true)
        {
            int err = NativeMethods.sqlite3_open_v2 (path, out handle, flags, IntPtr.Zero);
            // handle errors
        }

        public override bool IsInvalid {
            get {
                return (handle == IntPtr.Zero);
            }
        }

        // This will not be called if the handle is invalid. Note that this method should not throw.
        [ReliabilityContract (Consistency.WillNotCorruptState, Cer.MayFail)]
        protected override bool ReleaseHandle ()
        {
            NativeMethods.sqlite3_close (this);
            return true;
        }
    }

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (SqlitePtr db);

        // Open must take an IntPtr but all other methods take a type safe SqlitePtr.
        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private SqlitePtr m_database;
}
```",markdown,GEND-PreferSafeHandleRule,Prefer Safe Handle ,"In general it is best to interop with native code using
**System.Runtime.InteropServices.SafeHandle** instead of
**System.IntPtr** or **System.UIntPtr** because:

SafeHandles are type safe.
SafeHandles are guaranteed to be disposed of during exceptional
conditions like a thread aborting unexpectedly or a stack overflow.
SafeHandles are not vulnerable to reycle attacks.
You don't need to write a finalizer which can be tricky to do because
they execute within their own thread, may execute on partially
constructed objects, and normally tear down the application if you allow
an exception to escape from them.


 **Bad** example:


```csharp
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable.
public sealed class Database {
    ~Database ()
    {
        // This will execute even if the ctor throws so it is important to check
        // to see if the fields are initialized.
        if (m_database != IntPtr.Zero) {
            NativeMethods.sqlite3_close (m_database);
        }
    }

    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        int err = NativeMethods.sqlite3_open_v2 (path, out m_database, flags, IntPtr.Zero);
        // handle errors
    }

    // exec and query methods would go here

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (IntPtr db);

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private IntPtr m_database;
}
```
**Good** example:


```csharp
using System.Runtime.ConstrainedExecution;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable, but you do not need to implement a finalizer because
// SafeHandle will take care of the cleanup.
internal sealed class Database {
    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        m_database = new SqlitePtr (path, flags);
    }

    // exec and query methods would go here

    // This corresponds to a native sqlite3*.
    [SecurityPermission (SecurityAction.InheritanceDemand, UnmanagedCode = true)]
    [SecurityPermission (SecurityAction.Demand, UnmanagedCode = true)]
    private sealed class SqlitePtr : SafeHandle {
        public SqlitePtr (string path, NativeMethods.OpenFlags flags) : base (IntPtr.Zero, true)
        {
            int err = NativeMethods.sqlite3_open_v2 (path, out handle, flags, IntPtr.Zero);
            // handle errors
        }

        public override bool IsInvalid {
            get {
                return (handle == IntPtr.Zero);
            }
        }

        // This will not be called if the handle is invalid. Note that this method should not throw.
        [ReliabilityContract (Consistency.WillNotCorruptState, Cer.MayFail)]
        protected override bool ReleaseHandle ()
        {
            NativeMethods.sqlite3_close (this);
            return true;
        }
    }

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (SqlitePtr db);

        // Open must take an IntPtr but all other methods take a type safe SqlitePtr.
        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private SqlitePtr m_database;
}
```",markdown,,,escalated,0.8318374,1
349,Static Analysis,2020-05-18T14:51:00-04:00,73467,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,WpfAnimatedGif/ImageBehavior/DecodeGifFile,logical,,,2020-05-18T14:51:56-04:00,Static Analysis,75d7fbc5e63cd65cbf82fa8406c2803dedf9e35f1f97ad3aa206eb0234dfc39e,200150,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,This disposable local is not guaranteed to be disposed of before the method returns. Use a 'using' statement or surround the local's usage with a try/finally block. Local of type 'Stream' is not disposed of (at least not locally).,plain-text,WpfAnimatedGif/ImageBehavior/DecodeGifFile,WpfAnimatedGif/ImageBehavior/DecodeGifFile,logical,,,,,,EnsureLocalDisposalRule,Gendarme,GEND-EnsureLocalDisposalRule,Ensure Local Disposal ,"This rule checks that disposable locals are always disposed of before
the method returns. Use a 'using' statement (or a try/finally block) to
guarantee local disposal even in the event an unhandled exception
occurs.

**Bad** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    DecodeHeader (stream);
    if (!DecodedHeader.HasContent) {
        return;
    }
    DecodeContent (stream);
    stream.Dispose ();
}
```
**Good** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        DecodeHeader (stream);
        if (!DecodedHeader.HasContent) {
            return;
        }
        DecodeContent (stream);
    }
}
```
**Bad** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    Decode (stream);
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
    stream.Dispose ();
}
```
**Good** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        Decode (stream);
    }
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.9816607,1
350,Static Analysis,2020-05-18T14:51:00-04:00,73481,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Mono/Cecil/ModuleReader/ReadSymbols,logical,,,2020-05-18T14:51:56-04:00,Static Analysis,0690e7c567604e22e20456982e8680c8a34a5f454bc35760aaf37571bcc4bf8c,200227,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,This disposable local is not guaranteed to be disposed of before the method returns. Use a 'using' statement or surround the local's usage with a try/finally block. Local of type 'ISymbolReader' is not disposed of (at least not locally).,plain-text,Mono/Cecil/ModuleReader/ReadSymbols,Mono/Cecil/ModuleReader/ReadSymbols,logical,,,,,,EnsureLocalDisposalRule,Gendarme,GEND-EnsureLocalDisposalRule,Ensure Local Disposal ,"This rule checks that disposable locals are always disposed of before
the method returns. Use a 'using' statement (or a try/finally block) to
guarantee local disposal even in the event an unhandled exception
occurs.

**Bad** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    DecodeHeader (stream);
    if (!DecodedHeader.HasContent) {
        return;
    }
    DecodeContent (stream);
    stream.Dispose ();
}
```
**Good** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        DecodeHeader (stream);
        if (!DecodedHeader.HasContent) {
            return;
        }
        DecodeContent (stream);
    }
}
```
**Bad** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    Decode (stream);
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
    stream.Dispose ();
}
```
**Good** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        Decode (stream);
    }
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97926515,1
351,Static Analysis,2020-05-18T14:51:00-04:00,73519,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Squirrel/Bsdiff/WrappingStream/EndRead,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201277,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Squirrel/Bsdiff/WrappingStream/EndRead,Squirrel/Bsdiff/WrappingStream/EndRead,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
352,Static Analysis,2020-05-18T14:51:00-04:00,73522,2020-05-18T14:54:28-04:00,high,escalated,,,,,,CWE-695: Use of Low-Level Functionality,http://cwevis.org/browse/695,695,Microsoft/Alm/Win32/ProcessEntry32/(self),logical,,,2020-05-18T14:52:00-04:00,Static Analysis,3ac9036736202c636e5a647bb8073bf5337a353e654d9216f8af1cf9293e2f3b,202445,high,,,CWE-695: Use of Low-Level Functionality,http://cwevis.org/browse/695,695,The type uses System.IntPtr or System.UIntPtr instead of System.Runtime.InteropServices.SafeHandle. Consider changing the code to use SafeHandle.,plain-text,Microsoft/Alm/Win32/ProcessEntry32/(self),Microsoft/Alm/Win32/ProcessEntry32/(self),logical,,,,,,PreferSafeHandleRule,Gendarme,GEND-PreferSafeHandleRule,Prefer Safe Handle ,"In general it is best to interop with native code using
**System.Runtime.InteropServices.SafeHandle** instead of
**System.IntPtr** or **System.UIntPtr** because:

SafeHandles are type safe.
SafeHandles are guaranteed to be disposed of during exceptional
conditions like a thread aborting unexpectedly or a stack overflow.
SafeHandles are not vulnerable to reycle attacks.
You don't need to write a finalizer which can be tricky to do because
they execute within their own thread, may execute on partially
constructed objects, and normally tear down the application if you allow
an exception to escape from them.


 **Bad** example:


```csharp
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable.
public sealed class Database {
    ~Database ()
    {
        // This will execute even if the ctor throws so it is important to check
        // to see if the fields are initialized.
        if (m_database != IntPtr.Zero) {
            NativeMethods.sqlite3_close (m_database);
        }
    }

    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        int err = NativeMethods.sqlite3_open_v2 (path, out m_database, flags, IntPtr.Zero);
        // handle errors
    }

    // exec and query methods would go here

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (IntPtr db);

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private IntPtr m_database;
}
```
**Good** example:


```csharp
using System.Runtime.ConstrainedExecution;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable, but you do not need to implement a finalizer because
// SafeHandle will take care of the cleanup.
internal sealed class Database {
    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        m_database = new SqlitePtr (path, flags);
    }

    // exec and query methods would go here

    // This corresponds to a native sqlite3*.
    [SecurityPermission (SecurityAction.InheritanceDemand, UnmanagedCode = true)]
    [SecurityPermission (SecurityAction.Demand, UnmanagedCode = true)]
    private sealed class SqlitePtr : SafeHandle {
        public SqlitePtr (string path, NativeMethods.OpenFlags flags) : base (IntPtr.Zero, true)
        {
            int err = NativeMethods.sqlite3_open_v2 (path, out handle, flags, IntPtr.Zero);
            // handle errors
        }

        public override bool IsInvalid {
            get {
                return (handle == IntPtr.Zero);
            }
        }

        // This will not be called if the handle is invalid. Note that this method should not throw.
        [ReliabilityContract (Consistency.WillNotCorruptState, Cer.MayFail)]
        protected override bool ReleaseHandle ()
        {
            NativeMethods.sqlite3_close (this);
            return true;
        }
    }

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (SqlitePtr db);

        // Open must take an IntPtr but all other methods take a type safe SqlitePtr.
        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private SqlitePtr m_database;
}
```",markdown,GEND-PreferSafeHandleRule,Prefer Safe Handle ,"In general it is best to interop with native code using
**System.Runtime.InteropServices.SafeHandle** instead of
**System.IntPtr** or **System.UIntPtr** because:

SafeHandles are type safe.
SafeHandles are guaranteed to be disposed of during exceptional
conditions like a thread aborting unexpectedly or a stack overflow.
SafeHandles are not vulnerable to reycle attacks.
You don't need to write a finalizer which can be tricky to do because
they execute within their own thread, may execute on partially
constructed objects, and normally tear down the application if you allow
an exception to escape from them.


 **Bad** example:


```csharp
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable.
public sealed class Database {
    ~Database ()
    {
        // This will execute even if the ctor throws so it is important to check
        // to see if the fields are initialized.
        if (m_database != IntPtr.Zero) {
            NativeMethods.sqlite3_close (m_database);
        }
    }

    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        int err = NativeMethods.sqlite3_open_v2 (path, out m_database, flags, IntPtr.Zero);
        // handle errors
    }

    // exec and query methods would go here

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (IntPtr db);

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private IntPtr m_database;
}
```
**Good** example:


```csharp
using System.Runtime.ConstrainedExecution;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable, but you do not need to implement a finalizer because
// SafeHandle will take care of the cleanup.
internal sealed class Database {
    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        m_database = new SqlitePtr (path, flags);
    }

    // exec and query methods would go here

    // This corresponds to a native sqlite3*.
    [SecurityPermission (SecurityAction.InheritanceDemand, UnmanagedCode = true)]
    [SecurityPermission (SecurityAction.Demand, UnmanagedCode = true)]
    private sealed class SqlitePtr : SafeHandle {
        public SqlitePtr (string path, NativeMethods.OpenFlags flags) : base (IntPtr.Zero, true)
        {
            int err = NativeMethods.sqlite3_open_v2 (path, out handle, flags, IntPtr.Zero);
            // handle errors
        }

        public override bool IsInvalid {
            get {
                return (handle == IntPtr.Zero);
            }
        }

        // This will not be called if the handle is invalid. Note that this method should not throw.
        [ReliabilityContract (Consistency.WillNotCorruptState, Cer.MayFail)]
        protected override bool ReleaseHandle ()
        {
            NativeMethods.sqlite3_close (this);
            return true;
        }
    }

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (SqlitePtr db);

        // Open must take an IntPtr but all other methods take a type safe SqlitePtr.
        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private SqlitePtr m_database;
}
```",markdown,,,escalated,0.8318374,1
353,Static Analysis,2020-05-18T14:51:00-04:00,73541,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-388: 7PK - Errors,http://cwevis.org/browse/388,388,SharpCompress/Readers/AbstractReader/SharpCompress/Common/IExtractionListener/FireFilePartExtractionBegin,logical,,,2020-05-18T14:51:56-04:00,Static Analysis,f73cef352a0b2bf1d0cc5310f027978a051db5e56968ba97879cbcb8e22239bf,199968,medium,,,CWE-754: Improper Check for Unusual or Exceptional Conditions,http://cwevis.org/browse/754,754,"Every delegate passed to native code must include an exception block which spans the entire method and has a catch all block. Surround the entire method body with a try/catch block. An exception occurred while verifying this method. This failure can probably be ignored, it's most likely due to an uncommon code sequence in the method the rule didn't understand. Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index",plain-text,SharpCompress/Readers/AbstractReader/SharpCompress/Common/IExtractionListener/FireFilePartExtractionBegin,SharpCompress/Readers/AbstractReader/SharpCompress/Common/IExtractionListener/FireFilePartExtractionBegin,logical,,,,,,DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRule,Gendarme,GEND-DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRule,Delegates Passed To Native Code Must Include Exception Handling ,"Every delegate which is passed to native code must include an exception
block which spans the entire method and has a catch all handler.

**Bad** example:


```csharp
public void NativeCallback ()
{
    Console.WriteLine (""{0}"", 1);
}
```
**Good** example:


```csharp
public void NativeCallback ()
{
    try {
        Console.WriteLine (""{0}"", 1);
    }
    catch {
    }
}
```",markdown,rule-e3f0972459f483bc18a68eed953b03a6c7e7fb7e495bc2047dd97eaba40f966b,Error Handling,,,,,escalated,0.88051474,1
354,Static Analysis,2020-05-18T14:51:00-04:00,73597,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Compressors/Deflate/ZlibBaseStream/Write,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201164,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Compressors/Deflate/ZlibBaseStream/Write,SharpCompress/Compressors/Deflate/ZlibBaseStream/Write,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
355,Static Analysis,2020-05-18T14:51:00-04:00,73599,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/Web/XmlTransform/XmlFileInfoDocument/CreateElement,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201238,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Microsoft/Web/XmlTransform/XmlFileInfoDocument/CreateElement,Microsoft/Web/XmlTransform/XmlFileInfoDocument/CreateElement,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
356,Static Analysis,2020-05-18T14:51:00-04:00,73600,2020-05-18T14:54:28-04:00,high,escalated,"if (options.argv.production) {
          installArgs.push('--production');
        }
        if (vsArgs = this.getVisualStudioFlags()) {
          installArgs.push(vsArgs);
        }
        fs.makeTreeSync(this.atomDirectory);",193,,,,CWE-697: Incorrect Comparison,http://cwevis.org/browse/697,697,Atom x64/resources/app/apm/lib/install.js,file,196,196,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-c271f2bb931810eef633f7c736d1dd934fbd6ed5f62ac8d8ea39ade811190622,Comparison,,,,,escalated,0.9110538,1
357,Static Analysis,2020-05-18T14:51:00-04:00,73601,2020-05-18T14:54:28-04:00,medium,false-positive,"this.atomDirectory = config.getAtomDirectory();
        this.atomPackagesDirectory = path.join(this.atomDirectory, 'packages');
        this.atomNodeDirectory = path.join(this.atomDirectory, '.node-gyp');
        this.atomNpmPath = require.resolve('npm/bin/npm-cli');
        this.repoLocalPackagePathRegex = /^file:(?!\/\/)(.*)/;
      }",43,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/install.js,file,46,46,2020-05-18T14:51:35-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192812,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/install.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\install.js,file,35,28,46,46,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
358,Static Analysis,2020-05-18T14:51:00-04:00,73602,2020-05-18T14:54:28-04:00,high,escalated,"isPackageInstalled(packageName, packageVersion) {
        var error, ref, version;
        try {
          ({version} = (ref = CSON.readFileSync(CSON.resolve(path.join('node_modules', packageName, 'package')))) != null ? ref : {});
          return packageVersion === version;
        } catch (error1) {
          error = error1;",252,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/lib/install.js,file,255,255,2020-05-18T14:51:35-04:00,Static Analysis,374ad040fff48d9edaa97052bf28a674b1f4e79af66a0448f1ab1699003790cd,192915,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Found fs.readFileSync with non literal argument at index 0,plain-text,Atom x64/resources/app/apm/lib/install.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\install.js,file,48,31,255,255,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.9758102,1
359,Static Analysis,2020-05-18T14:51:00-04:00,73603,2020-05-18T14:54:28-04:00,medium,false-positive,"this.verbose = options.argv.verbose;
        if (this.verbose) {
          request.debug(true);
          process.env.NODE_DEBUG = 'request';
        }
        installPackage = (name, nextInstallStep) => {
          var atIndex, gitPackageInfo, version;",749,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/install.js,file,752,752,2020-05-18T14:51:36-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,193120,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/install.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\install.js,file,18,11,752,752,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
360,Static Analysis,2020-05-18T14:51:00-04:00,73604,2020-05-18T14:54:28-04:00,medium,false-positive,"if (this.verbose) {
          buildOptions.streaming = true;
        }
        fs.removeSync(path.resolve(__dirname, '..', 'native-module', 'build'));
        return this.fork(this.atomNpmPath, buildArgs, buildOptions, (...args) => {
          return this.logCommandResults(callback, ...args);
        });",499,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/install.js,file,502,502,2020-05-18T14:51:35-04:00,Static Analysis,9ced861d153ab418069da667a5c9f5fefe90861e103a53df87d410e5550ee1e7,192980,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'__dirname' is not defined.,plain-text,Atom x64/resources/app/apm/lib/install.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\install.js,file,45,36,502,502,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.09524149,0
361,Static Analysis,2020-05-18T14:51:00-04:00,73605,2020-05-18T14:54:28-04:00,medium,false-positive,"async = require('async');

  CSON = require('season');

  yargs = require('yargs');",10,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/install.js,file,13,13,2020-05-18T14:51:35-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192780,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/install.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\install.js,file,17,10,13,13,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
362,Static Analysis,2020-05-18T14:51:00-04:00,73607,2020-05-18T14:54:28-04:00,medium,false-positive,"hostedGitInfo = require('hosted-git-info');

  config = require('./apm');

  Command = require('./command');",22,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/install.js,file,25,25,2020-05-18T14:51:35-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192786,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/install.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\install.js,file,19,12,25,25,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
363,Static Analysis,2020-05-18T14:51:00-04:00,73608,2020-05-18T14:54:28-04:00,high,escalated,"buildArgs = ['--globalconfig', config.getGlobalConfigPath(), '--userconfig', config.getUserConfigPath(), 'build'];
        buildArgs.push(path.resolve(__dirname, '..', 'native-module'));
        buildArgs.push(...this.getNpmBuildFlags());
        if (vsArgs = this.getVisualStudioFlags()) {
          buildArgs.push(vsArgs);
        }
        fs.makeTreeSync(this.atomDirectory);",486,,,,CWE-697: Incorrect Comparison,http://cwevis.org/browse/697,697,Atom x64/resources/app/apm/lib/install.js,file,489,489,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-c271f2bb931810eef633f7c736d1dd934fbd6ed5f62ac8d8ea39ade811190622,Comparison,,,,,escalated,0.9110538,1
364,Static Analysis,2020-05-18T14:51:00-04:00,73609,2020-05-18T14:54:28-04:00,medium,false-positive,"request = require('./request');

  ({isDeprecatedPackage} = require('./deprecated-packages'));

  module.exports = Install = (function() {
    class Install extends Command {",32,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/install.js,file,35,35,2020-05-18T14:51:35-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192797,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/install.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\install.js,file,35,28,35,35,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
365,Static Analysis,2020-05-18T14:51:00-04:00,73611,2020-05-18T14:54:28-04:00,medium,false-positive,"// and a compiler.
      checkNativeBuildTools(callback) {
        var buildArgs, buildOptions, env, vsArgs;
        process.stdout.write('Checking for native build tools ');
        buildArgs = ['--globalconfig', config.getGlobalConfigPath(), '--userconfig', config.getUserConfigPath(), 'build'];
        buildArgs.push(path.resolve(__dirname, '..', 'native-module'));
        buildArgs.push(...this.getNpmBuildFlags());",482,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/install.js,file,485,485,2020-05-18T14:51:35-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,192975,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/install.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\install.js,file,16,9,485,485,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
366,Static Analysis,2020-05-18T14:51:00-04:00,73614,2020-05-18T14:54:28-04:00,medium,false-positive,"_ = require('underscore-plus');

  async = require('async');

  CSON = require('season');",8,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/install.js,file,11,11,2020-05-18T14:51:35-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192779,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/install.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\install.js,file,18,11,11,11,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
367,Static Analysis,2020-05-18T14:51:00-04:00,73615,2020-05-18T14:54:28-04:00,medium,false-positive,"assert = require('assert');

  path = require('path');

  _ = require('underscore-plus');",4,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/install.js,file,7,7,2020-05-18T14:51:35-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192776,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/install.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\install.js,file,17,10,7,7,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
368,Static Analysis,2020-05-18T14:51:00-04:00,73616,2020-05-18T14:54:28-04:00,medium,false-positive,"RebuildModuleCache = require('./rebuild-module-cache');

  request = require('./request');

  ({isDeprecatedPackage} = require('./deprecated-packages'));",30,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/install.js,file,33,33,2020-05-18T14:51:35-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192794,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/install.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\install.js,file,20,13,33,33,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
369,Static Analysis,2020-05-18T14:51:00-04:00,73618,2020-05-18T14:54:28-04:00,medium,false-positive,"label += `@${packageVersion}`;
        }
        if (!options.argv.json) {
          process.stdout.write(`Installing ${label} `);
          if (installGlobally) {
            process.stdout.write(`to ${this.atomPackagesDirectory} `);
          }",284,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/install.js,file,287,287,2020-05-18T14:51:35-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,192923,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/install.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\install.js,file,18,11,287,287,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
370,Static Analysis,2020-05-18T14:51:00-04:00,73619,2020-05-18T14:54:28-04:00,high,escalated,"commands = [];
        ref = this.getPackageDependencies();
        for (name in ref) {
          version = ref[name];
          ((name, version) => {
            return commands.push((next) => {
              if (this.repoLocalPackagePathRegex.test(version)) {",400,,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/lib/install.js,file,403,403,2020-05-18T14:51:35-04:00,Static Analysis,6569b353992e88510a975ec3412e07f9c2539e0cf8eb813d02c1c97e2a312d82,192958,high,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Generic Object Injection Sink,plain-text,Atom x64/resources/app/apm/lib/install.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\install.js,file,30,21,403,403,security,detect-object-injection,ESLint,ESLINT-SECURITY-detect-object-injection,Detect object injection,"Detects `variable[key]` as a left- or right-hand assignment operand.

More information: [The Dangers of Square Bracket Notation](https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/the-dangers-of-square-bracket-notation.md)",markdown,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.9251437,1
371,Static Analysis,2020-05-18T14:51:00-04:00,73620,2020-05-18T14:54:28-04:00,high,escalated,"dependencyPath = this.getRepoLocalPackagePath(dependencies[packageName]);
            packageDependencyPath = this.getRepoLocalPackagePath(packageSpec);
            if (!(packageDependencyPath && dependencyPath === packageDependencyPath)) {
              filteredPackages[packageName] = packageSpec;
            }
          }
          return filteredPackages;",448,,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/lib/install.js,file,451,451,2020-05-18T14:51:35-04:00,Static Analysis,6569b353992e88510a975ec3412e07f9c2539e0cf8eb813d02c1c97e2a312d82,192974,high,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Generic Object Injection Sink,plain-text,Atom x64/resources/app/apm/lib/install.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\install.js,file,44,15,451,451,security,detect-object-injection,ESLint,ESLINT-SECURITY-detect-object-injection,Detect object injection,"Detects `variable[key]` as a left- or right-hand assignment operand.

More information: [The Dangers of Square Bracket Notation](https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/the-dangers-of-square-bracket-notation.md)",markdown,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.9251437,1
372,Static Analysis,2020-05-18T14:51:00-04:00,73621,2020-05-18T14:54:28-04:00,high,escalated,"return this.getResourcePath(function(resourcePath) {
          var atomMetadata, error, ref;
          try {
            atomMetadata = JSON.parse(fs.readFileSync(path.join(resourcePath, 'package.json')));
          } catch (error1) {
            error = error1;
            return callback(false);",550,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/lib/install.js,file,553,553,2020-05-18T14:51:35-04:00,Static Analysis,374ad040fff48d9edaa97052bf28a674b1f4e79af66a0448f1ab1699003790cd,192989,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Found fs.readFileSync with non literal argument at index 0,plain-text,Atom x64/resources/app/apm/lib/install.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\install.js,file,54,39,553,553,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.9758102,1
373,Static Analysis,2020-05-18T14:51:00-04:00,73623,2020-05-18T14:54:28-04:00,medium,false-positive,"if (!options.argv.json) {
          process.stdout.write(`Installing ${label} `);
          if (installGlobally) {
            process.stdout.write(`to ${this.atomPackagesDirectory} `);
          }
        }
        return this.requestPackage(packageName, (error, pack) => {",286,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/install.js,file,289,289,2020-05-18T14:51:35-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,192924,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/install.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\install.js,file,20,13,289,289,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
374,Static Analysis,2020-05-18T14:51:00-04:00,73624,2020-05-18T14:54:28-04:00,high,escalated,"parseOptions(argv) {
        var options;
        options = yargs(argv).wrap(Math.min(100, yargs.terminalWidth()));
        options.usage(""\nUsage: apm install [<package_name>...]\n       apm install <package_name>@<package_version>\n       apm install <git_remote>\n       apm install <github_username>/<github_project>\n       apm install --packages-file my-packages.txt\n       apm i (with any of the previous argument usage)\n\nInstall the given Atom package to ~/.atom/packages/<package_name>.\n\nIf no package name is given then all the dependencies in the package.json\nfile are installed to the node_modules folder in the current working\ndirectory.\n\nA packages file can be specified that is a newline separated list of\npackage names to install with optional versions using the\n`package-name@version` syntax."");
        options.alias('c', 'compatible').string('compatible').describe('compatible', 'Only install packages/themes compatible with this Atom version');
        options.alias('h', 'help').describe('help', 'Print this usage message');
        options.alias('s', 'silent').boolean('silent').describe('silent', 'Set the npm log level to silent');",50,,,,CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'),http://cwevis.org/browse/79,79,Atom x64/resources/app/apm/lib/install.js,file,53,53,2020-05-18T14:51:35-04:00,Static Analysis,b4414dd3b1087806bb332146e753f5917a3aec259e29c568ca289f9ab428d0d4,192814,high,,,CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS),http://cwevis.org/browse/80,80,HTML passed in to function 'options.usage',plain-text,Atom x64/resources/app/apm/lib/install.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\install.js,file,22,9,53,53,xss,no-mixed-html,ESLint,ESLINT-XSS-no-mixed-html,No mixed html,"Wanted a way to catch XSS issues in code before they end up in production.

## Rule Details

This rule aims to catch as many XSS issues by examining the code as possible.
The rule checks for mixed html/non-html content, unescaped input, etc.

The following patterns are considered warnings:

```js

// Mixed content
var x = '<div>' + input + '</div>';
$node.html( '<div>' + input + '</div>' );

// Unsafe container names.
var html = input;
var text = htmlInput;
displayValue( htmlInput );

// Checking certain expression parameters that might end up in the variables.
var htmlItems = [ input1, input2 ].join();
var textItems = [ '<div>', input, '</div>' ].join();
var tag = isNumbered ? '<ol>' : '<ul>';

// Checking function return values.
var createHtml = function( item ) { return item.name; }
var createBox = function( item ) { return '<div>' + encode( item ) + '</div>' }

```

The following patterns are not warnings:

```js

// Proper encoding
var html = '<div>' + encode( input ) + '</div>';
$node.html( '<div>' + encode( input ) + '</div>' );

// Proper container names
var html = '<img src=""happy.png"">';
var text = textbox.value;

```

## When Not To Use It

If you are creating a Node.js application that doesn't output any HTML, you can
safely disable this rule.

## Further Reading

- [XSS Prevention CHeat Sheet - OWASP](https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet)",markdown,rule-396ebe8bb0c3dc5d4eb2b5368a97688fdb0f2587416453645c3d06db2b216479,Cross-site Scripting (XSS),"Cross-site scripting (XSS) vulnerabilities occur when:
1. Untrusted data enters a web application, typically from a web request.
2. The web application dynamically generates a web page that contains this untrusted data.
3. During page generation, the application does not prevent the data from containing content that is executable by a web browser, such as JavaScript, HTML tags, HTML attributes, mouse events, Flash, ActiveX, etc.
4. A victim visits the generated web page through a web browser, which contains malicious script that was injected using the untrusted data.
5. Since the script comes from a web page that was sent by the web server, the victim's web browser executes the malicious script in the context of the web server's domain.
6. This effectively violates the intention of the web browser's same-origin policy, which states that scripts in one domain should not be able to access resources or run code in a different domain.
There are three main kinds of XSS:

*Reflected XSS (or Non-Persistent)*

The server reads data directly from the HTTP request and reflects it back in the HTTP response. Reflected XSS exploits occur when an attacker causes a victim to supply dangerous content to a vulnerable web application, which is then reflected back to the victim and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to the victim. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces a victim to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the victim, the content is executed by the victim's browser.

*Stored XSS (or Persistent)*

The application stores dangerous data in a database, message forum, visitor log, or other trusted data store. At a later time, the dangerous data is subsequently read back into the application and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. For example, the attacker might inject XSS into a log message, which might not be handled properly when an administrator views the logs.

*DOM-Based XSS*

In DOM-based XSS, the client performs the injection of XSS into the page; in the other types, the server performs the injection. DOM-based XSS generally involves server-controlled, trusted script that is sent to the client, such as Javascript that performs sanity checks on a form before the user submits it. If the server-supplied script processes user-supplied data and then injects it back into the web page (such as with dynamic HTML), then DOM-based XSS is possible.

Once the malicious script is injected, the attacker can perform a variety of malicious activities. The attacker could transfer private information, such as cookies that may include session information, from the victim's machine to the attacker. The attacker could send malicious requests to a web site on behalf of the victim, which could be especially dangerous to the site if the victim has administrator privileges to manage that site. Phishing attacks could be used to emulate trusted web sites and trick the victim into entering a password, allowing the attacker to compromise the victim's account on that web site. Finally, the script could exploit a vulnerability in the web browser itself possibly taking over the victim's machine, sometimes referred to as ""drive-by hacking.""

In many cases, the attack can be launched without the victim even being aware of it. Even with careful users, attackers frequently use a variety of methods to encode the malicious portion of the attack, such as URL encoding or Unicode, so the request looks less suspicious.

**Guidance**

To remedy XSS vulnerabilities, it is important to never use untrusted or unfiltered data within the code of a HTML page.

Untrusted data can originate not only form the client but potentially a third party or previously uploaded file etc.

Filtering of untrusted data typically involves converting special characters to their HTML entity encoded counterparts (however, other methods do exist, see references).

These special characters include:

* `&`
* `<`
* `>`
* `""`
* `'`
* `/`

An example of HTML entity encoding is converting `<` to `&lt;`.

Although it is possible to filter untrusted input, there are five locations within an HTML page where untrusted input (even if it has been filtered) should never be placed:

1. Directly in a script.
2. Inside an HTML comment.
3. In an attribute name.
4. In a tag name.
5. Directly in CSS.

Each of these locations have their own form of escaping and filtering.

Because many browsers attempt to implement XSS protection, any manual verification of this finding should be conducted using multiple different browsers and browser
versions.

**References**

- [WASC](http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting)
- [Secunia](http://secunia.com/advisories/9716/)
- [OWASP XSS Prevention Cheat Sheet](https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet)
- [OWASP DOM Based XSS](https://www.owasp.org/index.php/DOM_Based_XSS)
- [OWASP DOM Based XSS Prevention Cheat Sheet](https://www.owasp.org/index.php/DOM_based_XSS_Prevention_Cheat_Sheet)",markdown,,,escalated,0.8266207,1
375,Static Analysis,2020-05-18T14:51:00-04:00,73626,2020-05-18T14:54:28-04:00,high,escalated,"return this.getResourcePath((resourcePath) => {
          var CompileCache, onDirectory, onFile;
          try {
            CompileCache = require(path.join(resourcePath, 'src', 'compile-cache'));
            onDirectory = function(directoryPath) {
              return path.basename(directoryPath) !== 'node_modules';
            };",531,,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/lib/install.js,file,534,534,2020-05-18T14:51:35-04:00,Static Analysis,fd4ac87b1b2792fefa27e1f6acf43697d4e345cb11d008b0fe44dc1c9b95d9c2,192982,high,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Found non-literal argument in require,plain-text,Atom x64/resources/app/apm/lib/install.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\install.js,file,84,28,534,534,security,detect-non-literal-require,ESLint,ESLINT-SECURITY-detect-non-literal-require,Detect non literal require,"Detects `require(variable)`, which might allow an attacker to load and run arbitrary code, or access arbitrary files on disk.

More information: http://www.bennadel.com/blog/2169-where-does-node-js-and-require-look-for-modules.htm",markdown,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.94545025,1
376,Static Analysis,2020-05-18T14:51:00-04:00,73627,2020-05-18T14:54:28-04:00,medium,false-positive,"installLocalPackage(packageName, packagePath, options, callback) {
        var commands;
        if (!options.argv.json) {
          process.stdout.write(`Installing ${packageName} from ${packagePath.slice('file:'.length)} `);
          commands = [];
          commands.push((next) => {
            return this.installModule(options, {",357,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/install.js,file,360,360,2020-05-18T14:51:35-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,192945,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/install.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\install.js,file,18,11,360,360,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
377,Static Analysis,2020-05-18T14:51:00-04:00,73628,2020-05-18T14:54:28-04:00,high,escalated,"commands.push(function({installPath}, next) {
            var json, metadata;
            if (installPath != null) {
              metadata = JSON.parse(fs.readFileSync(path.join(installPath, 'package.json'), 'utf8'));
              json = {installPath, metadata};
              return next(null, json);
            } else {",367,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/lib/install.js,file,370,370,2020-05-18T14:51:35-04:00,Static Analysis,374ad040fff48d9edaa97052bf28a674b1f4e79af66a0448f1ab1699003790cd,192950,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Found fs.readFileSync with non literal argument at index 0,plain-text,Atom x64/resources/app/apm/lib/install.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\install.js,file,52,37,370,370,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.9758102,1
378,Static Analysis,2020-05-18T14:51:00-04:00,73630,2020-05-18T14:54:28-04:00,medium,false-positive,"buildArgs.push(vsArgs);
        }
        fs.makeTreeSync(this.atomDirectory);
        env = _.extend({}, process.env, {
          HOME: this.atomNodeDirectory,
          RUSTUP_HOME: config.getRustupHomeDirPath()
        });",490,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/install.js,file,493,493,2020-05-18T14:51:35-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,192979,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/install.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\install.js,file,35,28,493,493,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
379,Static Analysis,2020-05-18T14:51:00-04:00,73631,2020-05-18T14:54:28-04:00,medium,false-positive,"temp = require('temp');

  hostedGitInfo = require('hosted-git-info');

  config = require('./apm');",20,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/install.js,file,23,23,2020-05-18T14:51:35-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192785,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/install.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\install.js,file,26,19,23,23,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
380,Static Analysis,2020-05-18T14:51:00-04:00,73633,2020-05-18T14:54:28-04:00,high,escalated,"// `package.json`.  Versioned `packageDependencies` are always returned.
          filteredPackages = {};
          for (packageName in packageDependencies) {
            packageSpec = packageDependencies[packageName];
            dependencyPath = this.getRepoLocalPackagePath(dependencies[packageName]);
            packageDependencyPath = this.getRepoLocalPackagePath(packageSpec);
            if (!(packageDependencyPath && dependencyPath === packageDependencyPath)) {",444,,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/lib/install.js,file,447,447,2020-05-18T14:51:35-04:00,Static Analysis,6569b353992e88510a975ec3412e07f9c2539e0cf8eb813d02c1c97e2a312d82,192972,high,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Generic Object Injection Sink,plain-text,Atom x64/resources/app/apm/lib/install.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\install.js,file,59,27,447,447,security,detect-object-injection,ESLint,ESLINT-SECURITY-detect-object-injection,Detect object injection,"Detects `variable[key]` as a left- or right-hand assignment operand.

More information: [The Dangers of Square Bracket Notation](https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/the-dangers-of-square-bracket-notation.md)",markdown,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.9251437,1
381,Static Analysis,2020-05-18T14:51:00-04:00,73634,2020-05-18T14:54:28-04:00,medium,false-positive,"Git = require('git-utils');

  semver = require('semver');

  temp = require('temp');",16,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/install.js,file,19,19,2020-05-18T14:51:35-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192783,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/install.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\install.js,file,19,12,19,19,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
382,Static Analysis,2020-05-18T14:51:00-04:00,73635,2020-05-18T14:54:28-04:00,medium,false-positive,"config = require('./apm');

  Command = require('./command');

  fs = require('./fs');",24,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/install.js,file,27,27,2020-05-18T14:51:35-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192787,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/install.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\install.js,file,20,13,27,27,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270798,0
383,Static Analysis,2020-05-18T14:51:00-04:00,73636,2020-05-18T14:54:28-04:00,medium,false-positive,"semver = require('semver');

  temp = require('temp');

  hostedGitInfo = require('hosted-git-info');",18,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/install.js,file,21,21,2020-05-18T14:51:35-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192784,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/install.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\install.js,file,17,10,21,21,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270798,0
384,Static Analysis,2020-05-18T14:51:00-04:00,73637,2020-05-18T14:54:28-04:00,medium,false-positive,"path = require('path');

  _ = require('underscore-plus');

  async = require('async');",6,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/install.js,file,9,9,2020-05-18T14:51:35-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192777,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/install.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\install.js,file,14,7,9,9,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
385,Static Analysis,2020-05-18T14:51:00-04:00,73638,2020-05-18T14:54:28-04:00,medium,false-positive,"({name} = data.metadata);
          targetDir = path.join(this.atomPackagesDirectory, name);
          if (!options.argv.json) {
            process.stdout.write(`Moving ${name} to ${targetDir} `);
          }
          return fs.cp(cloneDir, targetDir, (err) => {
            var json;",648,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/install.js,file,651,651,2020-05-18T14:51:35-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,193080,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/install.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\install.js,file,20,13,651,651,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
386,Static Analysis,2020-05-18T14:51:00-04:00,73639,2020-05-18T14:54:28-04:00,high,escalated,"commands.push(function({installPath}, next) {
              var json;
              if (installPath != null) {
                metadata = JSON.parse(fs.readFileSync(path.join(installPath, 'package.json'), 'utf8'));
                json = {installPath, metadata};
                return next(null, json);
              } else {",324,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/lib/install.js,file,327,327,2020-05-18T14:51:35-04:00,Static Analysis,374ad040fff48d9edaa97052bf28a674b1f4e79af66a0448f1ab1699003790cd,192936,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Found fs.readFileSync with non literal argument at index 0,plain-text,Atom x64/resources/app/apm/lib/install.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\install.js,file,54,39,327,327,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.9758102,1
387,Static Analysis,2020-05-18T14:51:00-04:00,73640,2020-05-18T14:54:28-04:00,high,escalated,"getRepositoryHeadSha(repoDir, callback) {
        var err, repo, sha;
        try {
          repo = Git.open(repoDir);
          sha = repo.getReferenceTarget(""HEAD"");
          return callback(null, sha);
        } catch (error1) {",722,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/lib/install.js,file,725,725,2020-05-18T14:51:35-04:00,Static Analysis,b80ca388d465258c8abb19130f91ee150a36df47299916a74d04b1c7580ca12e,193112,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Found fs.open with non literal argument at index 0,plain-text,Atom x64/resources/app/apm/lib/install.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\install.js,file,26,18,725,725,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.9677861,1
388,Static Analysis,2020-05-18T14:51:00-04:00,73644,2020-05-18T14:54:28-04:00,medium,false-positive,"cloneNormalizedUrl(url, cloneDir, options, callback) {
        var Develop, develop;
        // Require here to avoid circular dependency
        Develop = require('./develop');
        develop = new Develop();
        return develop.cloneRepository(url, cloneDir, options, function(err) {
          return callback(err);",706,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/install.js,file,709,709,2020-05-18T14:51:35-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,193100,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/install.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\install.js,file,26,19,709,709,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
389,Static Analysis,2020-05-18T14:51:00-04:00,73647,2020-05-18T14:54:28-04:00,high,escalated,"tasks.push(function(data, next) {
          var metadataFilePath;
          metadataFilePath = CSON.resolve(path.join(cloneDir, 'package'));
          return CSON.readFile(metadataFilePath, function(err, metadata) {
            data.metadataFilePath = metadataFilePath;
            data.metadata = metadata;
            return next(err, data);",627,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/lib/install.js,file,630,630,2020-05-18T14:51:35-04:00,Static Analysis,0625c2fcb423623e72c1716ed8b41ba08c450e5e4a962c99f81aa71627b7bfb0,193067,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Found fs.readFile with non literal argument at index 0,plain-text,Atom x64/resources/app/apm/lib/install.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\install.js,file,31,18,630,630,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.9743929,1
390,Static Analysis,2020-05-18T14:51:00-04:00,73650,2020-05-18T14:54:28-04:00,medium,false-positive,"var CSON, Command, Git, Install, RebuildModuleCache, _, assert, async, config, fs, hostedGitInfo, isDeprecatedPackage, path, request, semver, temp, yargs,
    boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

  assert = require('assert');

  path = require('path');",2,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/install.js,file,5,5,2020-05-18T14:51:35-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192775,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/install.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\install.js,file,19,12,5,5,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
391,Static Analysis,2020-05-18T14:51:00-04:00,73652,2020-05-18T14:54:28-04:00,high,escalated,"if (!fs.isFileSync(filePath)) {
          throw new Error(`File '${filePath}' does not exist`);
        }
        packages = fs.readFileSync(filePath, 'utf8');
        return this.sanitizePackageNames(packages.split(/\s/));
      }",511,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/lib/install.js,file,514,514,2020-05-18T14:51:35-04:00,Static Analysis,374ad040fff48d9edaa97052bf28a674b1f4e79af66a0448f1ab1699003790cd,192981,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Found fs.readFileSync with non literal argument at index 0,plain-text,Atom x64/resources/app/apm/lib/install.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\install.js,file,35,20,514,514,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.9758102,1
392,Static Analysis,2020-05-18T14:51:00-04:00,73655,2020-05-18T14:54:28-04:00,medium,false-positive,"fs = require('./fs');

  RebuildModuleCache = require('./rebuild-module-cache');

  request = require('./request');",28,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/install.js,file,31,31,2020-05-18T14:51:35-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192792,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/install.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\install.js,file,31,24,31,31,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
393,Static Analysis,2020-05-18T14:51:00-04:00,73656,2020-05-18T14:54:28-04:00,high,escalated,"}
          installedPackagesInfo = _.compact(installedPackagesInfo);
          installedPackagesInfo = installedPackagesInfo.filter(function(item, idx) {
            return packageNames[idx] !== ""."";
          });
          if (options.argv.json) {
            console.log(JSON.stringify(installedPackagesInfo, null, ""  ""));",811,,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/lib/install.js,file,814,814,2020-05-18T14:51:36-04:00,Static Analysis,6569b353992e88510a975ec3412e07f9c2539e0cf8eb813d02c1c97e2a312d82,193179,high,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Generic Object Injection Sink,plain-text,Atom x64/resources/app/apm/lib/install.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\install.js,file,37,20,814,814,security,detect-object-injection,ESLint,ESLINT-SECURITY-detect-object-injection,Detect object injection,"Detects `variable[key]` as a left- or right-hand assignment operand.

More information: [The Dangers of Square Bracket Notation](https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/the-dangers-of-square-bracket-notation.md)",markdown,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.9251437,1
394,Static Analysis,2020-05-18T14:51:00-04:00,73658,2020-05-18T14:54:28-04:00,medium,false-positive,"var buildArgs, buildOptions, env, vsArgs;
        process.stdout.write('Checking for native build tools ');
        buildArgs = ['--globalconfig', config.getGlobalConfigPath(), '--userconfig', config.getUserConfigPath(), 'build'];
        buildArgs.push(path.resolve(__dirname, '..', 'native-module'));
        buildArgs.push(...this.getNpmBuildFlags());
        if (vsArgs = this.getVisualStudioFlags()) {
          buildArgs.push(vsArgs);",484,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/install.js,file,487,487,2020-05-18T14:51:35-04:00,Static Analysis,9ced861d153ab418069da667a5c9f5fefe90861e103a53df87d410e5550ee1e7,192976,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'__dirname' is not defined.,plain-text,Atom x64/resources/app/apm/lib/install.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\install.js,file,46,37,487,487,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.09524149,0
395,Static Analysis,2020-05-18T14:51:00-04:00,73659,2020-05-18T14:54:28-04:00,high,escalated,"if (options.argv.production) {
          installArgs.push('--production');
        }
        if (vsArgs = this.getVisualStudioFlags()) {
          installArgs.push(vsArgs);
        }
        fs.makeTreeSync(this.atomDirectory);",79,,,,CWE-697: Incorrect Comparison,http://cwevis.org/browse/697,697,Atom x64/resources/app/apm/lib/install.js,file,82,82,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-c271f2bb931810eef633f7c736d1dd934fbd6ed5f62ac8d8ea39ade811190622,Comparison,,,,,escalated,0.9110538,1
396,Static Analysis,2020-05-18T14:51:00-04:00,73661,2020-05-18T14:54:28-04:00,medium,false-positive,"Command = require('./command');

  fs = require('./fs');

  RebuildModuleCache = require('./rebuild-module-cache');",26,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/install.js,file,29,29,2020-05-18T14:51:35-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192789,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/install.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\install.js,file,15,8,29,29,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
397,Static Analysis,2020-05-18T14:51:00-04:00,73662,2020-05-18T14:54:28-04:00,high,escalated,"callback(`No available version compatible with the installed Atom version: ${this.installedAtomVersion}`);
              return;
            }
            ({tarball} = (ref1 = (ref2 = pack.versions[packageVersion]) != null ? ref2.dist : void 0) != null ? ref1 : {});
            if (!tarball) {
              this.logFailure();
              callback(`Package version: ${packageVersion} not found`);",303,,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/lib/install.js,file,306,306,2020-05-18T14:51:35-04:00,Static Analysis,6569b353992e88510a975ec3412e07f9c2539e0cf8eb813d02c1c97e2a312d82,192931,high,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Generic Object Injection Sink,plain-text,Atom x64/resources/app/apm/lib/install.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\install.js,file,71,42,306,306,security,detect-object-injection,ESLint,ESLINT-SECURITY-detect-object-injection,Detect object injection,"Detects `variable[key]` as a left- or right-hand assignment operand.

More information: [The Dangers of Square Bracket Notation](https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/the-dangers-of-square-bracket-notation.md)",markdown,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.9251437,1
398,Static Analysis,2020-05-18T14:51:00-04:00,73663,2020-05-18T14:54:28-04:00,medium,false-positive,"CSON = require('season');

  yargs = require('yargs');

  Git = require('git-utils');",12,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/install.js,file,15,15,2020-05-18T14:51:35-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192781,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/install.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\install.js,file,18,11,15,15,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
399,Static Analysis,2020-05-18T14:51:00-04:00,73664,2020-05-18T14:54:28-04:00,high,escalated,"filteredPackages = {};
          for (packageName in packageDependencies) {
            packageSpec = packageDependencies[packageName];
            dependencyPath = this.getRepoLocalPackagePath(dependencies[packageName]);
            packageDependencyPath = this.getRepoLocalPackagePath(packageSpec);
            if (!(packageDependencyPath && dependencyPath === packageDependencyPath)) {
              filteredPackages[packageName] = packageSpec;",445,,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/lib/install.js,file,448,448,2020-05-18T14:51:35-04:00,Static Analysis,1a29c50dd186b38d39608bcb941576859226ae48aa98ef8eed615bd68ad8ae9a,192973,high,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Function Call Object Injection Sink,plain-text,Atom x64/resources/app/apm/lib/install.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\install.js,file,84,59,448,448,security,detect-object-injection,ESLint,ESLINT-SECURITY-detect-object-injection,Detect object injection,"Detects `variable[key]` as a left- or right-hand assignment operand.

More information: [The Dangers of Square Bracket Notation](https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/the-dangers-of-square-bracket-notation.md)",markdown,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.92730236,1
400,Static Analysis,2020-05-18T14:51:00-04:00,73665,2020-05-18T14:54:28-04:00,medium,false-positive,"getGitErrorMessage(pack) {
        var message;
        message = `Failed to install ${pack.name} because Git was not found.\n\nThe ${pack.name} package has module dependencies that cannot be installed without Git.\n\nYou need to install Git and add it to your path environment variable in order to install this package.\n`;
        switch (process.platform) {
          case 'win32':
            message += ""\nYou can install Git by downloading, installing, and launching GitHub for Windows: https://windows.github.com\n"";
            break;",155,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/install.js,file,158,158,2020-05-18T14:51:35-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,192869,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/install.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\install.js,file,24,17,158,158,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
401,Static Analysis,2020-05-18T14:51:00-04:00,73667,2020-05-18T14:54:28-04:00,medium,false-positive,"return this.getResourcePath((resourcePath) => {
          var CompileCache, onDirectory, onFile;
          try {
            CompileCache = require(path.join(resourcePath, 'src', 'compile-cache'));
            onDirectory = function(directoryPath) {
              return path.basename(directoryPath) !== 'node_modules';
            };",531,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/install.js,file,534,534,2020-05-18T14:51:35-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192983,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/install.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\install.js,file,35,28,534,534,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
402,Static Analysis,2020-05-18T14:51:00-04:00,73671,2020-05-18T14:54:28-04:00,medium,false-positive,"installArgs.push(vsArgs);
        }
        fs.makeTreeSync(this.atomDirectory);
        env = _.extend({}, process.env, {
          HOME: this.atomNodeDirectory,
          RUSTUP_HOME: config.getRustupHomeDirPath()
        });",197,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/install.js,file,200,200,2020-05-18T14:51:35-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,192894,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/install.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\install.js,file,35,28,200,200,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
403,Static Analysis,2020-05-18T14:51:00-04:00,73673,2020-05-18T14:54:28-04:00,high,escalated,"if (code === 0) {
            if (installGlobally) {
              commands = [];
              children = fs.readdirSync(nodeModulesDirectory).filter(function(dir) {
                return dir !== "".bin"";
              });
              assert.equal(children.length, 1, ""Expected there to only be one child in node_modules"");",103,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/lib/install.js,file,106,106,2020-05-18T14:51:35-04:00,Static Analysis,cbb6e839417e7d17515dcb248b2294ad68b4b8c574da732c47e66bfae873164c,192845,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Found fs.readdirSync with non literal argument at index 0,plain-text,Atom x64/resources/app/apm/lib/install.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\install.js,file,40,26,106,106,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.978149,1
404,Static Analysis,2020-05-18T14:51:00-04:00,73675,2020-05-18T14:54:28-04:00,medium,false-positive,"yargs = require('yargs');

  Git = require('git-utils');

  semver = require('semver');",14,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/install.js,file,17,17,2020-05-18T14:51:35-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192782,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/install.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\install.js,file,16,9,17,17,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
405,Static Analysis,2020-05-18T14:51:00-04:00,73676,2020-05-18T14:54:28-04:00,medium,false-positive,"({isDeprecatedPackage} = require('./deprecated-packages'));

  module.exports = Install = (function() {
    class Install extends Command {
      constructor() {
        super();",34,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/install.js,file,37,37,2020-05-18T14:51:35-04:00,Static Analysis,62173c3357301b64bcb7cb49ad65b9eeb8aa24356212b93fe0fe0166d3218ce7,192799,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'module' is not defined.,plain-text,Atom x64/resources/app/apm/lib/install.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\install.js,file,9,3,37,37,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.068299174,0
406,Static Analysis,2020-05-18T14:51:00-04:00,73677,2020-05-18T14:54:28-04:00,medium,false-positive,"installModules(options, callback) {
        boundMethodCheck(this, Install);
        if (!options.argv.json) {
          process.stdout.write('Installing modules ');
        }
        return this.forkInstallCommand(options, (...args) => {
          if (options.argv.json) {",169,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/install.js,file,172,172,2020-05-18T14:51:35-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,192879,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/install.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\install.js,file,18,11,172,172,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
407,Static Analysis,2020-05-18T14:51:00-04:00,73678,2020-05-18T14:54:28-04:00,high,escalated,"latestVersion = null;
        ref1 = (ref = pack.versions) != null ? ref : {};
        for (version in ref1) {
          metadata = ref1[version];
          if (!semver.valid(version)) {
            continue;
          }",571,,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/lib/install.js,file,574,574,2020-05-18T14:51:35-04:00,Static Analysis,6569b353992e88510a975ec3412e07f9c2539e0cf8eb813d02c1c97e2a312d82,193035,high,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Generic Object Injection Sink,plain-text,Atom x64/resources/app/apm/lib/install.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\install.js,file,35,22,574,574,security,detect-object-injection,ESLint,ESLINT-SECURITY-detect-object-injection,Detect object injection,"Detects `variable[key]` as a left- or right-hand assignment operand.

More information: [The Dangers of Square Bracket Notation](https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/the-dangers-of-square-bracket-notation.md)",markdown,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.9251437,1
408,Static Analysis,2020-05-18T14:51:00-04:00,73679,2020-05-18T14:54:28-04:00,high,escalated,"source: packageUrl,
            sha: data.sha
          };
          return CSON.writeFile(data.metadataFilePath, data.metadata, function(err) {
            return next(err, data);
          });
        });",639,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/lib/install.js,file,642,642,2020-05-18T14:51:35-04:00,Static Analysis,de156296231aecb4c4578ea09f38338cd08718481e3e00cb180cee34f584d19d,193075,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Found fs.writeFile with non literal argument at index 0,plain-text,Atom x64/resources/app/apm/lib/install.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\install.js,file,32,18,642,642,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.97772336,1
409,Static Analysis,2020-05-18T14:51:00-04:00,73680,2020-05-18T14:54:28-04:00,medium,false-positive,"installArgs.push(vsArgs);
        }
        fs.makeTreeSync(this.atomDirectory);
        env = _.extend({}, process.env, {
          HOME: this.atomNodeDirectory,
          RUSTUP_HOME: config.getRustupHomeDirPath()
        });",83,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/install.js,file,86,86,2020-05-18T14:51:35-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,192838,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/install.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\install.js,file,35,28,86,86,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
410,Static Analysis,2020-05-18T14:51:00-04:00,73754,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Common/Rar/RarCryptoBinaryReader/ReadBytes,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201192,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Common/Rar/RarCryptoBinaryReader/ReadBytes,SharpCompress/Common/Rar/RarCryptoBinaryReader/ReadBytes,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
411,Static Analysis,2020-05-18T14:51:00-04:00,73773,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Compressors/Rar/RarStream/Read,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201144,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Compressors/Rar/RarStream/Read,SharpCompress/Compressors/Rar/RarStream/Read,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
412,Static Analysis,2020-05-18T14:51:00-04:00,73800,2020-05-18T14:54:28-04:00,high,escalated,,,,,,CWE-227: 7PK - API Abuse,http://cwevis.org/browse/227,227,Microsoft/IdentityModel/Clients/ActiveDirectory/Native/SafeBCryptHashHandle/BCryptDestroyHash,logical,,,2020-05-18T14:52:00-04:00,Static Analysis,dbd57bbd7b01d2cdc8d58222b94308e03da707a5c7a5e9eab6acb7a083c63ff7,202209,high,,,CWE-676: Use of Potentially Dangerous Function,http://cwevis.org/browse/676,676,This type or method is decorated with [SuppressUnmanagedCodeSecurity] which reduce the number of security checks done when unmanaged code is called. Ensure that use of this attribute does not compromise the security of the application.,plain-text,Microsoft/IdentityModel/Clients/ActiveDirectory/Native/SafeBCryptHashHandle/BCryptDestroyHash,Microsoft/IdentityModel/Clients/ActiveDirectory/Native/SafeBCryptHashHandle/BCryptDestroyHash,logical,,,,,,ReviewSuppressUnmanagedCodeSecurityUsageRule,Gendarme,GEND-ReviewSuppressUnmanagedCodeSecurityUsageRule,Review Suppress Unmanaged Code Security Usage ,"This rule fires if a type or method is decorated with the
**[SuppressUnmanagedCodeSecurity]**attribute. This attribute reduces the
security checks done when executing unmanaged code and its usage should
be reviewed to confirm that no exploitable security holes are present.

Example:


```csharp
[SuppressUnmanagedCodeSecurity]
public class Safe {
    [DllImport (""User32.dll"")]
    static extern Boolean MessageBeep (UInt32 beepType);
}
```",markdown,rule-dc56fd6c6aaaf7aef3e91a691e1f8bd8f7311763a2d3286fce16c6c5cf52b5e2,API Abuse,"The software uses an API in a manner contrary to its intended use.

An API is a contract between a caller and a callee. The most common forms of API misuse occurs when the caller does not honor its end of this contract. For example, if a program does not call chdir() after calling chroot(), it violates the contract that specifies how to change the active root directory in a secure fashion. Another good example of library abuse is expecting the callee to return trustworthy DNS information to the caller. In this case, the caller misuses the callee API by making certain assumptions about its behavior (that the return value can be used for authentication purposes). One can also violate the caller-callee contract from the other side. For example, if a coder subclasses SecureRandom and returns a non-random value, the contract is violated.",markdown,,,escalated,0.9466878,1
413,Static Analysis,2020-05-18T14:51:00-04:00,73814,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Mono/Options/OptionSet/ArgumentEnumerator/ArgumentEnumerator,logical,,,2020-05-18T14:51:56-04:00,Static Analysis,ccb10c4fffa4c268778ab2d2a0569f5e94af09549c82894b5d45155ba8e56ef2,200138,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,This disposable local is not guaranteed to be disposed of before the method returns. Use a 'using' statement or surround the local's usage with a try/finally block. Local of type 'IEnumerator`1' is not disposed of (at least not locally).,plain-text,Mono/Options/OptionSet/ArgumentEnumerator/ArgumentEnumerator,Mono/Options/OptionSet/ArgumentEnumerator/ArgumentEnumerator,logical,,,,,,EnsureLocalDisposalRule,Gendarme,GEND-EnsureLocalDisposalRule,Ensure Local Disposal ,"This rule checks that disposable locals are always disposed of before
the method returns. Use a 'using' statement (or a try/finally block) to
guarantee local disposal even in the event an unhandled exception
occurs.

**Bad** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    DecodeHeader (stream);
    if (!DecodedHeader.HasContent) {
        return;
    }
    DecodeContent (stream);
    stream.Dispose ();
}
```
**Good** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        DecodeHeader (stream);
        if (!DecodedHeader.HasContent) {
            return;
        }
        DecodeContent (stream);
    }
}
```
**Bad** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    Decode (stream);
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
    stream.Dispose ();
}
```
**Good** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        Decode (stream);
    }
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97965205,1
414,Static Analysis,2020-05-18T14:51:00-04:00,73896,2020-05-18T14:54:28-04:00,high,escalated,,,,,,CWE-695: Use of Low-Level Functionality,http://cwevis.org/browse/695,695,Squirrel/Shell/ShellLink/PropVariant/(self),logical,,,2020-05-18T14:51:57-04:00,Static Analysis,3ac9036736202c636e5a647bb8073bf5337a353e654d9216f8af1cf9293e2f3b,200969,high,,,CWE-695: Use of Low-Level Functionality,http://cwevis.org/browse/695,695,The type uses System.IntPtr or System.UIntPtr instead of System.Runtime.InteropServices.SafeHandle. Consider changing the code to use SafeHandle.,plain-text,Squirrel/Shell/ShellLink/PropVariant/(self),Squirrel/Shell/ShellLink/PropVariant/(self),logical,,,,,,PreferSafeHandleRule,Gendarme,GEND-PreferSafeHandleRule,Prefer Safe Handle ,"In general it is best to interop with native code using
**System.Runtime.InteropServices.SafeHandle** instead of
**System.IntPtr** or **System.UIntPtr** because:

SafeHandles are type safe.
SafeHandles are guaranteed to be disposed of during exceptional
conditions like a thread aborting unexpectedly or a stack overflow.
SafeHandles are not vulnerable to reycle attacks.
You don't need to write a finalizer which can be tricky to do because
they execute within their own thread, may execute on partially
constructed objects, and normally tear down the application if you allow
an exception to escape from them.


 **Bad** example:


```csharp
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable.
public sealed class Database {
    ~Database ()
    {
        // This will execute even if the ctor throws so it is important to check
        // to see if the fields are initialized.
        if (m_database != IntPtr.Zero) {
            NativeMethods.sqlite3_close (m_database);
        }
    }

    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        int err = NativeMethods.sqlite3_open_v2 (path, out m_database, flags, IntPtr.Zero);
        // handle errors
    }

    // exec and query methods would go here

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (IntPtr db);

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private IntPtr m_database;
}
```
**Good** example:


```csharp
using System.Runtime.ConstrainedExecution;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable, but you do not need to implement a finalizer because
// SafeHandle will take care of the cleanup.
internal sealed class Database {
    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        m_database = new SqlitePtr (path, flags);
    }

    // exec and query methods would go here

    // This corresponds to a native sqlite3*.
    [SecurityPermission (SecurityAction.InheritanceDemand, UnmanagedCode = true)]
    [SecurityPermission (SecurityAction.Demand, UnmanagedCode = true)]
    private sealed class SqlitePtr : SafeHandle {
        public SqlitePtr (string path, NativeMethods.OpenFlags flags) : base (IntPtr.Zero, true)
        {
            int err = NativeMethods.sqlite3_open_v2 (path, out handle, flags, IntPtr.Zero);
            // handle errors
        }

        public override bool IsInvalid {
            get {
                return (handle == IntPtr.Zero);
            }
        }

        // This will not be called if the handle is invalid. Note that this method should not throw.
        [ReliabilityContract (Consistency.WillNotCorruptState, Cer.MayFail)]
        protected override bool ReleaseHandle ()
        {
            NativeMethods.sqlite3_close (this);
            return true;
        }
    }

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (SqlitePtr db);

        // Open must take an IntPtr but all other methods take a type safe SqlitePtr.
        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private SqlitePtr m_database;
}
```",markdown,GEND-PreferSafeHandleRule,Prefer Safe Handle ,"In general it is best to interop with native code using
**System.Runtime.InteropServices.SafeHandle** instead of
**System.IntPtr** or **System.UIntPtr** because:

SafeHandles are type safe.
SafeHandles are guaranteed to be disposed of during exceptional
conditions like a thread aborting unexpectedly or a stack overflow.
SafeHandles are not vulnerable to reycle attacks.
You don't need to write a finalizer which can be tricky to do because
they execute within their own thread, may execute on partially
constructed objects, and normally tear down the application if you allow
an exception to escape from them.


 **Bad** example:


```csharp
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable.
public sealed class Database {
    ~Database ()
    {
        // This will execute even if the ctor throws so it is important to check
        // to see if the fields are initialized.
        if (m_database != IntPtr.Zero) {
            NativeMethods.sqlite3_close (m_database);
        }
    }

    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        int err = NativeMethods.sqlite3_open_v2 (path, out m_database, flags, IntPtr.Zero);
        // handle errors
    }

    // exec and query methods would go here

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (IntPtr db);

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private IntPtr m_database;
}
```
**Good** example:


```csharp
using System.Runtime.ConstrainedExecution;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable, but you do not need to implement a finalizer because
// SafeHandle will take care of the cleanup.
internal sealed class Database {
    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        m_database = new SqlitePtr (path, flags);
    }

    // exec and query methods would go here

    // This corresponds to a native sqlite3*.
    [SecurityPermission (SecurityAction.InheritanceDemand, UnmanagedCode = true)]
    [SecurityPermission (SecurityAction.Demand, UnmanagedCode = true)]
    private sealed class SqlitePtr : SafeHandle {
        public SqlitePtr (string path, NativeMethods.OpenFlags flags) : base (IntPtr.Zero, true)
        {
            int err = NativeMethods.sqlite3_open_v2 (path, out handle, flags, IntPtr.Zero);
            // handle errors
        }

        public override bool IsInvalid {
            get {
                return (handle == IntPtr.Zero);
            }
        }

        // This will not be called if the handle is invalid. Note that this method should not throw.
        [ReliabilityContract (Consistency.WillNotCorruptState, Cer.MayFail)]
        protected override bool ReleaseHandle ()
        {
            NativeMethods.sqlite3_close (this);
            return true;
        }
    }

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (SqlitePtr db);

        // Open must take an IntPtr but all other methods take a type safe SqlitePtr.
        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private SqlitePtr m_database;
}
```",markdown,,,escalated,0.83183736,1
415,Static Analysis,2020-05-18T14:51:00-04:00,73899,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-227: 7PK - API Abuse,http://cwevis.org/browse/227,227,Microsoft/IdentityModel/Clients/ActiveDirectory/AdalUserMismatchException/(self),logical,,,2020-05-18T14:51:59-04:00,Static Analysis,47a6df44d16eb182f816f23918542a817d2995bc2ddf0168976c20b9c8c63cb2,202087,medium,,,CWE-573: Improper Following of Specification by Caller,http://cwevis.org/browse/573,573,"The required constructor for ISerializable is not present in this type. Add a (private for sealed, protected otherwise) serialization constructor for this type. The required constructor for ISerializable is not present in this type.",plain-text,Microsoft/IdentityModel/Clients/ActiveDirectory/AdalUserMismatchException/(self),Microsoft/IdentityModel/Clients/ActiveDirectory/AdalUserMismatchException/(self),logical,,,,,,MissingSerializationConstructorRule,Gendarme,GEND-MissingSerializationConstructorRule,Missing Serialization Constructor ,"This rule checks for types that implement **System.ISerializable** but
don't provide a serialization constructor. The constructor is required
in order to make the type serializeable but cannot be enforced by the
interface. The serialization constructor should be **private** for
**sealed** types and **protected** for unsealed types.

**Bad** example:


```csharp
[Serializable]
public class Bad : ISerializable {
    public void GetObjectData (SerializationInfo info, StreamingContext context)
    {
    }
}
```
**Good** example (sealed):


```csharp
[Serializable]
public sealed class Good : ISerializable {
    private ClassWithConstructor (SerializationInfo info, StreamingContext context)
    {
    }

    public void GetObjectData (SerializationInfo info, StreamingContext context)
    {
    }
}
```
**Good** example:


```csharp
[Serializable]
public class Good : ISerializable {
    protected ClassWithConstructor (SerializationInfo info, StreamingContext context)
    {
    }

    public void GetObjectData (SerializationInfo info, StreamingContext context)
    {
    }
}
```",markdown,rule-dc56fd6c6aaaf7aef3e91a691e1f8bd8f7311763a2d3286fce16c6c5cf52b5e2,API Abuse,"The software uses an API in a manner contrary to its intended use.

An API is a contract between a caller and a callee. The most common forms of API misuse occurs when the caller does not honor its end of this contract. For example, if a program does not call chdir() after calling chroot(), it violates the contract that specifies how to change the active root directory in a secure fashion. Another good example of library abuse is expecting the callee to return trustworthy DNS information to the caller. In this case, the caller misuses the callee API by making certain assumptions about its behavior (that the return value can be used for authentication purposes). One can also violate the caller-callee contract from the other side. For example, if a coder subclasses SecureRandom and returns a non-random value, the contract is violated.",markdown,,,escalated,0.94911677,1
416,Static Analysis,2020-05-18T14:51:00-04:00,73973,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-227: 7PK - API Abuse,http://cwevis.org/browse/227,227,Microsoft/Web/XmlTransform/NamedTypeFactory/PathRegistration/PathRegistration,logical,,,2020-05-18T14:51:51-04:00,Static Analysis,98c72d510ebce8617f7d8f9925f5859d665cf95d60aa97cd647dd9aa255c58ea,197976,medium,,,CWE-676: Use of Potentially Dangerous Function,http://cwevis.org/browse/676,676,"There are potentially dangerous calls into your code. You should remove or replace the call to the dangerous method. You are calling to System.Reflection.Assembly System.Reflection.Assembly::LoadFrom(System.String), which is a potentially problematic method",plain-text,Microsoft/Web/XmlTransform/NamedTypeFactory/PathRegistration/PathRegistration,Microsoft/Web/XmlTransform/NamedTypeFactory/PathRegistration/PathRegistration,logical,,,,,,AvoidCallingProblematicMethodsRule,Gendarme,GEND-AvoidCallingProblematicMethodsRule,Avoid Calling Problematic Methods ,"This rule warns about methods that calls into potentially dangerous API
of the .NET framework. If possible try to avoid the API (there are
generally safer ways to do the same) or at least make sure your code can
be safely called from others.

**System.GC::Collect()**
**System.Threading.Thread::Suspend()** and **Resume()**
**System.Runtime.InteropServices.SafeHandle::DangerousGetHandle()**
**System.Reflection.Assembly::LoadFrom()**, **LoadFile()** and
**LoadWithPartialName()**
**System.Type::InvokeMember()** when used with
**BindingFlags.NonPublic**


 **Bad** example:


```csharp
public void Load (string filename)
{
    Assembly a = Assembly.LoadFile (filename);
    // ...
}
```
**Good** example:


```csharp
public void Load (string filename)
{
    AssemblyName aname = AssemblyName.GetAssemblyName (filename);
    // ensure it's the assembly you expect (e.g. public key, version...)
    Assembly a = Assembly.Load (aname);
    // ...
}
```",markdown,rule-dc56fd6c6aaaf7aef3e91a691e1f8bd8f7311763a2d3286fce16c6c5cf52b5e2,API Abuse,"The software uses an API in a manner contrary to its intended use.

An API is a contract between a caller and a callee. The most common forms of API misuse occurs when the caller does not honor its end of this contract. For example, if a program does not call chdir() after calling chroot(), it violates the contract that specifies how to change the active root directory in a secure fashion. Another good example of library abuse is expecting the callee to return trustworthy DNS information to the caller. In this case, the caller misuses the callee API by making certain assumptions about its behavior (that the return value can be used for authentication purposes). One can also violate the caller-callee contract from the other side. For example, if a coder subclasses SecureRandom and returns a non-random value, the contract is violated.",markdown,,,escalated,0.94896436,1
417,Static Analysis,2020-05-18T14:51:00-04:00,74076,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/Web/XmlTransform/XmlAttributePreservingWriter/WriteStartAttribute,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201227,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Microsoft/Web/XmlTransform/XmlAttributePreservingWriter/WriteStartAttribute,Microsoft/Web/XmlTransform/XmlAttributePreservingWriter/WriteStartAttribute,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
418,Static Analysis,2020-05-18T14:51:00-04:00,74106,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-189: Numeric Errors,http://cwevis.org/browse/189,189,Splat/PointMathExtensions/AngleInDegrees,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,0544162eda4e916dd4b12fa6cd15dd2fd627849db3843bf23d31f3fe7043f266,201054,medium,,,CWE-190: Integer Overflow or Wraparound,http://cwevis.org/browse/190,190,"The result of an integral division is cast to a Single or Double. This is questionable unless you really want the truncated result. Cast an operand to Single or Double, not the result.",plain-text,Splat/PointMathExtensions/AngleInDegrees,Splat/PointMathExtensions/AngleInDegrees,logical,,,,,,ReviewCastOnIntegerDivisionRule,Gendarme,GEND-ReviewCastOnIntegerDivisionRule,Review Cast On Integer Division ,"This rule checks for integral divisions where the result is cast to a
floating point type. It's usually best to instead cast an operand to the
floating point type so that the result is not truncated.

**Bad** example:


```csharp
public double Bad (int a, int b)
{
    // integers are divided, then the result is casted into a double
    // i.e. Bad (5, 2) == 2.0d
    return a / b;
}
```
**Good** example:


```csharp
public double Good (int a, int b)
{
    // a double is divided by an integer, which result in a double result
    // i.e. Good (5, 2) == 2.5d
    return (double) a / b;
}
```",markdown,rule-87c4a91bc4c9e20c70f0637bd67a4d03975f25b3ec675b9cc13d0f04540c76a6,Numeric Error,,,,,escalated,0.97264296,1
419,Static Analysis,2020-05-18T14:51:00-04:00,74108,2020-05-18T14:54:28-04:00,high,escalated,,,,,,CWE-695: Use of Low-Level Functionality,http://cwevis.org/browse/695,695,GitHub/Authentication/AuthenticationPrompts/(self),logical,,,2020-05-18T14:52:13-04:00,Static Analysis,3ac9036736202c636e5a647bb8073bf5337a353e654d9216f8af1cf9293e2f3b,202543,high,,,CWE-695: Use of Low-Level Functionality,http://cwevis.org/browse/695,695,The type uses System.IntPtr or System.UIntPtr instead of System.Runtime.InteropServices.SafeHandle. Consider changing the code to use SafeHandle.,plain-text,GitHub/Authentication/AuthenticationPrompts/(self),GitHub/Authentication/AuthenticationPrompts/(self),logical,,,,,,PreferSafeHandleRule,Gendarme,GEND-PreferSafeHandleRule,Prefer Safe Handle ,"In general it is best to interop with native code using
**System.Runtime.InteropServices.SafeHandle** instead of
**System.IntPtr** or **System.UIntPtr** because:

SafeHandles are type safe.
SafeHandles are guaranteed to be disposed of during exceptional
conditions like a thread aborting unexpectedly or a stack overflow.
SafeHandles are not vulnerable to reycle attacks.
You don't need to write a finalizer which can be tricky to do because
they execute within their own thread, may execute on partially
constructed objects, and normally tear down the application if you allow
an exception to escape from them.


 **Bad** example:


```csharp
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable.
public sealed class Database {
    ~Database ()
    {
        // This will execute even if the ctor throws so it is important to check
        // to see if the fields are initialized.
        if (m_database != IntPtr.Zero) {
            NativeMethods.sqlite3_close (m_database);
        }
    }

    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        int err = NativeMethods.sqlite3_open_v2 (path, out m_database, flags, IntPtr.Zero);
        // handle errors
    }

    // exec and query methods would go here

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (IntPtr db);

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private IntPtr m_database;
}
```
**Good** example:


```csharp
using System.Runtime.ConstrainedExecution;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable, but you do not need to implement a finalizer because
// SafeHandle will take care of the cleanup.
internal sealed class Database {
    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        m_database = new SqlitePtr (path, flags);
    }

    // exec and query methods would go here

    // This corresponds to a native sqlite3*.
    [SecurityPermission (SecurityAction.InheritanceDemand, UnmanagedCode = true)]
    [SecurityPermission (SecurityAction.Demand, UnmanagedCode = true)]
    private sealed class SqlitePtr : SafeHandle {
        public SqlitePtr (string path, NativeMethods.OpenFlags flags) : base (IntPtr.Zero, true)
        {
            int err = NativeMethods.sqlite3_open_v2 (path, out handle, flags, IntPtr.Zero);
            // handle errors
        }

        public override bool IsInvalid {
            get {
                return (handle == IntPtr.Zero);
            }
        }

        // This will not be called if the handle is invalid. Note that this method should not throw.
        [ReliabilityContract (Consistency.WillNotCorruptState, Cer.MayFail)]
        protected override bool ReleaseHandle ()
        {
            NativeMethods.sqlite3_close (this);
            return true;
        }
    }

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (SqlitePtr db);

        // Open must take an IntPtr but all other methods take a type safe SqlitePtr.
        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private SqlitePtr m_database;
}
```",markdown,GEND-PreferSafeHandleRule,Prefer Safe Handle ,"In general it is best to interop with native code using
**System.Runtime.InteropServices.SafeHandle** instead of
**System.IntPtr** or **System.UIntPtr** because:

SafeHandles are type safe.
SafeHandles are guaranteed to be disposed of during exceptional
conditions like a thread aborting unexpectedly or a stack overflow.
SafeHandles are not vulnerable to reycle attacks.
You don't need to write a finalizer which can be tricky to do because
they execute within their own thread, may execute on partially
constructed objects, and normally tear down the application if you allow
an exception to escape from them.


 **Bad** example:


```csharp
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable.
public sealed class Database {
    ~Database ()
    {
        // This will execute even if the ctor throws so it is important to check
        // to see if the fields are initialized.
        if (m_database != IntPtr.Zero) {
            NativeMethods.sqlite3_close (m_database);
        }
    }

    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        int err = NativeMethods.sqlite3_open_v2 (path, out m_database, flags, IntPtr.Zero);
        // handle errors
    }

    // exec and query methods would go here

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (IntPtr db);

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private IntPtr m_database;
}
```
**Good** example:


```csharp
using System.Runtime.ConstrainedExecution;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable, but you do not need to implement a finalizer because
// SafeHandle will take care of the cleanup.
internal sealed class Database {
    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        m_database = new SqlitePtr (path, flags);
    }

    // exec and query methods would go here

    // This corresponds to a native sqlite3*.
    [SecurityPermission (SecurityAction.InheritanceDemand, UnmanagedCode = true)]
    [SecurityPermission (SecurityAction.Demand, UnmanagedCode = true)]
    private sealed class SqlitePtr : SafeHandle {
        public SqlitePtr (string path, NativeMethods.OpenFlags flags) : base (IntPtr.Zero, true)
        {
            int err = NativeMethods.sqlite3_open_v2 (path, out handle, flags, IntPtr.Zero);
            // handle errors
        }

        public override bool IsInvalid {
            get {
                return (handle == IntPtr.Zero);
            }
        }

        // This will not be called if the handle is invalid. Note that this method should not throw.
        [ReliabilityContract (Consistency.WillNotCorruptState, Cer.MayFail)]
        protected override bool ReleaseHandle ()
        {
            NativeMethods.sqlite3_close (this);
            return true;
        }
    }

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (SqlitePtr db);

        // Open must take an IntPtr but all other methods take a type safe SqlitePtr.
        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private SqlitePtr m_database;
}
```",markdown,,,escalated,0.8318374,1
420,Static Analysis,2020-05-18T14:51:00-04:00,74114,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-189: Numeric Errors,http://cwevis.org/browse/189,189,SharpCompress/Compressors/PPMd/I1/PpmState/get_Item,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,03ba04f65bdee74e716d09d64feb1f004a116c5543f675d9955d1297acbf5baf,201067,medium,,,CWE-190: Integer Overflow or Wraparound,http://cwevis.org/browse/190,190,This method casts the result of an integer multiplication into a larger integer. This may result in an overflow before the cast can be done. Cast the operands instead of the result.,plain-text,SharpCompress/Compressors/PPMd/I1/PpmState/get_Item,SharpCompress/Compressors/PPMd/I1/PpmState/get_Item,logical,,,,,,ReviewCastOnIntegerMultiplicationRule,Gendarme,GEND-ReviewCastOnIntegerMultiplicationRule,Review Cast On Integer Multiplication ,"This rule checks for integral multiply operations where the result is
cast to a larger integral type. It's safer instead to cast an operand to
the larger type to minimize the chance of overflow.

**Bad** example:


```csharp
public long Bad (int a, int b)
{
    // e.g. Bad (Int32.MaxInt, Int32.MaxInt) == 1
    return a * b;
}
```
**Good** example:


```csharp
public long Good (int a, int b)
{
    // e.g. Good (Int32.MaxInt, Int32.MaxInt) == 4611686014132420609
    return (long) a * b;
}
```",markdown,rule-87c4a91bc4c9e20c70f0637bd67a4d03975f25b3ec675b9cc13d0f04540c76a6,Numeric Error,,,,,escalated,0.9599974,1
421,Static Analysis,2020-05-18T14:51:00-04:00,74149,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/WindowsFormsWebAuthenticationDialogBase/WebBrowserNavigatingHandler,logical,,,2020-05-18T14:51:59-04:00,Static Analysis,990659a019388e4890643c93cad3046863745119ab7b4b291e2e747b1b3d211d,202008,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,This disposable local is not guaranteed to be disposed of before the method returns. Use a 'using' statement or surround the local's usage with a try/finally block. Local of type 'Process' is not disposed of (is this a fluent-like API ?).,plain-text,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/WindowsFormsWebAuthenticationDialogBase/WebBrowserNavigatingHandler,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/WindowsFormsWebAuthenticationDialogBase/WebBrowserNavigatingHandler,logical,,,,,,EnsureLocalDisposalRule,Gendarme,GEND-EnsureLocalDisposalRule,Ensure Local Disposal ,"This rule checks that disposable locals are always disposed of before
the method returns. Use a 'using' statement (or a try/finally block) to
guarantee local disposal even in the event an unhandled exception
occurs.

**Bad** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    DecodeHeader (stream);
    if (!DecodedHeader.HasContent) {
        return;
    }
    DecodeContent (stream);
    stream.Dispose ();
}
```
**Good** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        DecodeHeader (stream);
        if (!DecodedHeader.HasContent) {
            return;
        }
        DecodeContent (stream);
    }
}
```
**Bad** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    Decode (stream);
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
    stream.Dispose ();
}
```
**Good** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        Decode (stream);
    }
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.9805271,1
422,Static Analysis,2020-05-18T14:51:00-04:00,74150,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-465: Pointer Issues,http://cwevis.org/browse/465,465,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/WindowsFormsWebAuthenticationDialogBase/WebBrowserNavigatingHandler,logical,,,2020-05-18T14:51:59-04:00,Static Analysis,a5fceea52596662e61c66f7abfad9036937d4f22e1a53681e48ab77fa50bb893,201964,medium,,,CWE-476: NULL Pointer Dereference,http://cwevis.org/browse/476,476,A visible method does not check its parameter(s) for null values. Since the caller is unknown you should always verify all of your parameters to protect yourself.,plain-text,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/WindowsFormsWebAuthenticationDialogBase/WebBrowserNavigatingHandler,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/WindowsFormsWebAuthenticationDialogBase/WebBrowserNavigatingHandler,logical,,,,,,CheckParametersNullityInVisibleMethodsRule,Gendarme,GEND-CheckParametersNullityInVisibleMethodsRule,Check Parameters Nullity In Visible Methods ,"This rule checks if all nullable parameters of visible methods are
compared with **null** before they get used. This reduce the likelyhood
of the runtime throwing a **NullReferenceException**.

**Bad** example:


```csharp
[DllImport (""message"")]
internal static extern byte [] Parse (string s, int length);

public bool TryParse (string s, out Message m)
{
    // is 's' is null then 's.Length' will throw a NullReferenceException
    // which a TryParse method should never do
    byte [] data = Parse (s, s.Length);
    if (data == null) {
        m = null;
        return false;
    }
    m = new Message (data);
    return true;
}
```
**Good** example:


```csharp
[DllImport (""message"")]
internal static extern byte [] Parse (string s, int length);

public bool TryParse (string s, out Message m)
{
    if (s == null) {
        m = null;
        return false;
    }
    byte [] data = Parse (s, s.Length);
    if (data == null) {
        m = null;
        return false;
    }
    m = new Message (data);
    return true;
}
```",markdown,rule-0dd0e028a5ce327b29cd3ffa9ef62c97353c7155364a9a4b89933187ee675fef,Invalid Pointer,,,,,escalated,0.56592375,1
423,Static Analysis,2020-05-18T14:51:00-04:00,74266,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/Web/XmlTransform/XmlTransformation/GetService,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201243,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Microsoft/Web/XmlTransform/XmlTransformation/GetService,Microsoft/Web/XmlTransform/XmlTransformation/GetService,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
424,Static Analysis,2020-05-18T14:51:00-04:00,74271,2020-05-18T14:54:28-04:00,medium,false-positive,"#!/usr/bin/env node

var cp = require('child_process')
var fs = require('fs')
var path = require('path')

var script = path.join(__dirname, 'postinstall')",1,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/script/postinstall.js,file,4,4,2020-05-18T14:51:45-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,196508,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/script/postinstall.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\script\postinstall.js,file,17,10,4,4,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
425,Static Analysis,2020-05-18T14:51:00-04:00,74272,2020-05-18T14:54:28-04:00,medium,false-positive,"var path = require('path')

var script = path.join(__dirname, 'postinstall')
if (process.platform === 'win32') {
  script += '.cmd'
} else {
  script += '.sh'",5,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/script/postinstall.js,file,8,8,2020-05-18T14:51:45-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,196513,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/script/postinstall.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\script\postinstall.js,file,12,5,8,8,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
426,Static Analysis,2020-05-18T14:51:00-04:00,74273,2020-05-18T14:54:28-04:00,high,escalated,"fs.chmodSync(script, 0o755)
fs.chmodSync(path.join(__dirname, '..', 'bin', 'apm'), 0o755)
fs.chmodSync(path.join(__dirname, '..', 'bin', 'npm'), 0o755)
fs.chmodSync(path.join(__dirname, '..', 'bin', 'python-interceptor.sh'), 0o755)

var child = cp.spawn(script, [], { stdio: ['pipe', 'pipe', 'pipe'], shell: true })
child.stderr.pipe(process.stderr)",17,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/script/postinstall.js,file,20,20,2020-05-18T14:51:45-04:00,Static Analysis,e06730892bbeaf95acace8381368481ec3cb7e852b61bd4908bb656cdf952845,196527,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Found fs.chmodSync with non literal argument at index 0,plain-text,Atom x64/resources/app/apm/script/postinstall.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\script\postinstall.js,file,13,1,20,20,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.97060037,1
427,Static Analysis,2020-05-18T14:51:00-04:00,74274,2020-05-18T14:54:28-04:00,high,escalated,"// (npm does not preserve permissions when publishing packages on Windows,
// so this is especially needed to allow apm to be published successfully on Windows)
fs.chmodSync(script, 0o755)
fs.chmodSync(path.join(__dirname, '..', 'bin', 'apm'), 0o755)
fs.chmodSync(path.join(__dirname, '..', 'bin', 'npm'), 0o755)
fs.chmodSync(path.join(__dirname, '..', 'bin', 'python-interceptor.sh'), 0o755)",15,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/script/postinstall.js,file,18,18,2020-05-18T14:51:45-04:00,Static Analysis,e06730892bbeaf95acace8381368481ec3cb7e852b61bd4908bb656cdf952845,196523,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Found fs.chmodSync with non literal argument at index 0,plain-text,Atom x64/resources/app/apm/script/postinstall.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\script\postinstall.js,file,13,1,18,18,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.97060037,1
428,Static Analysis,2020-05-18T14:51:00-04:00,74275,2020-05-18T14:54:28-04:00,medium,false-positive,"var fs = require('fs')
var path = require('path')

var script = path.join(__dirname, 'postinstall')
if (process.platform === 'win32') {
  script += '.cmd'
} else {",4,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/script/postinstall.js,file,7,7,2020-05-18T14:51:45-04:00,Static Analysis,9ced861d153ab418069da667a5c9f5fefe90861e103a53df87d410e5550ee1e7,196510,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'__dirname' is not defined.,plain-text,Atom x64/resources/app/apm/script/postinstall.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\script\postinstall.js,file,33,24,7,7,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.09524149,0
429,Static Analysis,2020-05-18T14:51:00-04:00,74276,2020-05-18T14:54:28-04:00,medium,false-positive,"var cp = require('child_process')
var fs = require('fs')
var path = require('path')

var script = path.join(__dirname, 'postinstall')
if (process.platform === 'win32') {",2,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/script/postinstall.js,file,5,5,2020-05-18T14:51:45-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,196509,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/script/postinstall.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\script\postinstall.js,file,19,12,5,5,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
430,Static Analysis,2020-05-18T14:51:00-04:00,74277,2020-05-18T14:54:28-04:00,high,escalated,"#!/usr/bin/env node

var cp = require('child_process')
var fs = require('fs')
var path = require('path')",1,,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/script/postinstall.js,file,3,3,2020-05-18T14:51:45-04:00,Static Analysis,63cfeff1e19efa6702923410272f5381339ce1d5ae0e4401b9a7b3accccb14ee,196506,high,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,"Found require(""child_process"")",plain-text,Atom x64/resources/app/apm/script/postinstall.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\script\postinstall.js,file,34,10,3,3,security,detect-child-process,ESLint,ESLINT-SECURITY-detect-child-process,Detect child process,"Detects instances of [`child_process`](https://nodejs.org/api/child_process.html) & non-literal [`exec()`](https://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback)

More information: [Avoiding Command Injection in Node.js](https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/avoid-command-injection-node.md)",markdown,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.93688923,1
431,Static Analysis,2020-05-18T14:51:00-04:00,74278,2020-05-18T14:54:28-04:00,medium,false-positive,"var child = cp.spawn(script, [], { stdio: ['pipe', 'pipe', 'pipe'], shell: true })
child.stderr.pipe(process.stderr)
child.stdout.pipe(process.stdout)",21,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/script/postinstall.js,file,24,24,2020-05-18T14:51:45-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,196530,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/script/postinstall.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\script\postinstall.js,file,26,19,24,24,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
432,Static Analysis,2020-05-18T14:51:00-04:00,74279,2020-05-18T14:54:28-04:00,medium,false-positive,"// so this is especially needed to allow apm to be published successfully on Windows)
fs.chmodSync(script, 0o755)
fs.chmodSync(path.join(__dirname, '..', 'bin', 'apm'), 0o755)
fs.chmodSync(path.join(__dirname, '..', 'bin', 'npm'), 0o755)
fs.chmodSync(path.join(__dirname, '..', 'bin', 'python-interceptor.sh'), 0o755)

var child = cp.spawn(script, [], { stdio: ['pipe', 'pipe', 'pipe'], shell: true })",16,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/script/postinstall.js,file,19,19,2020-05-18T14:51:45-04:00,Static Analysis,9ced861d153ab418069da667a5c9f5fefe90861e103a53df87d410e5550ee1e7,196526,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'__dirname' is not defined.,plain-text,Atom x64/resources/app/apm/script/postinstall.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\script\postinstall.js,file,33,24,19,19,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.09524149,0
433,Static Analysis,2020-05-18T14:51:00-04:00,74280,2020-05-18T14:54:28-04:00,medium,false-positive,"fs.chmodSync(path.join(__dirname, '..', 'bin', 'python-interceptor.sh'), 0o755)

var child = cp.spawn(script, [], { stdio: ['pipe', 'pipe', 'pipe'], shell: true })
child.stderr.pipe(process.stderr)
child.stdout.pipe(process.stdout)",20,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/script/postinstall.js,file,23,23,2020-05-18T14:51:45-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,196529,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/script/postinstall.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\script\postinstall.js,file,26,19,23,23,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
434,Static Analysis,2020-05-18T14:51:00-04:00,74281,2020-05-18T14:54:28-04:00,high,escalated,"// so this is especially needed to allow apm to be published successfully on Windows)
fs.chmodSync(script, 0o755)
fs.chmodSync(path.join(__dirname, '..', 'bin', 'apm'), 0o755)
fs.chmodSync(path.join(__dirname, '..', 'bin', 'npm'), 0o755)
fs.chmodSync(path.join(__dirname, '..', 'bin', 'python-interceptor.sh'), 0o755)

var child = cp.spawn(script, [], { stdio: ['pipe', 'pipe', 'pipe'], shell: true })",16,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/script/postinstall.js,file,19,19,2020-05-18T14:51:45-04:00,Static Analysis,e06730892bbeaf95acace8381368481ec3cb7e852b61bd4908bb656cdf952845,196525,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Found fs.chmodSync with non literal argument at index 0,plain-text,Atom x64/resources/app/apm/script/postinstall.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\script\postinstall.js,file,13,1,19,19,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.97060037,1
435,Static Analysis,2020-05-18T14:51:00-04:00,74282,2020-05-18T14:54:28-04:00,medium,false-positive,"#!/usr/bin/env node

var cp = require('child_process')
var fs = require('fs')
var path = require('path')",1,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/script/postinstall.js,file,3,3,2020-05-18T14:51:45-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,196507,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/script/postinstall.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\script\postinstall.js,file,17,10,3,3,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
436,Static Analysis,2020-05-18T14:51:00-04:00,74283,2020-05-18T14:54:28-04:00,high,escalated,"// Make sure all the scripts have the necessary permissions when we execute them
// (npm does not preserve permissions when publishing packages on Windows,
// so this is especially needed to allow apm to be published successfully on Windows)
fs.chmodSync(script, 0o755)
fs.chmodSync(path.join(__dirname, '..', 'bin', 'apm'), 0o755)
fs.chmodSync(path.join(__dirname, '..', 'bin', 'npm'), 0o755)
fs.chmodSync(path.join(__dirname, '..', 'bin', 'python-interceptor.sh'), 0o755)",14,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/script/postinstall.js,file,17,17,2020-05-18T14:51:45-04:00,Static Analysis,e06730892bbeaf95acace8381368481ec3cb7e852b61bd4908bb656cdf952845,196519,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Found fs.chmodSync with non literal argument at index 0,plain-text,Atom x64/resources/app/apm/script/postinstall.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\script\postinstall.js,file,13,1,17,17,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.97060037,1
437,Static Analysis,2020-05-18T14:51:00-04:00,74284,2020-05-18T14:54:28-04:00,medium,false-positive,"// (npm does not preserve permissions when publishing packages on Windows,
// so this is especially needed to allow apm to be published successfully on Windows)
fs.chmodSync(script, 0o755)
fs.chmodSync(path.join(__dirname, '..', 'bin', 'apm'), 0o755)
fs.chmodSync(path.join(__dirname, '..', 'bin', 'npm'), 0o755)
fs.chmodSync(path.join(__dirname, '..', 'bin', 'python-interceptor.sh'), 0o755)",15,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/script/postinstall.js,file,18,18,2020-05-18T14:51:45-04:00,Static Analysis,9ced861d153ab418069da667a5c9f5fefe90861e103a53df87d410e5550ee1e7,196524,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'__dirname' is not defined.,plain-text,Atom x64/resources/app/apm/script/postinstall.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\script\postinstall.js,file,33,24,18,18,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.09524149,0
438,Static Analysis,2020-05-18T14:51:00-04:00,74285,2020-05-18T14:54:28-04:00,medium,false-positive,"fs.chmodSync(script, 0o755)
fs.chmodSync(path.join(__dirname, '..', 'bin', 'apm'), 0o755)
fs.chmodSync(path.join(__dirname, '..', 'bin', 'npm'), 0o755)
fs.chmodSync(path.join(__dirname, '..', 'bin', 'python-interceptor.sh'), 0o755)

var child = cp.spawn(script, [], { stdio: ['pipe', 'pipe', 'pipe'], shell: true })
child.stderr.pipe(process.stderr)",17,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/script/postinstall.js,file,20,20,2020-05-18T14:51:45-04:00,Static Analysis,9ced861d153ab418069da667a5c9f5fefe90861e103a53df87d410e5550ee1e7,196528,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'__dirname' is not defined.,plain-text,Atom x64/resources/app/apm/script/postinstall.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\script\postinstall.js,file,33,24,20,20,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.09524149,0
439,Static Analysis,2020-05-18T14:51:00-04:00,74309,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/Web/XmlTransform/XmlAttributePreservingWriter/SetAttributeNewLineString,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201210,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Microsoft/Web/XmlTransform/XmlAttributePreservingWriter/SetAttributeNewLineString,Microsoft/Web/XmlTransform/XmlAttributePreservingWriter/SetAttributeNewLineString,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
440,Static Analysis,2020-05-18T14:51:00-04:00,74319,2020-05-18T14:54:28-04:00,medium,false-positive,"var Command, Init, fs, path, yargs,
    indexOf = [].indexOf;

  path = require('path');

  yargs = require('yargs');",2,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/init.js,file,5,5,2020-05-18T14:51:35-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192638,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/init.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\init.js,file,17,10,5,5,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
441,Static Analysis,2020-05-18T14:51:00-04:00,74321,2020-05-18T14:54:28-04:00,medium,false-positive,"yargs = require('yargs');

  Command = require('./command');

  fs = require('./fs');",6,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/init.js,file,9,9,2020-05-18T14:51:35-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192640,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/init.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\init.js,file,20,13,9,9,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
442,Static Analysis,2020-05-18T14:51:00-04:00,74323,2020-05-18T14:54:28-04:00,high,escalated,"relativePath = relativePath.replace(/\.template$/, '');
          relativePath = this.replacePackageNamePlaceholders(relativePath, packageName);
          sourcePath = path.join(packagePath, relativePath);
          if (fs.existsSync(sourcePath)) {
            continue;
          }
          if (fs.isDirectorySync(templateChildPath)) {",128,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/lib/init.js,file,131,131,2020-05-18T14:51:35-04:00,Static Analysis,a8eb318301dc105f6b242fce363923637060c403e8c9c7b93b984891497b7744,192708,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Found fs.existsSync with non literal argument at index 0,plain-text,Atom x64/resources/app/apm/lib/init.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\init.js,file,28,15,131,131,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.96763015,1
443,Static Analysis,2020-05-18T14:51:00-04:00,74324,2020-05-18T14:54:28-04:00,medium,false-positive,"return callback(error);
          } else {
            destinationPath = path.resolve(destinationPath);
            templatePath = path.resolve(__dirname, '..', 'templates', 'bundle');
            this.generateFromTemplate(destinationPath, templatePath);
            return callback();
          }",81,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/init.js,file,84,84,2020-05-18T14:51:35-04:00,Static Analysis,9ced861d153ab418069da667a5c9f5fefe90861e103a53df87d410e5550ee1e7,192687,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'__dirname' is not defined.,plain-text,Atom x64/resources/app/apm/lib/init.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\init.js,file,50,41,84,84,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.09524149,0
444,Static Analysis,2020-05-18T14:51:00-04:00,74332,2020-05-18T14:54:28-04:00,medium,false-positive,"Command = require('./command');

  fs = require('./fs');

  module.exports = Init = (function() {
    class Init extends Command {",8,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/init.js,file,11,11,2020-05-18T14:51:35-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192641,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/init.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\init.js,file,15,8,11,11,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
445,Static Analysis,2020-05-18T14:51:00-04:00,74335,2020-05-18T14:54:28-04:00,medium,false-positive,"callback(""Specify directory to create package in using --package"");
          return;
        }
        PackageConverter = require('./package-converter');
        converter = new PackageConverter(sourcePath, destinationPath);
        return converter.convert((error) => {
          var templatePath;",73,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/init.js,file,76,76,2020-05-18T14:51:35-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192682,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/init.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\init.js,file,35,28,76,76,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
446,Static Analysis,2020-05-18T14:51:00-04:00,74336,2020-05-18T14:54:28-04:00,medium,false-positive,"callback(""Specify directory to create theme in using --theme"");
          return;
        }
        ThemeConverter = require('./theme-converter');
        converter = new ThemeConverter(sourcePath, destinationPath);
        return converter.convert((error) => {
          var templatePath;",94,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/init.js,file,97,97,2020-05-18T14:51:35-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192691,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/init.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\init.js,file,33,26,97,97,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270798,0
447,Static Analysis,2020-05-18T14:51:00-04:00,74340,2020-05-18T14:54:28-04:00,medium,false-positive,"if (argv.template != null) {
          return path.resolve(argv.template);
        } else {
          return path.resolve(__dirname, '..', 'templates', templateType);
        }
      }",178,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/init.js,file,181,181,2020-05-18T14:51:35-04:00,Static Analysis,9ced861d153ab418069da667a5c9f5fefe90861e103a53df87d410e5550ee1e7,192728,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'__dirname' is not defined.,plain-text,Atom x64/resources/app/apm/lib/init.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\init.js,file,40,31,181,181,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.095241465,0
448,Static Analysis,2020-05-18T14:51:00-04:00,74342,2020-05-18T14:54:28-04:00,high,escalated,"parseOptions(argv) {
        var options;
        options = yargs(argv).wrap(Math.min(100, yargs.terminalWidth()));
        options.usage(""Usage:\n  apm init -p <package-name>\n  apm init -p <package-name> --syntax <javascript-or-coffeescript>\n  apm init -p <package-name> -c ~/Downloads/r.tmbundle\n  apm init -p <package-name> -c https://github.com/textmate/r.tmbundle\n  apm init -p <package-name> --template /path/to/your/package/template\n\n  apm init -t <theme-name>\n  apm init -t <theme-name> -c ~/Downloads/Dawn.tmTheme\n  apm init -t <theme-name> -c https://raw.github.com/chriskempson/tomorrow-theme/master/textmate/Tomorrow-Night-Eighties.tmTheme\n  apm init -t <theme-name> --template /path/to/your/theme/template\n\n  apm init -l <language-name>\n\nGenerates code scaffolding for either a theme or package depending\non the option selected."");
        options.alias('p', 'package').string('package').describe('package', 'Generates a basic package');
        options.alias('s', 'syntax').string('syntax').describe('syntax', 'Sets package syntax to CoffeeScript or JavaScript');
        options.alias('t', 'theme').string('theme').describe('theme', 'Generates a basic theme');",15,,,,CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'),http://cwevis.org/browse/79,79,Atom x64/resources/app/apm/lib/init.js,file,18,18,2020-05-18T14:51:35-04:00,Static Analysis,b4414dd3b1087806bb332146e753f5917a3aec259e29c568ca289f9ab428d0d4,192648,high,,,CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS),http://cwevis.org/browse/80,80,HTML passed in to function 'options.usage',plain-text,Atom x64/resources/app/apm/lib/init.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\init.js,file,22,9,18,18,xss,no-mixed-html,ESLint,ESLINT-XSS-no-mixed-html,No mixed html,"Wanted a way to catch XSS issues in code before they end up in production.

## Rule Details

This rule aims to catch as many XSS issues by examining the code as possible.
The rule checks for mixed html/non-html content, unescaped input, etc.

The following patterns are considered warnings:

```js

// Mixed content
var x = '<div>' + input + '</div>';
$node.html( '<div>' + input + '</div>' );

// Unsafe container names.
var html = input;
var text = htmlInput;
displayValue( htmlInput );

// Checking certain expression parameters that might end up in the variables.
var htmlItems = [ input1, input2 ].join();
var textItems = [ '<div>', input, '</div>' ].join();
var tag = isNumbered ? '<ol>' : '<ul>';

// Checking function return values.
var createHtml = function( item ) { return item.name; }
var createBox = function( item ) { return '<div>' + encode( item ) + '</div>' }

```

The following patterns are not warnings:

```js

// Proper encoding
var html = '<div>' + encode( input ) + '</div>';
$node.html( '<div>' + encode( input ) + '</div>' );

// Proper container names
var html = '<img src=""happy.png"">';
var text = textbox.value;

```

## When Not To Use It

If you are creating a Node.js application that doesn't output any HTML, you can
safely disable this rule.

## Further Reading

- [XSS Prevention CHeat Sheet - OWASP](https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet)",markdown,rule-396ebe8bb0c3dc5d4eb2b5368a97688fdb0f2587416453645c3d06db2b216479,Cross-site Scripting (XSS),"Cross-site scripting (XSS) vulnerabilities occur when:
1. Untrusted data enters a web application, typically from a web request.
2. The web application dynamically generates a web page that contains this untrusted data.
3. During page generation, the application does not prevent the data from containing content that is executable by a web browser, such as JavaScript, HTML tags, HTML attributes, mouse events, Flash, ActiveX, etc.
4. A victim visits the generated web page through a web browser, which contains malicious script that was injected using the untrusted data.
5. Since the script comes from a web page that was sent by the web server, the victim's web browser executes the malicious script in the context of the web server's domain.
6. This effectively violates the intention of the web browser's same-origin policy, which states that scripts in one domain should not be able to access resources or run code in a different domain.
There are three main kinds of XSS:

*Reflected XSS (or Non-Persistent)*

The server reads data directly from the HTTP request and reflects it back in the HTTP response. Reflected XSS exploits occur when an attacker causes a victim to supply dangerous content to a vulnerable web application, which is then reflected back to the victim and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to the victim. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces a victim to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the victim, the content is executed by the victim's browser.

*Stored XSS (or Persistent)*

The application stores dangerous data in a database, message forum, visitor log, or other trusted data store. At a later time, the dangerous data is subsequently read back into the application and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. For example, the attacker might inject XSS into a log message, which might not be handled properly when an administrator views the logs.

*DOM-Based XSS*

In DOM-based XSS, the client performs the injection of XSS into the page; in the other types, the server performs the injection. DOM-based XSS generally involves server-controlled, trusted script that is sent to the client, such as Javascript that performs sanity checks on a form before the user submits it. If the server-supplied script processes user-supplied data and then injects it back into the web page (such as with dynamic HTML), then DOM-based XSS is possible.

Once the malicious script is injected, the attacker can perform a variety of malicious activities. The attacker could transfer private information, such as cookies that may include session information, from the victim's machine to the attacker. The attacker could send malicious requests to a web site on behalf of the victim, which could be especially dangerous to the site if the victim has administrator privileges to manage that site. Phishing attacks could be used to emulate trusted web sites and trick the victim into entering a password, allowing the attacker to compromise the victim's account on that web site. Finally, the script could exploit a vulnerability in the web browser itself possibly taking over the victim's machine, sometimes referred to as ""drive-by hacking.""

In many cases, the attack can be launched without the victim even being aware of it. Even with careful users, attackers frequently use a variety of methods to encode the malicious portion of the attack, such as URL encoding or Unicode, so the request looks less suspicious.

**Guidance**

To remedy XSS vulnerabilities, it is important to never use untrusted or unfiltered data within the code of a HTML page.

Untrusted data can originate not only form the client but potentially a third party or previously uploaded file etc.

Filtering of untrusted data typically involves converting special characters to their HTML entity encoded counterparts (however, other methods do exist, see references).

These special characters include:

* `&`
* `<`
* `>`
* `""`
* `'`
* `/`

An example of HTML entity encoding is converting `<` to `&lt;`.

Although it is possible to filter untrusted input, there are five locations within an HTML page where untrusted input (even if it has been filtered) should never be placed:

1. Directly in a script.
2. Inside an HTML comment.
3. In an attribute name.
4. In a tag name.
5. Directly in CSS.

Each of these locations have their own form of escaping and filtering.

Because many browsers attempt to implement XSS protection, any manual verification of this finding should be conducted using multiple different browsers and browser
versions.

**References**

- [WASC](http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting)
- [Secunia](http://secunia.com/advisories/9716/)
- [OWASP XSS Prevention Cheat Sheet](https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet)
- [OWASP DOM Based XSS](https://www.owasp.org/index.php/DOM_Based_XSS)
- [OWASP DOM Based XSS Prevention Cheat Sheet](https://www.owasp.org/index.php/DOM_based_XSS_Prevention_Cheat_Sheet)",markdown,,,escalated,0.8266207,1
449,Static Analysis,2020-05-18T14:51:00-04:00,74345,2020-05-18T14:54:28-04:00,high,escalated,"contents = this.replacePackageNamePlaceholders(contents, packageName);
            contents = this.replacePackageAuthorPlaceholders(contents, packageAuthor);
            contents = this.replaceCurrentYearPlaceholders(contents);
            results.push(fs.writeFileSync(sourcePath, contents));
          } else {
            results.push(void 0);
          }",139,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/lib/init.js,file,142,142,2020-05-18T14:51:35-04:00,Static Analysis,ecd1b614179fad4c5807eb746c8d93996057dc747bbd482dce6aa7e91d17e648,192715,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Found fs.writeFileSync with non literal argument at index 0,plain-text,Atom x64/resources/app/apm/lib/init.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\init.js,file,42,26,142,142,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.9786352,1
450,Static Analysis,2020-05-18T14:51:00-04:00,74349,2020-05-18T14:54:28-04:00,medium,false-positive,"return callback(error);
          } else {
            destinationPath = path.resolve(destinationPath);
            templatePath = path.resolve(__dirname, '..', 'templates', 'theme');
            this.generateFromTemplate(destinationPath, templatePath);
            fs.removeSync(path.join(destinationPath, 'styles', 'colors.less'));
            fs.removeSync(path.join(destinationPath, 'LICENSE.md'));",102,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/init.js,file,105,105,2020-05-18T14:51:35-04:00,Static Analysis,9ced861d153ab418069da667a5c9f5fefe90861e103a53df87d410e5550ee1e7,192694,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'__dirname' is not defined.,plain-text,Atom x64/resources/app/apm/lib/init.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\init.js,file,50,41,105,105,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.09524149,0
451,Static Analysis,2020-05-18T14:51:00-04:00,74350,2020-05-18T14:54:28-04:00,medium,false-positive,"path = require('path');

  yargs = require('yargs');

  Command = require('./command');",4,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/init.js,file,7,7,2020-05-18T14:51:35-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192639,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/init.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\init.js,file,18,11,7,7,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
452,Static Analysis,2020-05-18T14:51:00-04:00,74351,2020-05-18T14:54:28-04:00,medium,false-positive,"fs = require('./fs');

  module.exports = Init = (function() {
    class Init extends Command {
      parseOptions(argv) {
        var options;",10,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/init.js,file,13,13,2020-05-18T14:51:35-04:00,Static Analysis,62173c3357301b64bcb7cb49ad65b9eeb8aa24356212b93fe0fe0166d3218ce7,192642,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'module' is not defined.,plain-text,Atom x64/resources/app/apm/lib/init.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\init.js,file,9,3,13,13,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.068299174,0
453,Static Analysis,2020-05-18T14:51:00-04:00,74354,2020-05-18T14:54:28-04:00,high,false-positive,"ref = fs.listRecursive(templatePath);
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          childPath = ref[i];
          templateChildPath = path.resolve(templatePath, childPath);
          relativePath = templateChildPath.replace(templatePath, """");
          relativePath = relativePath.replace(/^\//, '');",121,,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/lib/init.js,file,124,124,2020-05-18T14:51:35-04:00,Static Analysis,6569b353992e88510a975ec3412e07f9c2539e0cf8eb813d02c1c97e2a312d82,192703,high,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Generic Object Injection Sink,plain-text,Atom x64/resources/app/apm/lib/init.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\init.js,file,29,23,124,124,security,detect-object-injection,ESLint,ESLINT-SECURITY-detect-object-injection,Detect object injection,"Detects `variable[key]` as a left- or right-hand assignment operand.

More information: [The Dangers of Square Bracket Notation](https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/the-dangers-of-square-bracket-notation.md)",markdown,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.9251437,1
454,Static Analysis,2020-05-18T14:51:00-04:00,74359,2020-05-18T14:54:28-04:00,high,escalated,"results.push(fs.makeTreeSync(sourcePath));
          } else if (fs.isFileSync(templateChildPath)) {
            fs.makeTreeSync(path.dirname(sourcePath));
            contents = fs.readFileSync(templateChildPath).toString();
            contents = this.replacePackageNamePlaceholders(contents, packageName);
            contents = this.replacePackageAuthorPlaceholders(contents, packageAuthor);
            contents = this.replaceCurrentYearPlaceholders(contents);",135,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/lib/init.js,file,138,138,2020-05-18T14:51:35-04:00,Static Analysis,374ad040fff48d9edaa97052bf28a674b1f4e79af66a0448f1ab1699003790cd,192714,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Found fs.readFileSync with non literal argument at index 0,plain-text,Atom x64/resources/app/apm/lib/init.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\init.js,file,39,24,138,138,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.9758102,1
455,Static Analysis,2020-05-18T14:51:00-04:00,74360,2020-05-18T14:54:28-04:00,medium,false-positive,"if (packageName == null) {
          packageName = path.basename(packagePath);
        }
        packageAuthor = process.env.GITHUB_USER || 'atom';
        fs.makeTreeSync(packagePath);
        ref = fs.listRecursive(templatePath);
        results = [];",116,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/init.js,file,119,119,2020-05-18T14:51:35-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,192701,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/init.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\init.js,file,32,25,119,119,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
456,Static Analysis,2020-05-18T14:51:00-04:00,74384,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/Web/XmlTransform/XmlAttributePreservationProvider/GetDictAtPosition,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201207,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Microsoft/Web/XmlTransform/XmlAttributePreservationProvider/GetDictAtPosition,Microsoft/Web/XmlTransform/XmlAttributePreservationProvider/GetDictAtPosition,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
457,Static Analysis,2020-05-18T14:51:00-04:00,74392,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Archives/AbstractWritableArchive/SaveTo,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201201,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Archives/AbstractWritableArchive/SaveTo,SharpCompress/Archives/AbstractWritableArchive/SaveTo,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
458,Static Analysis,2020-05-18T14:51:00-04:00,74398,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Mono/Cecil/PE/ImageReader/ReadImageFrom,logical,,,2020-05-18T14:51:56-04:00,Static Analysis,55e06821e7af3c9abd2cdb6098176b069c68f0deffe9039ee00731c7a7c634e2,200224,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,This disposable local is not guaranteed to be disposed of before the method returns. Use a 'using' statement or surround the local's usage with a try/finally block. Local of type 'ImageReader' is not disposed of (at least not locally).,plain-text,Mono/Cecil/PE/ImageReader/ReadImageFrom,Mono/Cecil/PE/ImageReader/ReadImageFrom,logical,,,,,,EnsureLocalDisposalRule,Gendarme,GEND-EnsureLocalDisposalRule,Ensure Local Disposal ,"This rule checks that disposable locals are always disposed of before
the method returns. Use a 'using' statement (or a try/finally block) to
guarantee local disposal even in the event an unhandled exception
occurs.

**Bad** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    DecodeHeader (stream);
    if (!DecodedHeader.HasContent) {
        return;
    }
    DecodeContent (stream);
    stream.Dispose ();
}
```
**Good** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        DecodeHeader (stream);
        if (!DecodedHeader.HasContent) {
            return;
        }
        DecodeContent (stream);
    }
}
```
**Bad** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    Decode (stream);
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
    stream.Dispose ();
}
```
**Good** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        Decode (stream);
    }
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97956204,1
459,Static Analysis,2020-05-18T14:51:00-04:00,74439,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-388: 7PK - Errors,http://cwevis.org/browse/388,388,SharpCompress/Archives/AbstractArchive/SharpCompress/Common/IExtractionListener/FireFilePartExtractionBegin,logical,,,2020-05-18T14:51:56-04:00,Static Analysis,f73cef352a0b2bf1d0cc5310f027978a051db5e56968ba97879cbcb8e22239bf,199975,medium,,,CWE-754: Improper Check for Unusual or Exceptional Conditions,http://cwevis.org/browse/754,754,"Every delegate passed to native code must include an exception block which spans the entire method and has a catch all block. Surround the entire method body with a try/catch block. An exception occurred while verifying this method. This failure can probably be ignored, it's most likely due to an uncommon code sequence in the method the rule didn't understand. Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index",plain-text,SharpCompress/Archives/AbstractArchive/SharpCompress/Common/IExtractionListener/FireFilePartExtractionBegin,SharpCompress/Archives/AbstractArchive/SharpCompress/Common/IExtractionListener/FireFilePartExtractionBegin,logical,,,,,,DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRule,Gendarme,GEND-DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRule,Delegates Passed To Native Code Must Include Exception Handling ,"Every delegate which is passed to native code must include an exception
block which spans the entire method and has a catch all handler.

**Bad** example:


```csharp
public void NativeCallback ()
{
    Console.WriteLine (""{0}"", 1);
}
```
**Good** example:


```csharp
public void NativeCallback ()
{
    try {
        Console.WriteLine (""{0}"", 1);
    }
    catch {
    }
}
```",markdown,rule-e3f0972459f483bc18a68eed953b03a6c7e7fb7e495bc2047dd97eaba40f966b,Error Handling,,,,,escalated,0.88051474,1
460,Static Analysis,2020-05-18T14:51:00-04:00,74451,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Squirrel/Shell/ShellLink/set_DisplayMode,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201267,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Squirrel/Shell/ShellLink/set_DisplayMode,Squirrel/Shell/ShellLink/set_DisplayMode,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
461,Static Analysis,2020-05-18T14:51:00-04:00,74456,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-227: 7PK - API Abuse,http://cwevis.org/browse/227,227,Microsoft/IdentityModel/Clients/ActiveDirectory/AdalSilentTokenAcquisitionException/(self),logical,,,2020-05-18T14:51:59-04:00,Static Analysis,47a6df44d16eb182f816f23918542a817d2995bc2ddf0168976c20b9c8c63cb2,202086,medium,,,CWE-573: Improper Following of Specification by Caller,http://cwevis.org/browse/573,573,"The required constructor for ISerializable is not present in this type. Add a (private for sealed, protected otherwise) serialization constructor for this type. The required constructor for ISerializable is not present in this type.",plain-text,Microsoft/IdentityModel/Clients/ActiveDirectory/AdalSilentTokenAcquisitionException/(self),Microsoft/IdentityModel/Clients/ActiveDirectory/AdalSilentTokenAcquisitionException/(self),logical,,,,,,MissingSerializationConstructorRule,Gendarme,GEND-MissingSerializationConstructorRule,Missing Serialization Constructor ,"This rule checks for types that implement **System.ISerializable** but
don't provide a serialization constructor. The constructor is required
in order to make the type serializeable but cannot be enforced by the
interface. The serialization constructor should be **private** for
**sealed** types and **protected** for unsealed types.

**Bad** example:


```csharp
[Serializable]
public class Bad : ISerializable {
    public void GetObjectData (SerializationInfo info, StreamingContext context)
    {
    }
}
```
**Good** example (sealed):


```csharp
[Serializable]
public sealed class Good : ISerializable {
    private ClassWithConstructor (SerializationInfo info, StreamingContext context)
    {
    }

    public void GetObjectData (SerializationInfo info, StreamingContext context)
    {
    }
}
```
**Good** example:


```csharp
[Serializable]
public class Good : ISerializable {
    protected ClassWithConstructor (SerializationInfo info, StreamingContext context)
    {
    }

    public void GetObjectData (SerializationInfo info, StreamingContext context)
    {
    }
}
```",markdown,rule-dc56fd6c6aaaf7aef3e91a691e1f8bd8f7311763a2d3286fce16c6c5cf52b5e2,API Abuse,"The software uses an API in a manner contrary to its intended use.

An API is a contract between a caller and a callee. The most common forms of API misuse occurs when the caller does not honor its end of this contract. For example, if a program does not call chdir() after calling chroot(), it violates the contract that specifies how to change the active root directory in a secure fashion. Another good example of library abuse is expecting the callee to return trustworthy DNS information to the caller. In this case, the caller misuses the callee API by making certain assumptions about its behavior (that the return value can be used for authentication purposes). One can also violate the caller-callee contract from the other side. For example, if a coder subclasses SecureRandom and returns a non-random value, the contract is violated.",markdown,,,escalated,0.94911677,1
462,Static Analysis,2020-05-18T14:51:00-04:00,74500,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-227: 7PK - API Abuse,http://cwevis.org/browse/227,227,Microsoft/Web/XmlTransform/XmlTransformationException/(self),logical,,,2020-05-18T14:51:57-04:00,Static Analysis,47a6df44d16eb182f816f23918542a817d2995bc2ddf0168976c20b9c8c63cb2,200688,medium,,,CWE-573: Improper Following of Specification by Caller,http://cwevis.org/browse/573,573,"The required constructor for ISerializable is not present in this type. Add a (private for sealed, protected otherwise) serialization constructor for this type. The required constructor for ISerializable is not present in this type.",plain-text,Microsoft/Web/XmlTransform/XmlTransformationException/(self),Microsoft/Web/XmlTransform/XmlTransformationException/(self),logical,,,,,,MissingSerializationConstructorRule,Gendarme,GEND-MissingSerializationConstructorRule,Missing Serialization Constructor ,"This rule checks for types that implement **System.ISerializable** but
don't provide a serialization constructor. The constructor is required
in order to make the type serializeable but cannot be enforced by the
interface. The serialization constructor should be **private** for
**sealed** types and **protected** for unsealed types.

**Bad** example:


```csharp
[Serializable]
public class Bad : ISerializable {
    public void GetObjectData (SerializationInfo info, StreamingContext context)
    {
    }
}
```
**Good** example (sealed):


```csharp
[Serializable]
public sealed class Good : ISerializable {
    private ClassWithConstructor (SerializationInfo info, StreamingContext context)
    {
    }

    public void GetObjectData (SerializationInfo info, StreamingContext context)
    {
    }
}
```
**Good** example:


```csharp
[Serializable]
public class Good : ISerializable {
    protected ClassWithConstructor (SerializationInfo info, StreamingContext context)
    {
    }

    public void GetObjectData (SerializationInfo info, StreamingContext context)
    {
    }
}
```",markdown,rule-dc56fd6c6aaaf7aef3e91a691e1f8bd8f7311763a2d3286fce16c6c5cf52b5e2,API Abuse,"The software uses an API in a manner contrary to its intended use.

An API is a contract between a caller and a callee. The most common forms of API misuse occurs when the caller does not honor its end of this contract. For example, if a program does not call chdir() after calling chroot(), it violates the contract that specifies how to change the active root directory in a secure fashion. Another good example of library abuse is expecting the callee to return trustworthy DNS information to the caller. In this case, the caller misuses the callee API by making certain assumptions about its behavior (that the return value can be used for authentication purposes). One can also violate the caller-callee contract from the other side. For example, if a coder subclasses SecureRandom and returns a non-random value, the contract is violated.",markdown,,,escalated,0.94911677,1
463,Static Analysis,2020-05-18T14:51:00-04:00,74512,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-227: 7PK - API Abuse,http://cwevis.org/browse/227,227,AzureDevOps/Authentication/LocationServiceException/(self),logical,,,2020-05-18T14:52:13-04:00,Static Analysis,c0835b5d21db03f022736d8368f03a3bcc260156b343eddb6e94ee375375ade4,202801,medium,,,CWE-573: Improper Following of Specification by Caller,http://cwevis.org/browse/573,573,"The required constructor for ISerializable is not present in this type. Add a (private for sealed, protected otherwise) serialization constructor for this type. The serialization constructor should be private since this type is sealed.",plain-text,AzureDevOps/Authentication/LocationServiceException/(self),AzureDevOps/Authentication/LocationServiceException/(self),logical,,,,,,MissingSerializationConstructorRule,Gendarme,GEND-MissingSerializationConstructorRule,Missing Serialization Constructor ,"This rule checks for types that implement **System.ISerializable** but
don't provide a serialization constructor. The constructor is required
in order to make the type serializeable but cannot be enforced by the
interface. The serialization constructor should be **private** for
**sealed** types and **protected** for unsealed types.

**Bad** example:


```csharp
[Serializable]
public class Bad : ISerializable {
    public void GetObjectData (SerializationInfo info, StreamingContext context)
    {
    }
}
```
**Good** example (sealed):


```csharp
[Serializable]
public sealed class Good : ISerializable {
    private ClassWithConstructor (SerializationInfo info, StreamingContext context)
    {
    }

    public void GetObjectData (SerializationInfo info, StreamingContext context)
    {
    }
}
```
**Good** example:


```csharp
[Serializable]
public class Good : ISerializable {
    protected ClassWithConstructor (SerializationInfo info, StreamingContext context)
    {
    }

    public void GetObjectData (SerializationInfo info, StreamingContext context)
    {
    }
}
```",markdown,rule-dc56fd6c6aaaf7aef3e91a691e1f8bd8f7311763a2d3286fce16c6c5cf52b5e2,API Abuse,"The software uses an API in a manner contrary to its intended use.

An API is a contract between a caller and a callee. The most common forms of API misuse occurs when the caller does not honor its end of this contract. For example, if a program does not call chdir() after calling chroot(), it violates the contract that specifies how to change the active root directory in a secure fashion. Another good example of library abuse is expecting the callee to return trustworthy DNS information to the caller. In this case, the caller misuses the callee API by making certain assumptions about its behavior (that the return value can be used for authentication purposes). One can also violate the caller-callee contract from the other side. For example, if a coder subclasses SecureRandom and returns a non-random value, the contract is violated.",markdown,,,escalated,0.94725496,1
464,Static Analysis,2020-05-18T14:51:00-04:00,74521,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Common/Rar/RarCrcBinaryReader/ReadBytes,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201190,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Common/Rar/RarCrcBinaryReader/ReadBytes,SharpCompress/Common/Rar/RarCrcBinaryReader/ReadBytes,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
465,Static Analysis,2020-05-18T14:51:00-04:00,74524,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Compressors/Deflate/ZlibBaseStream/Read,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201167,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Compressors/Deflate/ZlibBaseStream/Read,SharpCompress/Compressors/Deflate/ZlibBaseStream/Read,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
466,Static Analysis,2020-05-18T14:51:00-04:00,74570,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/Native/RSACng/set_EncryptionHashAlgorithm,logical,,,2020-05-18T14:52:00-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,202223,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/Native/RSACng/set_EncryptionHashAlgorithm,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/Native/RSACng/set_EncryptionHashAlgorithm,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
467,Static Analysis,2020-05-18T14:51:00-04:00,74692,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-465: Pointer Issues,http://cwevis.org/browse/465,465,Atlassian/Shared/Helpers/StreamExtensions/WriteStringUtf8,logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-0dd0e028a5ce327b29cd3ffa9ef62c97353c7155364a9a4b89933187ee675fef,Invalid Pointer,,,,,escalated,0.6708902,1
468,Static Analysis,2020-05-18T14:51:00-04:00,74722,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/Alm/Cli/Installer/ExecuteGit,logical,,,2020-05-18T14:52:14-04:00,Static Analysis,f6e7a27beb47b13d9eb4ba4a378ee22d05730082073a972429fe831f72cb6c95,202955,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,This disposable local is not guaranteed to be disposed of before the method returns. Use a 'using' statement or surround the local's usage with a try/finally block. Local of type 'Process' is not disposed of (at least not locally).,plain-text,Microsoft/Alm/Cli/Installer/ExecuteGit,Microsoft/Alm/Cli/Installer/ExecuteGit,logical,,,,,,EnsureLocalDisposalRule,Gendarme,GEND-EnsureLocalDisposalRule,Ensure Local Disposal ,"This rule checks that disposable locals are always disposed of before
the method returns. Use a 'using' statement (or a try/finally block) to
guarantee local disposal even in the event an unhandled exception
occurs.

**Bad** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    DecodeHeader (stream);
    if (!DecodedHeader.HasContent) {
        return;
    }
    DecodeContent (stream);
    stream.Dispose ();
}
```
**Good** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        DecodeHeader (stream);
        if (!DecodedHeader.HasContent) {
            return;
        }
        DecodeContent (stream);
    }
}
```
**Bad** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    Decode (stream);
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
    stream.Dispose ();
}
```
**Good** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        Decode (stream);
    }
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.98242956,1
469,Static Analysis,2020-05-18T14:51:00-04:00,74787,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-189: Numeric Errors,http://cwevis.org/browse/189,189,SharpCompress/Compressors/PPMd/I1/Model/MakeEscapeFrequency,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,03ba04f65bdee74e716d09d64feb1f004a116c5543f675d9955d1297acbf5baf,201063,medium,,,CWE-190: Integer Overflow or Wraparound,http://cwevis.org/browse/190,190,This method casts the result of an integer multiplication into a larger integer. This may result in an overflow before the cast can be done. Cast the operands instead of the result.,plain-text,SharpCompress/Compressors/PPMd/I1/Model/MakeEscapeFrequency,SharpCompress/Compressors/PPMd/I1/Model/MakeEscapeFrequency,logical,,,,,,ReviewCastOnIntegerMultiplicationRule,Gendarme,GEND-ReviewCastOnIntegerMultiplicationRule,Review Cast On Integer Multiplication ,"This rule checks for integral multiply operations where the result is
cast to a larger integral type. It's safer instead to cast an operand to
the larger type to minimize the chance of overflow.

**Bad** example:


```csharp
public long Bad (int a, int b)
{
    // e.g. Bad (Int32.MaxInt, Int32.MaxInt) == 1
    return a * b;
}
```
**Good** example:


```csharp
public long Good (int a, int b)
{
    // e.g. Good (Int32.MaxInt, Int32.MaxInt) == 4611686014132420609
    return (long) a * b;
}
```",markdown,rule-87c4a91bc4c9e20c70f0637bd67a4d03975f25b3ec675b9cc13d0f04540c76a6,Numeric Error,,,,,escalated,0.9599974,1
470,Static Analysis,2020-05-18T14:51:00-04:00,74904,2020-05-18T14:54:28-04:00,high,escalated,"// Returns a name/owner string or null if not parseable.
    getRepository: function(pack = {}) {
      var name, owner, ref, ref1, repoPath, repository;
      if (repository = (ref = (ref1 = pack.repository) != null ? ref1.url : void 0) != null ? ref : pack.repository) {
        repoPath = url.parse(repository.replace(/\.git$/, '')).pathname;
        [name, owner] = repoPath.split('/').slice(-2);
        if (name && owner) {",12,,,,CWE-697: Incorrect Comparison,http://cwevis.org/browse/697,697,Atom x64/resources/app/apm/lib/packages.js,file,15,15,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-c271f2bb931810eef633f7c736d1dd934fbd6ed5f62ac8d8ea39ade811190622,Comparison,,,,,escalated,0.9110538,1
471,Static Analysis,2020-05-18T14:51:00-04:00,74905,2020-05-18T14:54:28-04:00,medium,false-positive,"url = require('url');

  // Package helpers
  module.exports = {
    // Parse the repository in `name/owner` format from the package metadata.

    // pack - The package metadata object.",4,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/packages.js,file,7,7,2020-05-18T14:51:37-04:00,Static Analysis,62173c3357301b64bcb7cb49ad65b9eeb8aa24356212b93fe0fe0166d3218ce7,193708,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'module' is not defined.,plain-text,Atom x64/resources/app/apm/lib/packages.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\packages.js,file,9,3,7,7,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.068299174,0
472,Static Analysis,2020-05-18T14:51:00-04:00,74907,2020-05-18T14:54:28-04:00,medium,false-positive,"(function() {
  var url;

  url = require('url');

  // Package helpers
  module.exports = {",1,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/packages.js,file,4,4,2020-05-18T14:51:37-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,193707,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/packages.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\packages.js,file,16,9,4,4,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
473,Static Analysis,2020-05-18T14:51:00-04:00,74936,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Archives/Tar/TarArchive/LoadVolumes,logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.98149246,1
474,Static Analysis,2020-05-18T14:51:00-04:00,74939,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-189: Numeric Errors,http://cwevis.org/browse/189,189,SharpCompress/Compressors/PPMd/I1/Model/UpdateModel,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,03ba04f65bdee74e716d09d64feb1f004a116c5543f675d9955d1297acbf5baf,201062,medium,,,CWE-190: Integer Overflow or Wraparound,http://cwevis.org/browse/190,190,This method casts the result of an integer multiplication into a larger integer. This may result in an overflow before the cast can be done. Cast the operands instead of the result.,plain-text,SharpCompress/Compressors/PPMd/I1/Model/UpdateModel,SharpCompress/Compressors/PPMd/I1/Model/UpdateModel,logical,,,,,,ReviewCastOnIntegerMultiplicationRule,Gendarme,GEND-ReviewCastOnIntegerMultiplicationRule,Review Cast On Integer Multiplication ,"This rule checks for integral multiply operations where the result is
cast to a larger integral type. It's safer instead to cast an operand to
the larger type to minimize the chance of overflow.

**Bad** example:


```csharp
public long Bad (int a, int b)
{
    // e.g. Bad (Int32.MaxInt, Int32.MaxInt) == 1
    return a * b;
}
```
**Good** example:


```csharp
public long Good (int a, int b)
{
    // e.g. Good (Int32.MaxInt, Int32.MaxInt) == 4611686014132420609
    return (long) a * b;
}
```",markdown,rule-87c4a91bc4c9e20c70f0637bd67a4d03975f25b3ec675b9cc13d0f04540c76a6,Numeric Error,,,,,escalated,0.9599974,1
475,Static Analysis,2020-05-18T14:51:00-04:00,75050,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Compressors/Xz/XZBlock/Read,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201136,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Compressors/Xz/XZBlock/Read,SharpCompress/Compressors/Xz/XZBlock/Read,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
476,Static Analysis,2020-05-18T14:51:00-04:00,75088,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/Alm/Cli/Program/Get,logical,,,2020-05-18T14:52:14-04:00,Static Analysis,9d4d0dd753ee6745414a354655547d7752c27107ac72758d72ca674f677a4473,202961,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,This disposable local is not guaranteed to be disposed of before the method returns. Use a 'using' statement or surround the local's usage with a try/finally block. Local of type 'Task' is not disposed of (is this a fluent-like API ?).,plain-text,Microsoft/Alm/Cli/Program/Get,Microsoft/Alm/Cli/Program/Get,logical,,,,,,EnsureLocalDisposalRule,Gendarme,GEND-EnsureLocalDisposalRule,Ensure Local Disposal ,"This rule checks that disposable locals are always disposed of before
the method returns. Use a 'using' statement (or a try/finally block) to
guarantee local disposal even in the event an unhandled exception
occurs.

**Bad** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    DecodeHeader (stream);
    if (!DecodedHeader.HasContent) {
        return;
    }
    DecodeContent (stream);
    stream.Dispose ();
}
```
**Good** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        DecodeHeader (stream);
        if (!DecodedHeader.HasContent) {
            return;
        }
        DecodeContent (stream);
    }
}
```
**Bad** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    Decode (stream);
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
    stream.Dispose ();
}
```
**Good** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        Decode (stream);
    }
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.9824454,1
477,Static Analysis,2020-05-18T14:51:00-04:00,75089,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/Alm/Authentication/RuntimeContext/Create,logical,,,2020-05-18T14:52:00-04:00,Static Analysis,892219ae9f9ddc90b2eea49b42527bd9c0e92219e2de961ec9967258a82e57d4,202392,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,This disposable local is not guaranteed to be disposed of before the method returns. Use a 'using' statement or surround the local's usage with a try/finally block. Local of type 'Trace' is not disposed of (at least not locally).,plain-text,Microsoft/Alm/Authentication/RuntimeContext/Create,Microsoft/Alm/Authentication/RuntimeContext/Create,logical,,,,,,EnsureLocalDisposalRule,Gendarme,GEND-EnsureLocalDisposalRule,Ensure Local Disposal ,"This rule checks that disposable locals are always disposed of before
the method returns. Use a 'using' statement (or a try/finally block) to
guarantee local disposal even in the event an unhandled exception
occurs.

**Bad** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    DecodeHeader (stream);
    if (!DecodedHeader.HasContent) {
        return;
    }
    DecodeContent (stream);
    stream.Dispose ();
}
```
**Good** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        DecodeHeader (stream);
        if (!DecodedHeader.HasContent) {
            return;
        }
        DecodeContent (stream);
    }
}
```
**Bad** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    Decode (stream);
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
    stream.Dispose ();
}
```
**Good** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        Decode (stream);
    }
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.9824021,1
478,Static Analysis,2020-05-18T14:51:00-04:00,75090,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/Web/XmlTransform/XmlTransformation/PreprocessTransformDocument,logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.98149246,1
479,Static Analysis,2020-05-18T14:51:00-04:00,75100,2020-05-18T14:54:28-04:00,high,escalated,,,,,,CWE-695: Use of Low-Level Functionality,http://cwevis.org/browse/695,695,Microsoft/Alm/Cli/OperationArguments/(self),logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,GEND-PreferSafeHandleRule,Prefer Safe Handle ,"In general it is best to interop with native code using
**System.Runtime.InteropServices.SafeHandle** instead of
**System.IntPtr** or **System.UIntPtr** because:

SafeHandles are type safe.
SafeHandles are guaranteed to be disposed of during exceptional
conditions like a thread aborting unexpectedly or a stack overflow.
SafeHandles are not vulnerable to reycle attacks.
You don't need to write a finalizer which can be tricky to do because
they execute within their own thread, may execute on partially
constructed objects, and normally tear down the application if you allow
an exception to escape from them.


 **Bad** example:


```csharp
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable.
public sealed class Database {
    ~Database ()
    {
        // This will execute even if the ctor throws so it is important to check
        // to see if the fields are initialized.
        if (m_database != IntPtr.Zero) {
            NativeMethods.sqlite3_close (m_database);
        }
    }

    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        int err = NativeMethods.sqlite3_open_v2 (path, out m_database, flags, IntPtr.Zero);
        // handle errors
    }

    // exec and query methods would go here

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (IntPtr db);

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private IntPtr m_database;
}
```
**Good** example:


```csharp
using System.Runtime.ConstrainedExecution;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable, but you do not need to implement a finalizer because
// SafeHandle will take care of the cleanup.
internal sealed class Database {
    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        m_database = new SqlitePtr (path, flags);
    }

    // exec and query methods would go here

    // This corresponds to a native sqlite3*.
    [SecurityPermission (SecurityAction.InheritanceDemand, UnmanagedCode = true)]
    [SecurityPermission (SecurityAction.Demand, UnmanagedCode = true)]
    private sealed class SqlitePtr : SafeHandle {
        public SqlitePtr (string path, NativeMethods.OpenFlags flags) : base (IntPtr.Zero, true)
        {
            int err = NativeMethods.sqlite3_open_v2 (path, out handle, flags, IntPtr.Zero);
            // handle errors
        }

        public override bool IsInvalid {
            get {
                return (handle == IntPtr.Zero);
            }
        }

        // This will not be called if the handle is invalid. Note that this method should not throw.
        [ReliabilityContract (Consistency.WillNotCorruptState, Cer.MayFail)]
        protected override bool ReleaseHandle ()
        {
            NativeMethods.sqlite3_close (this);
            return true;
        }
    }

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (SqlitePtr db);

        // Open must take an IntPtr but all other methods take a type safe SqlitePtr.
        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private SqlitePtr m_database;
}
```",markdown,,,escalated,0.75802827,1
480,Static Analysis,2020-05-18T14:51:00-04:00,75107,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Compressors/BZip2/BZip2Stream/Read,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201171,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Compressors/BZip2/BZip2Stream/Read,SharpCompress/Compressors/BZip2/BZip2Stream/Read,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
481,Static Analysis,2020-05-18T14:51:00-04:00,75119,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-227: 7PK - API Abuse,http://cwevis.org/browse/227,227,SharpCompress/Compressors/Deflate/ZlibException/(self),logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-dc56fd6c6aaaf7aef3e91a691e1f8bd8f7311763a2d3286fce16c6c5cf52b5e2,API Abuse,"The software uses an API in a manner contrary to its intended use.

An API is a contract between a caller and a callee. The most common forms of API misuse occurs when the caller does not honor its end of this contract. For example, if a program does not call chdir() after calling chroot(), it violates the contract that specifies how to change the active root directory in a secure fashion. Another good example of library abuse is expecting the callee to return trustworthy DNS information to the caller. In this case, the caller misuses the callee API by making certain assumptions about its behavior (that the return value can be used for authentication purposes). One can also violate the caller-callee contract from the other side. For example, if a coder subclasses SecureRandom and returns a non-random value, the contract is violated.",markdown,,,escalated,0.94525355,1
482,Static Analysis,2020-05-18T14:51:00-04:00,75286,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,WpfAnimatedGif/ImageBehavior/InitAnimationOrImage,logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.98149246,1
483,Static Analysis,2020-05-18T14:51:00-04:00,75299,2020-05-18T14:54:28-04:00,medium,false-positive,"(function() {
  var config, configureRequest, loadNpm, npm, request;

  npm = require('npm');

  request = require('request');",1,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/request.js,file,4,4,2020-05-18T14:51:38-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,194337,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/request.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\request.js,file,16,9,4,4,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
484,Static Analysis,2020-05-18T14:51:00-04:00,75300,2020-05-18T14:54:28-04:00,medium,false-positive,"request = require('request');

  config = require('./apm');

  loadNpm = function(callback) {
    var npmOptions;",5,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/request.js,file,8,8,2020-05-18T14:51:38-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,194339,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/request.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\request.js,file,19,12,8,8,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
485,Static Analysis,2020-05-18T14:51:00-04:00,75301,2020-05-18T14:54:28-04:00,medium,false-positive,"return loadNpm(function() {
      var base, ref, userAgent;
      if (requestOptions.proxy == null) {
        requestOptions.proxy = npm.config.get('https-proxy') || npm.config.get('proxy') || process.env.HTTPS_PROXY || process.env.HTTP_PROXY;
      }
      if (requestOptions.strictSSL == null) {
        requestOptions.strictSSL = npm.config.get('strict-ssl');",20,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/request.js,file,23,23,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.17391245,0
486,Static Analysis,2020-05-18T14:51:00-04:00,75302,2020-05-18T14:54:28-04:00,medium,false-positive,"});
  };

  module.exports = {
    get: function(requestOptions, callback) {
      return configureRequest(requestOptions, function() {
        var ref, requestsMade, retryCount, tryRequest;",36,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/request.js,file,39,39,2020-05-18T14:51:38-04:00,Static Analysis,62173c3357301b64bcb7cb49ad65b9eeb8aa24356212b93fe0fe0166d3218ce7,194385,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'module' is not defined.,plain-text,Atom x64/resources/app/apm/lib/request.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\request.js,file,9,3,39,39,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.068299174,0
487,Static Analysis,2020-05-18T14:51:00-04:00,75303,2020-05-18T14:54:28-04:00,medium,false-positive,"npm = require('npm');

  request = require('request');

  config = require('./apm');",3,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/request.js,file,6,6,2020-05-18T14:51:38-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,194338,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/request.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\request.js,file,20,13,6,6,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
488,Static Analysis,2020-05-18T14:51:00-04:00,75304,2020-05-18T14:54:28-04:00,medium,false-positive,"if (requestOptions.strictSSL == null) {
        requestOptions.strictSSL = npm.config.get('strict-ssl');
      }
      userAgent = (ref = npm.config.get('user-agent')) != null ? ref : `AtomApm/${(require('../package.json').version)}`;
      if (requestOptions.headers == null) {
        requestOptions.headers = {};
      }",25,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/request.js,file,28,28,2020-05-18T14:51:38-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,194368,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/request.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\request.js,file,91,84,28,28,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
489,Static Analysis,2020-05-18T14:51:00-04:00,75332,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/Web/XmlTransform/XmlFileInfoDocument/CloneNodeFromOtherDocument,logical,,,2020-05-18T14:51:56-04:00,Static Analysis,ef830747e5551b2f0cf322560adc2bb59b9ab6e54cc06227b94c01d4f09142ad,200192,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,This disposable local is not guaranteed to be disposed of before the method returns. Use a 'using' statement or surround the local's usage with a try/finally block. Local of type 'XmlTextReader' is not disposed of (at least not locally).,plain-text,Microsoft/Web/XmlTransform/XmlFileInfoDocument/CloneNodeFromOtherDocument,Microsoft/Web/XmlTransform/XmlFileInfoDocument/CloneNodeFromOtherDocument,logical,,,,,,EnsureLocalDisposalRule,Gendarme,GEND-EnsureLocalDisposalRule,Ensure Local Disposal ,"This rule checks that disposable locals are always disposed of before
the method returns. Use a 'using' statement (or a try/finally block) to
guarantee local disposal even in the event an unhandled exception
occurs.

**Bad** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    DecodeHeader (stream);
    if (!DecodedHeader.HasContent) {
        return;
    }
    DecodeContent (stream);
    stream.Dispose ();
}
```
**Good** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        DecodeHeader (stream);
        if (!DecodedHeader.HasContent) {
            return;
        }
        DecodeContent (stream);
    }
}
```
**Bad** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    Decode (stream);
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
    stream.Dispose ();
}
```
**Good** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        Decode (stream);
    }
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.98028827,1
490,Static Analysis,2020-05-18T14:51:00-04:00,75333,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-388: 7PK - Errors,http://cwevis.org/browse/388,388,Microsoft/IdentityModel/Clients/ActiveDirectory/LoggerCallbackHandler/ExecuteCallback,logical,,,2020-05-18T14:51:59-04:00,Static Analysis,f73cef352a0b2bf1d0cc5310f027978a051db5e56968ba97879cbcb8e22239bf,201994,medium,,,CWE-754: Improper Check for Unusual or Exceptional Conditions,http://cwevis.org/browse/754,754,"Every delegate passed to native code must include an exception block which spans the entire method and has a catch all block. Surround the entire method body with a try/catch block. An exception occurred while verifying this method. This failure can probably be ignored, it's most likely due to an uncommon code sequence in the method the rule didn't understand. Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index",plain-text,Microsoft/IdentityModel/Clients/ActiveDirectory/LoggerCallbackHandler/ExecuteCallback,Microsoft/IdentityModel/Clients/ActiveDirectory/LoggerCallbackHandler/ExecuteCallback,logical,,,,,,DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRule,Gendarme,GEND-DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRule,Delegates Passed To Native Code Must Include Exception Handling ,"Every delegate which is passed to native code must include an exception
block which spans the entire method and has a catch all handler.

**Bad** example:


```csharp
public void NativeCallback ()
{
    Console.WriteLine (""{0}"", 1);
}
```
**Good** example:


```csharp
public void NativeCallback ()
{
    try {
        Console.WriteLine (""{0}"", 1);
    }
    catch {
    }
}
```",markdown,rule-e3f0972459f483bc18a68eed953b03a6c7e7fb7e495bc2047dd97eaba40f966b,Error Handling,,,,,escalated,0.88051474,1
491,Static Analysis,2020-05-18T14:51:00-04:00,75359,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Compressors/BZip2/BZip2Stream/SetLength,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201173,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Compressors/BZip2/BZip2Stream/SetLength,SharpCompress/Compressors/BZip2/BZip2Stream/SetLength,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
492,Static Analysis,2020-05-18T14:51:00-04:00,75366,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-189: Numeric Errors,http://cwevis.org/browse/189,189,SharpCompress/Compressors/PPMd/I1/Model/PpmContext/op_Addition,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,03ba04f65bdee74e716d09d64feb1f004a116c5543f675d9955d1297acbf5baf,201065,medium,,,CWE-190: Integer Overflow or Wraparound,http://cwevis.org/browse/190,190,This method casts the result of an integer multiplication into a larger integer. This may result in an overflow before the cast can be done. Cast the operands instead of the result.,plain-text,SharpCompress/Compressors/PPMd/I1/Model/PpmContext/op_Addition,SharpCompress/Compressors/PPMd/I1/Model/PpmContext/op_Addition,logical,,,,,,ReviewCastOnIntegerMultiplicationRule,Gendarme,GEND-ReviewCastOnIntegerMultiplicationRule,Review Cast On Integer Multiplication ,"This rule checks for integral multiply operations where the result is
cast to a larger integral type. It's safer instead to cast an operand to
the larger type to minimize the chance of overflow.

**Bad** example:


```csharp
public long Bad (int a, int b)
{
    // e.g. Bad (Int32.MaxInt, Int32.MaxInt) == 1
    return a * b;
}
```
**Good** example:


```csharp
public long Good (int a, int b)
{
    // e.g. Good (Int32.MaxInt, Int32.MaxInt) == 4611686014132420609
    return (long) a * b;
}
```",markdown,rule-87c4a91bc4c9e20c70f0637bd67a4d03975f25b3ec675b9cc13d0f04540c76a6,Numeric Error,,,,,escalated,0.9599974,1
493,Static Analysis,2020-05-18T14:51:00-04:00,75381,2020-05-18T14:54:28-04:00,high,escalated,,,,,,CWE-227: 7PK - API Abuse,http://cwevis.org/browse/227,227,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/Native/SafeLibraryHandle/FreeLibrary,logical,,,2020-05-18T14:52:00-04:00,Static Analysis,dbd57bbd7b01d2cdc8d58222b94308e03da707a5c7a5e9eab6acb7a083c63ff7,202214,high,,,CWE-676: Use of Potentially Dangerous Function,http://cwevis.org/browse/676,676,This type or method is decorated with [SuppressUnmanagedCodeSecurity] which reduce the number of security checks done when unmanaged code is called. Ensure that use of this attribute does not compromise the security of the application.,plain-text,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/Native/SafeLibraryHandle/FreeLibrary,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/Native/SafeLibraryHandle/FreeLibrary,logical,,,,,,ReviewSuppressUnmanagedCodeSecurityUsageRule,Gendarme,GEND-ReviewSuppressUnmanagedCodeSecurityUsageRule,Review Suppress Unmanaged Code Security Usage ,"This rule fires if a type or method is decorated with the
**[SuppressUnmanagedCodeSecurity]**attribute. This attribute reduces the
security checks done when executing unmanaged code and its usage should
be reviewed to confirm that no exploitable security holes are present.

Example:


```csharp
[SuppressUnmanagedCodeSecurity]
public class Safe {
    [DllImport (""User32.dll"")]
    static extern Boolean MessageBeep (UInt32 beepType);
}
```",markdown,rule-dc56fd6c6aaaf7aef3e91a691e1f8bd8f7311763a2d3286fce16c6c5cf52b5e2,API Abuse,"The software uses an API in a manner contrary to its intended use.

An API is a contract between a caller and a callee. The most common forms of API misuse occurs when the caller does not honor its end of this contract. For example, if a program does not call chdir() after calling chroot(), it violates the contract that specifies how to change the active root directory in a secure fashion. Another good example of library abuse is expecting the callee to return trustworthy DNS information to the caller. In this case, the caller misuses the callee API by making certain assumptions about its behavior (that the return value can be used for authentication purposes). One can also violate the caller-callee contract from the other side. For example, if a coder subclasses SecureRandom and returns a non-random value, the contract is violated.",markdown,,,escalated,0.9466878,1
494,Static Analysis,2020-05-18T14:51:00-04:00,75388,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Squirrel/Shell/ShellLink/set_Target,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201263,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Squirrel/Shell/ShellLink/set_Target,Squirrel/Shell/ShellLink/set_Target,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
495,Static Analysis,2020-05-18T14:51:00-04:00,75475,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/Alm/Cli/Program/Config,logical,,,2020-05-18T14:52:14-04:00,Static Analysis,9d4d0dd753ee6745414a354655547d7752c27107ac72758d72ca674f677a4473,202958,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,This disposable local is not guaranteed to be disposed of before the method returns. Use a 'using' statement or surround the local's usage with a try/finally block. Local of type 'Task' is not disposed of (is this a fluent-like API ?).,plain-text,Microsoft/Alm/Cli/Program/Config,Microsoft/Alm/Cli/Program/Config,logical,,,,,,EnsureLocalDisposalRule,Gendarme,GEND-EnsureLocalDisposalRule,Ensure Local Disposal ,"This rule checks that disposable locals are always disposed of before
the method returns. Use a 'using' statement (or a try/finally block) to
guarantee local disposal even in the event an unhandled exception
occurs.

**Bad** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    DecodeHeader (stream);
    if (!DecodedHeader.HasContent) {
        return;
    }
    DecodeContent (stream);
    stream.Dispose ();
}
```
**Good** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        DecodeHeader (stream);
        if (!DecodedHeader.HasContent) {
            return;
        }
        DecodeContent (stream);
    }
}
```
**Bad** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    Decode (stream);
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
    stream.Dispose ();
}
```
**Good** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        Decode (stream);
    }
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.9824454,1
496,Static Analysis,2020-05-18T14:51:00-04:00,75545,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-465: Pointer Issues,http://cwevis.org/browse/465,465,Atlassian/Bitbucket/Authentication/TokenScope/op_Addition,logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-0dd0e028a5ce327b29cd3ffa9ef62c97353c7155364a9a4b89933187ee675fef,Invalid Pointer,,,,,escalated,0.6708902,1
497,Static Analysis,2020-05-18T14:51:00-04:00,75582,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-465: Pointer Issues,http://cwevis.org/browse/465,465,Atlassian/Bitbucket/Authentication/AuthenticationPrompts/GetUserFromTargetUri,logical,,,2020-05-18T14:51:51-04:00,Static Analysis,a5fceea52596662e61c66f7abfad9036937d4f22e1a53681e48ab77fa50bb893,197848,medium,,,CWE-476: NULL Pointer Dereference,http://cwevis.org/browse/476,476,A visible method does not check its parameter(s) for null values. Since the caller is unknown you should always verify all of your parameters to protect yourself.,plain-text,Atlassian/Bitbucket/Authentication/AuthenticationPrompts/GetUserFromTargetUri,Atlassian/Bitbucket/Authentication/AuthenticationPrompts/GetUserFromTargetUri,logical,,,,,,CheckParametersNullityInVisibleMethodsRule,Gendarme,GEND-CheckParametersNullityInVisibleMethodsRule,Check Parameters Nullity In Visible Methods ,"This rule checks if all nullable parameters of visible methods are
compared with **null** before they get used. This reduce the likelyhood
of the runtime throwing a **NullReferenceException**.

**Bad** example:


```csharp
[DllImport (""message"")]
internal static extern byte [] Parse (string s, int length);

public bool TryParse (string s, out Message m)
{
    // is 's' is null then 's.Length' will throw a NullReferenceException
    // which a TryParse method should never do
    byte [] data = Parse (s, s.Length);
    if (data == null) {
        m = null;
        return false;
    }
    m = new Message (data);
    return true;
}
```
**Good** example:


```csharp
[DllImport (""message"")]
internal static extern byte [] Parse (string s, int length);

public bool TryParse (string s, out Message m)
{
    if (s == null) {
        m = null;
        return false;
    }
    byte [] data = Parse (s, s.Length);
    if (data == null) {
        m = null;
        return false;
    }
    m = new Message (data);
    return true;
}
```",markdown,rule-0dd0e028a5ce327b29cd3ffa9ef62c97353c7155364a9a4b89933187ee675fef,Invalid Pointer,,,,,escalated,0.56592375,1
498,Static Analysis,2020-05-18T14:51:00-04:00,75619,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-189: Numeric Errors,http://cwevis.org/browse/189,189,SharpCompress/Compressors/PPMd/I1/MemoryNode/op_Addition,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,03ba04f65bdee74e716d09d64feb1f004a116c5543f675d9955d1297acbf5baf,201060,medium,,,CWE-190: Integer Overflow or Wraparound,http://cwevis.org/browse/190,190,This method casts the result of an integer multiplication into a larger integer. This may result in an overflow before the cast can be done. Cast the operands instead of the result.,plain-text,SharpCompress/Compressors/PPMd/I1/MemoryNode/op_Addition,SharpCompress/Compressors/PPMd/I1/MemoryNode/op_Addition,logical,,,,,,ReviewCastOnIntegerMultiplicationRule,Gendarme,GEND-ReviewCastOnIntegerMultiplicationRule,Review Cast On Integer Multiplication ,"This rule checks for integral multiply operations where the result is
cast to a larger integral type. It's safer instead to cast an operand to
the larger type to minimize the chance of overflow.

**Bad** example:


```csharp
public long Bad (int a, int b)
{
    // e.g. Bad (Int32.MaxInt, Int32.MaxInt) == 1
    return a * b;
}
```
**Good** example:


```csharp
public long Good (int a, int b)
{
    // e.g. Good (Int32.MaxInt, Int32.MaxInt) == 4611686014132420609
    return (long) a * b;
}
```",markdown,rule-87c4a91bc4c9e20c70f0637bd67a4d03975f25b3ec675b9cc13d0f04540c76a6,Numeric Error,,,,,escalated,0.9599974,1
499,Static Analysis,2020-05-18T14:51:00-04:00,75634,2020-05-18T14:54:28-04:00,high,escalated,"parseOptions(argv) {
        var options;
        options = yargs(argv).wrap(Math.min(100, yargs.terminalWidth()));
        options.usage(""\nUsage: apm disable [<package_name>]...\n\nDisables the named package(s)."");
        return options.alias('h', 'help').describe('help', 'Print this usage message');
      }",20,,,,CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'),http://cwevis.org/browse/79,79,Atom x64/resources/app/apm/lib/disable.js,file,23,23,2020-05-18T14:51:34-04:00,Static Analysis,b4414dd3b1087806bb332146e753f5917a3aec259e29c568ca289f9ab428d0d4,192304,high,,,CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS),http://cwevis.org/browse/80,80,HTML passed in to function 'options.usage',plain-text,Atom x64/resources/app/apm/lib/disable.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\disable.js,file,22,9,23,23,xss,no-mixed-html,ESLint,ESLINT-XSS-no-mixed-html,No mixed html,"Wanted a way to catch XSS issues in code before they end up in production.

## Rule Details

This rule aims to catch as many XSS issues by examining the code as possible.
The rule checks for mixed html/non-html content, unescaped input, etc.

The following patterns are considered warnings:

```js

// Mixed content
var x = '<div>' + input + '</div>';
$node.html( '<div>' + input + '</div>' );

// Unsafe container names.
var html = input;
var text = htmlInput;
displayValue( htmlInput );

// Checking certain expression parameters that might end up in the variables.
var htmlItems = [ input1, input2 ].join();
var textItems = [ '<div>', input, '</div>' ].join();
var tag = isNumbered ? '<ol>' : '<ul>';

// Checking function return values.
var createHtml = function( item ) { return item.name; }
var createBox = function( item ) { return '<div>' + encode( item ) + '</div>' }

```

The following patterns are not warnings:

```js

// Proper encoding
var html = '<div>' + encode( input ) + '</div>';
$node.html( '<div>' + encode( input ) + '</div>' );

// Proper container names
var html = '<img src=""happy.png"">';
var text = textbox.value;

```

## When Not To Use It

If you are creating a Node.js application that doesn't output any HTML, you can
safely disable this rule.

## Further Reading

- [XSS Prevention CHeat Sheet - OWASP](https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet)",markdown,rule-396ebe8bb0c3dc5d4eb2b5368a97688fdb0f2587416453645c3d06db2b216479,Cross-site Scripting (XSS),"Cross-site scripting (XSS) vulnerabilities occur when:
1. Untrusted data enters a web application, typically from a web request.
2. The web application dynamically generates a web page that contains this untrusted data.
3. During page generation, the application does not prevent the data from containing content that is executable by a web browser, such as JavaScript, HTML tags, HTML attributes, mouse events, Flash, ActiveX, etc.
4. A victim visits the generated web page through a web browser, which contains malicious script that was injected using the untrusted data.
5. Since the script comes from a web page that was sent by the web server, the victim's web browser executes the malicious script in the context of the web server's domain.
6. This effectively violates the intention of the web browser's same-origin policy, which states that scripts in one domain should not be able to access resources or run code in a different domain.
There are three main kinds of XSS:

*Reflected XSS (or Non-Persistent)*

The server reads data directly from the HTTP request and reflects it back in the HTTP response. Reflected XSS exploits occur when an attacker causes a victim to supply dangerous content to a vulnerable web application, which is then reflected back to the victim and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to the victim. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces a victim to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the victim, the content is executed by the victim's browser.

*Stored XSS (or Persistent)*

The application stores dangerous data in a database, message forum, visitor log, or other trusted data store. At a later time, the dangerous data is subsequently read back into the application and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. For example, the attacker might inject XSS into a log message, which might not be handled properly when an administrator views the logs.

*DOM-Based XSS*

In DOM-based XSS, the client performs the injection of XSS into the page; in the other types, the server performs the injection. DOM-based XSS generally involves server-controlled, trusted script that is sent to the client, such as Javascript that performs sanity checks on a form before the user submits it. If the server-supplied script processes user-supplied data and then injects it back into the web page (such as with dynamic HTML), then DOM-based XSS is possible.

Once the malicious script is injected, the attacker can perform a variety of malicious activities. The attacker could transfer private information, such as cookies that may include session information, from the victim's machine to the attacker. The attacker could send malicious requests to a web site on behalf of the victim, which could be especially dangerous to the site if the victim has administrator privileges to manage that site. Phishing attacks could be used to emulate trusted web sites and trick the victim into entering a password, allowing the attacker to compromise the victim's account on that web site. Finally, the script could exploit a vulnerability in the web browser itself possibly taking over the victim's machine, sometimes referred to as ""drive-by hacking.""

In many cases, the attack can be launched without the victim even being aware of it. Even with careful users, attackers frequently use a variety of methods to encode the malicious portion of the attack, such as URL encoding or Unicode, so the request looks less suspicious.

**Guidance**

To remedy XSS vulnerabilities, it is important to never use untrusted or unfiltered data within the code of a HTML page.

Untrusted data can originate not only form the client but potentially a third party or previously uploaded file etc.

Filtering of untrusted data typically involves converting special characters to their HTML entity encoded counterparts (however, other methods do exist, see references).

These special characters include:

* `&`
* `<`
* `>`
* `""`
* `'`
* `/`

An example of HTML entity encoding is converting `<` to `&lt;`.

Although it is possible to filter untrusted input, there are five locations within an HTML page where untrusted input (even if it has been filtered) should never be placed:

1. Directly in a script.
2. Inside an HTML comment.
3. In an attribute name.
4. In a tag name.
5. Directly in CSS.

Each of these locations have their own form of escaping and filtering.

Because many browsers attempt to implement XSS protection, any manual verification of this finding should be conducted using multiple different browsers and browser
versions.

**References**

- [WASC](http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting)
- [Secunia](http://secunia.com/advisories/9716/)
- [OWASP XSS Prevention Cheat Sheet](https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet)
- [OWASP DOM Based XSS](https://www.owasp.org/index.php/DOM_Based_XSS)
- [OWASP DOM Based XSS Prevention Cheat Sheet](https://www.owasp.org/index.php/DOM_based_XSS_Prevention_Cheat_Sheet)",markdown,,,escalated,0.8266207,1
500,Static Analysis,2020-05-18T14:51:00-04:00,75635,2020-05-18T14:54:28-04:00,medium,false-positive,"config = require('./apm');

  Command = require('./command');

  List = require('./list');",11,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/disable.js,file,14,14,2020-05-18T14:51:34-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192301,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/disable.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\disable.js,file,20,13,14,14,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
501,Static Analysis,2020-05-18T14:51:00-04:00,75636,2020-05-18T14:54:28-04:00,medium,false-positive,"(function() {
  var CSON, Command, Disable, List, _, config, path, yargs;

  _ = require('underscore-plus');

  path = require('path');",1,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/disable.js,file,4,4,2020-05-18T14:51:34-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192294,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/disable.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\disable.js,file,14,7,4,4,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
502,Static Analysis,2020-05-18T14:51:00-04:00,75638,2020-05-18T14:54:28-04:00,high,escalated,"result = _.union(disabledPackages, packageNames);
          _.setValueForKeyPath(settings, keyPath, result);
          try {
            CSON.writeFileSync(configFilePath, settings);
          } catch (error1) {
            error = error1;
            callback(`Failed to save \`${configFilePath}\`: ${error.message}`);",89,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/lib/disable.js,file,92,92,2020-05-18T14:51:34-04:00,Static Analysis,ecd1b614179fad4c5807eb746c8d93996057dc747bbd482dce6aa7e91d17e648,192350,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Found fs.writeFileSync with non literal argument at index 0,plain-text,Atom x64/resources/app/apm/lib/disable.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\disable.js,file,31,13,92,92,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.9786352,1
503,Static Analysis,2020-05-18T14:51:00-04:00,75639,2020-05-18T14:54:28-04:00,medium,false-positive,"yargs = require('yargs');

  config = require('./apm');

  Command = require('./command');",9,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/disable.js,file,12,12,2020-05-18T14:51:34-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192300,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/disable.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\disable.js,file,19,12,12,12,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
504,Static Analysis,2020-05-18T14:51:00-04:00,75640,2020-05-18T14:54:28-04:00,medium,false-positive,"Command = require('./command');

  List = require('./list');

  module.exports = Disable = (function() {
    class Disable extends Command {",13,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/disable.js,file,16,16,2020-05-18T14:51:34-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192302,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/disable.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\disable.js,file,17,10,16,16,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
505,Static Analysis,2020-05-18T14:51:00-04:00,75641,2020-05-18T14:54:28-04:00,medium,false-positive,"List = require('./list');

  module.exports = Disable = (function() {
    class Disable extends Command {
      parseOptions(argv) {
        var options;",15,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/disable.js,file,18,18,2020-05-18T14:51:34-04:00,Static Analysis,62173c3357301b64bcb7cb49ad65b9eeb8aa24356212b93fe0fe0166d3218ce7,192303,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'module' is not defined.,plain-text,Atom x64/resources/app/apm/lib/disable.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\disable.js,file,9,3,18,18,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.068299174,0
506,Static Analysis,2020-05-18T14:51:00-04:00,75644,2020-05-18T14:54:28-04:00,high,false-positive,"var i, len, results;
            results = [];
            for (i = 0, len = installedPackages.length; i < len; i++) {
              pkg = installedPackages[i];
              results.push(pkg.name);
            }
            return results;",68,,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/lib/disable.js,file,71,71,2020-05-18T14:51:34-04:00,Static Analysis,6569b353992e88510a975ec3412e07f9c2539e0cf8eb813d02c1c97e2a312d82,192338,high,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Generic Object Injection Sink,plain-text,Atom x64/resources/app/apm/lib/disable.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\disable.js,file,41,21,71,71,security,detect-object-injection,ESLint,ESLINT-SECURITY-detect-object-injection,Detect object injection,"Detects `variable[key]` as a left- or right-hand assignment operand.

More information: [The Dangers of Square Bracket Notation](https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/the-dangers-of-square-bracket-notation.md)",markdown,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.9251437,1
507,Static Analysis,2020-05-18T14:51:00-04:00,75645,2020-05-18T14:54:28-04:00,medium,false-positive,"path = require('path');

  CSON = require('season');

  yargs = require('yargs');",5,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/disable.js,file,8,8,2020-05-18T14:51:34-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192297,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/disable.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\disable.js,file,17,10,8,8,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
508,Static Analysis,2020-05-18T14:51:00-04:00,75646,2020-05-18T14:54:28-04:00,high,escalated,"return;
        }
        try {
          settings = CSON.readFileSync(configFilePath);
        } catch (error1) {
          error = error1;
          callback(`Failed to load \`${configFilePath}\`: ${error.message}`);",53,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/lib/disable.js,file,56,56,2020-05-18T14:51:34-04:00,Static Analysis,374ad040fff48d9edaa97052bf28a674b1f4e79af66a0448f1ab1699003790cd,192320,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Found fs.readFileSync with non literal argument at index 0,plain-text,Atom x64/resources/app/apm/lib/disable.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\disable.js,file,39,22,56,56,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.9758102,1
509,Static Analysis,2020-05-18T14:51:00-04:00,75652,2020-05-18T14:54:28-04:00,medium,false-positive,"_ = require('underscore-plus');

  path = require('path');

  CSON = require('season');",3,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/disable.js,file,6,6,2020-05-18T14:51:34-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192295,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/disable.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\disable.js,file,17,10,6,6,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
510,Static Analysis,2020-05-18T14:51:00-04:00,75653,2020-05-18T14:54:28-04:00,medium,false-positive,"CSON = require('season');

  yargs = require('yargs');

  config = require('./apm');",7,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/disable.js,file,10,10,2020-05-18T14:51:34-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192299,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/disable.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\disable.js,file,18,11,10,10,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270798,0
511,Static Analysis,2020-05-18T14:51:00-04:00,75673,2020-05-18T14:54:28-04:00,medium,false-positive,"return this.fork(this.atomNpmPath, configArgs, configOptions, function(code, stderr = '', stdout = '') {
          if (code === 0) {
            if (stdout) {
              process.stdout.write(stdout);
            }
            return callback();
          } else {",42,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/config.js,file,45,45,2020-05-18T14:51:34-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,192214,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/config.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\config.js,file,22,15,45,45,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474263,0
512,Static Analysis,2020-05-18T14:51:00-04:00,75674,2020-05-18T14:54:28-04:00,medium,false-positive,"return callback();
          } else {
            if (stderr) {
              process.stdout.write(stderr);
            }
            return callback(new Error(`npm config failed: ${code}`));
          }",47,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/config.js,file,50,50,2020-05-18T14:51:34-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,192215,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/config.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\config.js,file,22,15,50,50,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
513,Static Analysis,2020-05-18T14:51:00-04:00,75678,2020-05-18T14:54:28-04:00,medium,false-positive,"super();
        atomDirectory = apm.getAtomDirectory();
        this.atomNodeDirectory = path.join(atomDirectory, '.node-gyp');
        this.atomNpmPath = require.resolve('npm/bin/npm-cli');
      }

      parseOptions(argv) {",18,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/config.js,file,21,21,2020-05-18T14:51:34-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192211,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/config.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\config.js,file,35,28,21,21,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
514,Static Analysis,2020-05-18T14:51:00-04:00,75679,2020-05-18T14:54:28-04:00,high,escalated,"parseOptions(argv) {
        var options;
        options = yargs(argv).wrap(Math.min(100, yargs.terminalWidth()));
        options.usage(""\nUsage: apm config set <key> <value>\n       apm config get <key>\n       apm config delete <key>\n       apm config list\n       apm config edit\n"");
        return options.alias('h', 'help').describe('help', 'Print this usage message');
      }",24,,,,CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'),http://cwevis.org/browse/79,79,Atom x64/resources/app/apm/lib/config.js,file,27,27,2020-05-18T14:51:34-04:00,Static Analysis,b4414dd3b1087806bb332146e753f5917a3aec259e29c568ca289f9ab428d0d4,192212,high,,,CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS),http://cwevis.org/browse/80,80,HTML passed in to function 'options.usage',plain-text,Atom x64/resources/app/apm/lib/config.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\config.js,file,22,9,27,27,xss,no-mixed-html,ESLint,ESLINT-XSS-no-mixed-html,No mixed html,"Wanted a way to catch XSS issues in code before they end up in production.

## Rule Details

This rule aims to catch as many XSS issues by examining the code as possible.
The rule checks for mixed html/non-html content, unescaped input, etc.

The following patterns are considered warnings:

```js

// Mixed content
var x = '<div>' + input + '</div>';
$node.html( '<div>' + input + '</div>' );

// Unsafe container names.
var html = input;
var text = htmlInput;
displayValue( htmlInput );

// Checking certain expression parameters that might end up in the variables.
var htmlItems = [ input1, input2 ].join();
var textItems = [ '<div>', input, '</div>' ].join();
var tag = isNumbered ? '<ol>' : '<ul>';

// Checking function return values.
var createHtml = function( item ) { return item.name; }
var createBox = function( item ) { return '<div>' + encode( item ) + '</div>' }

```

The following patterns are not warnings:

```js

// Proper encoding
var html = '<div>' + encode( input ) + '</div>';
$node.html( '<div>' + encode( input ) + '</div>' );

// Proper container names
var html = '<img src=""happy.png"">';
var text = textbox.value;

```

## When Not To Use It

If you are creating a Node.js application that doesn't output any HTML, you can
safely disable this rule.

## Further Reading

- [XSS Prevention CHeat Sheet - OWASP](https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet)",markdown,rule-396ebe8bb0c3dc5d4eb2b5368a97688fdb0f2587416453645c3d06db2b216479,Cross-site Scripting (XSS),"Cross-site scripting (XSS) vulnerabilities occur when:
1. Untrusted data enters a web application, typically from a web request.
2. The web application dynamically generates a web page that contains this untrusted data.
3. During page generation, the application does not prevent the data from containing content that is executable by a web browser, such as JavaScript, HTML tags, HTML attributes, mouse events, Flash, ActiveX, etc.
4. A victim visits the generated web page through a web browser, which contains malicious script that was injected using the untrusted data.
5. Since the script comes from a web page that was sent by the web server, the victim's web browser executes the malicious script in the context of the web server's domain.
6. This effectively violates the intention of the web browser's same-origin policy, which states that scripts in one domain should not be able to access resources or run code in a different domain.
There are three main kinds of XSS:

*Reflected XSS (or Non-Persistent)*

The server reads data directly from the HTTP request and reflects it back in the HTTP response. Reflected XSS exploits occur when an attacker causes a victim to supply dangerous content to a vulnerable web application, which is then reflected back to the victim and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to the victim. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces a victim to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the victim, the content is executed by the victim's browser.

*Stored XSS (or Persistent)*

The application stores dangerous data in a database, message forum, visitor log, or other trusted data store. At a later time, the dangerous data is subsequently read back into the application and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. For example, the attacker might inject XSS into a log message, which might not be handled properly when an administrator views the logs.

*DOM-Based XSS*

In DOM-based XSS, the client performs the injection of XSS into the page; in the other types, the server performs the injection. DOM-based XSS generally involves server-controlled, trusted script that is sent to the client, such as Javascript that performs sanity checks on a form before the user submits it. If the server-supplied script processes user-supplied data and then injects it back into the web page (such as with dynamic HTML), then DOM-based XSS is possible.

Once the malicious script is injected, the attacker can perform a variety of malicious activities. The attacker could transfer private information, such as cookies that may include session information, from the victim's machine to the attacker. The attacker could send malicious requests to a web site on behalf of the victim, which could be especially dangerous to the site if the victim has administrator privileges to manage that site. Phishing attacks could be used to emulate trusted web sites and trick the victim into entering a password, allowing the attacker to compromise the victim's account on that web site. Finally, the script could exploit a vulnerability in the web browser itself possibly taking over the victim's machine, sometimes referred to as ""drive-by hacking.""

In many cases, the attack can be launched without the victim even being aware of it. Even with careful users, attackers frequently use a variety of methods to encode the malicious portion of the attack, such as URL encoding or Unicode, so the request looks less suspicious.

**Guidance**

To remedy XSS vulnerabilities, it is important to never use untrusted or unfiltered data within the code of a HTML page.

Untrusted data can originate not only form the client but potentially a third party or previously uploaded file etc.

Filtering of untrusted data typically involves converting special characters to their HTML entity encoded counterparts (however, other methods do exist, see references).

These special characters include:

* `&`
* `<`
* `>`
* `""`
* `'`
* `/`

An example of HTML entity encoding is converting `<` to `&lt;`.

Although it is possible to filter untrusted input, there are five locations within an HTML page where untrusted input (even if it has been filtered) should never be placed:

1. Directly in a script.
2. Inside an HTML comment.
3. In an attribute name.
4. In a tag name.
5. Directly in CSS.

Each of these locations have their own form of escaping and filtering.

Because many browsers attempt to implement XSS protection, any manual verification of this finding should be conducted using multiple different browsers and browser
versions.

**References**

- [WASC](http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting)
- [Secunia](http://secunia.com/advisories/9716/)
- [OWASP XSS Prevention Cheat Sheet](https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet)
- [OWASP DOM Based XSS](https://www.owasp.org/index.php/DOM_Based_XSS)
- [OWASP DOM Based XSS Prevention Cheat Sheet](https://www.owasp.org/index.php/DOM_based_XSS_Prevention_Cheat_Sheet)",markdown,,,escalated,0.8266207,1
515,Static Analysis,2020-05-18T14:51:00-04:00,75680,2020-05-18T14:54:28-04:00,medium,false-positive,"yargs = require('yargs');

  apm = require('./apm');

  Command = require('./command');",7,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/config.js,file,10,10,2020-05-18T14:51:34-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192208,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/config.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\config.js,file,16,9,10,10,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
516,Static Analysis,2020-05-18T14:51:00-04:00,75681,2020-05-18T14:54:28-04:00,medium,false-positive,"path = require('path');

  _ = require('underscore-plus');

  yargs = require('yargs');",3,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/config.js,file,6,6,2020-05-18T14:51:34-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192206,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/config.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\config.js,file,14,7,6,6,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
517,Static Analysis,2020-05-18T14:51:00-04:00,75684,2020-05-18T14:54:28-04:00,medium,false-positive,"options = this.parseOptions(options.commandArgs);
        configArgs = ['--globalconfig', apm.getGlobalConfigPath(), '--userconfig', apm.getUserConfigPath(), 'config'];
        configArgs = configArgs.concat(options.argv._);
        env = _.extend({}, process.env, {
          HOME: this.atomNodeDirectory,
          RUSTUP_HOME: apm.getRustupHomeDirPath()
        });",34,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/config.js,file,37,37,2020-05-18T14:51:34-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,192213,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/config.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\config.js,file,35,28,37,37,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
518,Static Analysis,2020-05-18T14:51:00-04:00,75685,2020-05-18T14:54:28-04:00,medium,false-positive,"Command = require('./command');

  module.exports = Config = (function() {
    class Config extends Command {
      constructor() {
        var atomDirectory;",11,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/config.js,file,14,14,2020-05-18T14:51:34-04:00,Static Analysis,62173c3357301b64bcb7cb49ad65b9eeb8aa24356212b93fe0fe0166d3218ce7,192210,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'module' is not defined.,plain-text,Atom x64/resources/app/apm/lib/config.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\config.js,file,9,3,14,14,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.068299174,0
519,Static Analysis,2020-05-18T14:51:00-04:00,75688,2020-05-18T14:54:28-04:00,medium,false-positive,"_ = require('underscore-plus');

  yargs = require('yargs');

  apm = require('./apm');",5,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/config.js,file,8,8,2020-05-18T14:51:34-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192207,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/config.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\config.js,file,18,11,8,8,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
520,Static Analysis,2020-05-18T14:51:00-04:00,75689,2020-05-18T14:54:28-04:00,medium,false-positive,"apm = require('./apm');

  Command = require('./command');

  module.exports = Config = (function() {
    class Config extends Command {",9,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/config.js,file,12,12,2020-05-18T14:51:34-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192209,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/config.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\config.js,file,20,13,12,12,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
521,Static Analysis,2020-05-18T14:51:00-04:00,75690,2020-05-18T14:54:28-04:00,medium,false-positive,"(function() {
  var Command, Config, _, apm, path, yargs;

  path = require('path');

  _ = require('underscore-plus');",1,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/config.js,file,4,4,2020-05-18T14:51:34-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192205,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/config.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\config.js,file,17,10,4,4,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
522,Static Analysis,2020-05-18T14:51:00-04:00,75713,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Splat/FuncDependencyResolver/ServiceRegistrationCallback,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201251,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Splat/FuncDependencyResolver/ServiceRegistrationCallback,Splat/FuncDependencyResolver/ServiceRegistrationCallback,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
523,Static Analysis,2020-05-18T14:51:00-04:00,75778,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Squirrel/Utility/LoadLocalReleases,logical,,,2020-05-18T14:51:56-04:00,Static Analysis,fca0c81517ee2666e8151cd2019b61840b21071f59a185d523826490d19a838a,200214,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,This disposable local is not guaranteed to be disposed of before the method returns. Use a 'using' statement or surround the local's usage with a try/finally block. Local of type 'FileStream' is not disposed of (at least not locally).,plain-text,Squirrel/Utility/LoadLocalReleases,Squirrel/Utility/LoadLocalReleases,logical,,,,,,EnsureLocalDisposalRule,Gendarme,GEND-EnsureLocalDisposalRule,Ensure Local Disposal ,"This rule checks that disposable locals are always disposed of before
the method returns. Use a 'using' statement (or a try/finally block) to
guarantee local disposal even in the event an unhandled exception
occurs.

**Bad** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    DecodeHeader (stream);
    if (!DecodedHeader.HasContent) {
        return;
    }
    DecodeContent (stream);
    stream.Dispose ();
}
```
**Good** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        DecodeHeader (stream);
        if (!DecodedHeader.HasContent) {
            return;
        }
        DecodeContent (stream);
    }
}
```
**Bad** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    Decode (stream);
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
    stream.Dispose ();
}
```
**Good** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        Decode (stream);
    }
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.98094845,1
524,Static Analysis,2020-05-18T14:51:00-04:00,75836,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Archives/AbstractWritableArchive/RemoveEntry,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201199,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Archives/AbstractWritableArchive/RemoveEntry,SharpCompress/Archives/AbstractWritableArchive/RemoveEntry,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
525,Static Analysis,2020-05-18T14:51:00-04:00,75964,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Squirrel/Shell/ShellLink/set_Arguments,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201266,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Squirrel/Shell/ShellLink/set_Arguments,Squirrel/Shell/ShellLink/set_Arguments,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
526,Static Analysis,2020-05-18T14:51:00-04:00,76023,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Splat/FuncDependencyResolver/GetServices,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201249,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Splat/FuncDependencyResolver/GetServices,Splat/FuncDependencyResolver/GetServices,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
527,Static Analysis,2020-05-18T14:51:00-04:00,76102,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/Native/RSACng/set_SignaturePaddingMode,logical,,,2020-05-18T14:52:00-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,202226,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/Native/RSACng/set_SignaturePaddingMode,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/Native/RSACng/set_SignaturePaddingMode,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
528,Static Analysis,2020-05-18T14:51:00-04:00,76142,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Squirrel/Bsdiff/WrappingStream/Seek,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201282,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Squirrel/Bsdiff/WrappingStream/Seek,Squirrel/Bsdiff/WrappingStream/Seek,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
529,Static Analysis,2020-05-18T14:51:00-04:00,76159,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-189: Numeric Errors,http://cwevis.org/browse/189,189,SharpCompress/Common/Rar/RarRijndael/Initialize,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,03ba04f65bdee74e716d09d64feb1f004a116c5543f675d9955d1297acbf5baf,201072,medium,,,CWE-190: Integer Overflow or Wraparound,http://cwevis.org/browse/190,190,This method casts the result of an integer multiplication into a larger integer. This may result in an overflow before the cast can be done. Cast the operands instead of the result.,plain-text,SharpCompress/Common/Rar/RarRijndael/Initialize,SharpCompress/Common/Rar/RarRijndael/Initialize,logical,,,,,,ReviewCastOnIntegerMultiplicationRule,Gendarme,GEND-ReviewCastOnIntegerMultiplicationRule,Review Cast On Integer Multiplication ,"This rule checks for integral multiply operations where the result is
cast to a larger integral type. It's safer instead to cast an operand to
the larger type to minimize the chance of overflow.

**Bad** example:


```csharp
public long Bad (int a, int b)
{
    // e.g. Bad (Int32.MaxInt, Int32.MaxInt) == 1
    return a * b;
}
```
**Good** example:


```csharp
public long Good (int a, int b)
{
    // e.g. Good (Int32.MaxInt, Int32.MaxInt) == 4611686014132420609
    return (long) a * b;
}
```",markdown,rule-87c4a91bc4c9e20c70f0637bd67a4d03975f25b3ec675b9cc13d0f04540c76a6,Numeric Error,,,,,escalated,0.9599974,1
530,Static Analysis,2020-05-18T14:51:00-04:00,76166,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Splat/FuncDependencyResolver/(self),logical,,,2020-05-18T14:51:56-04:00,Static Analysis,d3ac0ec2b8723049b824675a84e947a8b7da7f8780b06be0eac345a0e3fe6675,199993,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,This type contains disposable field(s) which aren't disposed. Ensure that every disposable field(s) is correctly disposed. Since inner is Disposable Dispose() should call inner.Dispose(),plain-text,Splat/FuncDependencyResolver/(self),Splat/FuncDependencyResolver/(self),logical,,,,,,DisposableFieldsShouldBeDisposedRule,Gendarme,GEND-DisposableFieldsShouldBeDisposedRule,Disposable Fields Should Be Disposed ,"The rule inspects all fields for disposable types and, if
**System.IDisposable** is implemented, checks that the type's
**Dispose** method does indeed call **Dispose** on all disposable
fields.

**Bad** example:


```csharp
class DoesNotDisposeMember : IDisposable {
    byte[] buffer;
    IDisposable field;

    public void Dispose ()
    {
        buffer = null;
        // field is not disposed
    }
}
```
**Good** example:


```csharp
class DisposePattern : IDisposable {
    byte[] buffer;
    IDisposable field;
    bool disposed;

    public void Dispose ()
    {
        Dispose (true);
    }

    private void Dispose (bool disposing)
    {
        if (!disposed) {
            if (disposing) {
                field.Dispose ();
            }
            buffer = null;
            disposed = true;
        }
    }
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.9805077,1
531,Static Analysis,2020-05-18T14:51:00-04:00,76174,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-388: 7PK - Errors,http://cwevis.org/browse/388,388,SharpCompress/Compressors/LZMA/LzmaStream/Dispose,logical,,,2020-05-18T14:51:56-04:00,Static Analysis,f73cef352a0b2bf1d0cc5310f027978a051db5e56968ba97879cbcb8e22239bf,199970,medium,,,CWE-754: Improper Check for Unusual or Exceptional Conditions,http://cwevis.org/browse/754,754,"Every delegate passed to native code must include an exception block which spans the entire method and has a catch all block. Surround the entire method body with a try/catch block. An exception occurred while verifying this method. This failure can probably be ignored, it's most likely due to an uncommon code sequence in the method the rule didn't understand. Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index",plain-text,SharpCompress/Compressors/LZMA/LzmaStream/Dispose,SharpCompress/Compressors/LZMA/LzmaStream/Dispose,logical,,,,,,DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRule,Gendarme,GEND-DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRule,Delegates Passed To Native Code Must Include Exception Handling ,"Every delegate which is passed to native code must include an exception
block which spans the entire method and has a catch all handler.

**Bad** example:


```csharp
public void NativeCallback ()
{
    Console.WriteLine (""{0}"", 1);
}
```
**Good** example:


```csharp
public void NativeCallback ()
{
    try {
        Console.WriteLine (""{0}"", 1);
    }
    catch {
    }
}
```",markdown,rule-e3f0972459f483bc18a68eed953b03a6c7e7fb7e495bc2047dd97eaba40f966b,Error Handling,,,,,escalated,0.88051474,1
532,Static Analysis,2020-05-18T14:51:00-04:00,76209,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Readers/AbstractReader/GetEntryStream,logical,,,2020-05-18T14:51:56-04:00,Static Analysis,75d7fbc5e63cd65cbf82fa8406c2803dedf9e35f1f97ad3aa206eb0234dfc39e,200152,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,This disposable local is not guaranteed to be disposed of before the method returns. Use a 'using' statement or surround the local's usage with a try/finally block. Local of type 'Stream' is not disposed of (at least not locally).,plain-text,SharpCompress/Readers/AbstractReader/GetEntryStream,SharpCompress/Readers/AbstractReader/GetEntryStream,logical,,,,,,EnsureLocalDisposalRule,Gendarme,GEND-EnsureLocalDisposalRule,Ensure Local Disposal ,"This rule checks that disposable locals are always disposed of before
the method returns. Use a 'using' statement (or a try/finally block) to
guarantee local disposal even in the event an unhandled exception
occurs.

**Bad** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    DecodeHeader (stream);
    if (!DecodedHeader.HasContent) {
        return;
    }
    DecodeContent (stream);
    stream.Dispose ();
}
```
**Good** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        DecodeHeader (stream);
        if (!DecodedHeader.HasContent) {
            return;
        }
        DecodeContent (stream);
    }
}
```
**Bad** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    Decode (stream);
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
    stream.Dispose ();
}
```
**Good** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        Decode (stream);
    }
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.9816607,1
533,Static Analysis,2020-05-18T14:51:00-04:00,76348,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,WpfAnimatedGif/ImageAnimationController/Pause,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201112,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,WpfAnimatedGif/ImageAnimationController/Pause,WpfAnimatedGif/ImageAnimationController/Pause,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
534,Static Analysis,2020-05-18T14:51:00-04:00,76428,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-227: 7PK - API Abuse,http://cwevis.org/browse/227,227,Org/BouncyCastle/Crypto/CryptoException/(self),logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-dc56fd6c6aaaf7aef3e91a691e1f8bd8f7311763a2d3286fce16c6c5cf52b5e2,API Abuse,"The software uses an API in a manner contrary to its intended use.

An API is a contract between a caller and a callee. The most common forms of API misuse occurs when the caller does not honor its end of this contract. For example, if a program does not call chdir() after calling chroot(), it violates the contract that specifies how to change the active root directory in a secure fashion. Another good example of library abuse is expecting the callee to return trustworthy DNS information to the caller. In this case, the caller misuses the callee API by making certain assumptions about its behavior (that the return value can be used for authentication purposes). One can also violate the caller-callee contract from the other side. For example, if a coder subclasses SecureRandom and returns a non-random value, the contract is violated.",markdown,,,escalated,0.94525355,1
535,Static Analysis,2020-05-18T14:51:00-04:00,76463,2020-05-18T14:54:28-04:00,medium,false-positive,"var spawn = require('child_process').spawn;

var atomCommandPath = path.resolve(__dirname, '..', '..', process.argv[2]);
var args = process.argv.slice(3);
args.unshift('--executed-from', process.cwd());
var options = { detached: true, stdio: 'ignore' };
spawn(atomCommandPath, args, options);",2,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/cli/atom.js,file,5,5,2020-05-18T14:51:45-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,196542,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/cli/atom.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\cli\atom.js,file,19,12,5,5,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
536,Static Analysis,2020-05-18T14:51:00-04:00,76464,2020-05-18T14:54:28-04:00,medium,false-positive,"var path = require('path');
var spawn = require('child_process').spawn;

var atomCommandPath = path.resolve(__dirname, '..', '..', process.argv[2]);
var args = process.argv.slice(3);
args.unshift('--executed-from', process.cwd());
var options = { detached: true, stdio: 'ignore' };",1,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/cli/atom.js,file,4,4,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.17391245,0
537,Static Analysis,2020-05-18T14:51:00-04:00,76465,2020-05-18T14:54:28-04:00,medium,false-positive,"args.unshift('--executed-from', process.cwd());
var options = { detached: true, stdio: 'ignore' };
spawn(atomCommandPath, args, options);
process.exit(0);",6,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/cli/atom.js,file,9,9,2020-05-18T14:51:45-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,196549,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/cli/atom.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\cli\atom.js,file,8,1,9,9,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
538,Static Analysis,2020-05-18T14:51:00-04:00,76466,2020-05-18T14:54:28-04:00,medium,false-positive,"var atomCommandPath = path.resolve(__dirname, '..', '..', process.argv[2]);
var args = process.argv.slice(3);
args.unshift('--executed-from', process.cwd());
var options = { detached: true, stdio: 'ignore' };
spawn(atomCommandPath, args, options);
process.exit(0);",3,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/cli/atom.js,file,6,6,2020-05-18T14:51:45-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,196545,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/cli/atom.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\cli\atom.js,file,40,33,6,6,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
539,Static Analysis,2020-05-18T14:51:00-04:00,76467,2020-05-18T14:54:28-04:00,medium,false-positive,"var path = require('path');
var spawn = require('child_process').spawn;

var atomCommandPath = path.resolve(__dirname, '..', '..', process.argv[2]);",1,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/cli/atom.js,file,1,1,2020-05-18T14:51:45-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,196535,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/cli/atom.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\cli\atom.js,file,19,12,1,1,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
540,Static Analysis,2020-05-18T14:51:00-04:00,76468,2020-05-18T14:54:28-04:00,high,escalated,"var path = require('path');
var spawn = require('child_process').spawn;

var atomCommandPath = path.resolve(__dirname, '..', '..', process.argv[2]);
var args = process.argv.slice(3);",1,,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/cli/atom.js,file,2,2,2020-05-18T14:51:45-04:00,Static Analysis,63cfeff1e19efa6702923410272f5381339ce1d5ae0e4401b9a7b3accccb14ee,196537,high,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,"Found require(""child_process"")",plain-text,Atom x64/resources/cli/atom.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\cli\atom.js,file,37,13,2,2,security,detect-child-process,ESLint,ESLINT-SECURITY-detect-child-process,Detect child process,"Detects instances of [`child_process`](https://nodejs.org/api/child_process.html) & non-literal [`exec()`](https://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback)

More information: [Avoiding Command Injection in Node.js](https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/avoid-command-injection-node.md)",markdown,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.93688923,1
541,Static Analysis,2020-05-18T14:51:00-04:00,76469,2020-05-18T14:54:28-04:00,medium,false-positive,"var path = require('path');
var spawn = require('child_process').spawn;

var atomCommandPath = path.resolve(__dirname, '..', '..', process.argv[2]);
var args = process.argv.slice(3);",1,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/cli/atom.js,file,2,2,2020-05-18T14:51:45-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,196538,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/cli/atom.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\cli\atom.js,file,20,13,2,2,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
542,Static Analysis,2020-05-18T14:51:00-04:00,76470,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Common/SevenZip/ArchiveReader/Extract,logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.98149246,1
543,Static Analysis,2020-05-18T14:51:00-04:00,76511,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/Web/XmlTransform/WhitespaceTrackingTextReader/Read,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201206,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Microsoft/Web/XmlTransform/WhitespaceTrackingTextReader/Read,Microsoft/Web/XmlTransform/WhitespaceTrackingTextReader/Read,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
544,Static Analysis,2020-05-18T14:51:00-04:00,76556,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Compressors/BZip2/BZip2Stream/set_Position,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201170,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Compressors/BZip2/BZip2Stream/set_Position,SharpCompress/Compressors/BZip2/BZip2Stream/set_Position,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
545,Static Analysis,2020-05-18T14:51:00-04:00,76600,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/Web/XmlTransform/XmlAttributePreservingWriter/WriteComment,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201217,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Microsoft/Web/XmlTransform/XmlAttributePreservingWriter/WriteComment,Microsoft/Web/XmlTransform/XmlAttributePreservingWriter/WriteComment,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
546,Static Analysis,2020-05-18T14:51:00-04:00,76652,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-227: 7PK - API Abuse,http://cwevis.org/browse/227,227,SharpCompress/Common/MultiVolumeExtractionException/(self),logical,,,2020-05-18T14:51:57-04:00,Static Analysis,47a6df44d16eb182f816f23918542a817d2995bc2ddf0168976c20b9c8c63cb2,200686,medium,,,CWE-573: Improper Following of Specification by Caller,http://cwevis.org/browse/573,573,"The required constructor for ISerializable is not present in this type. Add a (private for sealed, protected otherwise) serialization constructor for this type. The required constructor for ISerializable is not present in this type.",plain-text,SharpCompress/Common/MultiVolumeExtractionException/(self),SharpCompress/Common/MultiVolumeExtractionException/(self),logical,,,,,,MissingSerializationConstructorRule,Gendarme,GEND-MissingSerializationConstructorRule,Missing Serialization Constructor ,"This rule checks for types that implement **System.ISerializable** but
don't provide a serialization constructor. The constructor is required
in order to make the type serializeable but cannot be enforced by the
interface. The serialization constructor should be **private** for
**sealed** types and **protected** for unsealed types.

**Bad** example:


```csharp
[Serializable]
public class Bad : ISerializable {
    public void GetObjectData (SerializationInfo info, StreamingContext context)
    {
    }
}
```
**Good** example (sealed):


```csharp
[Serializable]
public sealed class Good : ISerializable {
    private ClassWithConstructor (SerializationInfo info, StreamingContext context)
    {
    }

    public void GetObjectData (SerializationInfo info, StreamingContext context)
    {
    }
}
```
**Good** example:


```csharp
[Serializable]
public class Good : ISerializable {
    protected ClassWithConstructor (SerializationInfo info, StreamingContext context)
    {
    }

    public void GetObjectData (SerializationInfo info, StreamingContext context)
    {
    }
}
```",markdown,rule-dc56fd6c6aaaf7aef3e91a691e1f8bd8f7311763a2d3286fce16c6c5cf52b5e2,API Abuse,"The software uses an API in a manner contrary to its intended use.

An API is a contract between a caller and a callee. The most common forms of API misuse occurs when the caller does not honor its end of this contract. For example, if a program does not call chdir() after calling chroot(), it violates the contract that specifies how to change the active root directory in a secure fashion. Another good example of library abuse is expecting the callee to return trustworthy DNS information to the caller. In this case, the caller misuses the callee API by making certain assumptions about its behavior (that the return value can be used for authentication purposes). One can also violate the caller-callee contract from the other side. For example, if a coder subclasses SecureRandom and returns a non-random value, the contract is violated.",markdown,,,escalated,0.94911677,1
547,Static Analysis,2020-05-18T14:51:00-04:00,76728,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Mono/Security/Cryptography/CryptoConvert/FromCapiPublicKeyBlob,logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.98149246,1
548,Static Analysis,2020-05-18T14:51:00-04:00,76811,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-252: Unchecked Return Value,http://cwevis.org/browse/252,252,Microsoft/Alm/Authentication/Global/BuildDefaultUserAgent,logical,,,2020-05-18T14:52:00-04:00,Static Analysis,bac52ad20d9b36c4fe8428c2c68e9f05f0dbd9badf7e4d15c140e9d9c5b59156,202410,medium,,,CWE-252: Unchecked Return Value,http://cwevis.org/browse/252,252,This method calls Assembly.GetEntryAssembly which may return null if not called from the root application domain. Avoid depending on Assembly.GetEntryAssembly inside reusable code.,plain-text,Microsoft/Alm/Authentication/Global/BuildDefaultUserAgent,Microsoft/Alm/Authentication/Global/BuildDefaultUserAgent,logical,,,,,,GetEntryAssemblyMayReturnNullRule,Gendarme,GEND-GetEntryAssemblyMayReturnNullRule,Get Entry Assembly May Return Null ,"This rule warns when an assembly without an entry point (i.e. a dll or
library) calls **Assembly.GetEntryAssembly ()**. This call is
problematic since it will always return **null** when called from
outside the root (main) application domain. This may become a problem
inside libraries that can be used, for example, inside ASP.NET
applications.

**Bad** example:


```csharp
// this will throw a NullReferenceException from an ASP.NET page
Response.WriteLine (Assembly.GetEntryAssembly ().CodeBase);
```
**Good** example:


```csharp
public class MainClass {
    static void Main ()
    {
        Console.WriteLine (Assembly.GetEntryAssembly ().CodeBase);
    }
}
```",markdown,rule-9d96e172832dcb7198b029ec07a771b40eecf1c51bc7afeabe8926e6928c626d,Return Value,"The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.

Two common programmer assumptions are ""this function call can never fail"" and ""it doesn't matter if this function call fails"". If an attacker can force the function to fail or otherwise return a value that is not expected, then the subsequent program logic could lead to a vulnerability, because the software is not in a state that the programmer assumes. For example, if the program calls a function to drop privileges but does not check the return code to ensure that privileges were successfully dropped, then the program will continue to operate with the higher privileges.",markdown,,,escalated,0.9617084,1
549,Static Analysis,2020-05-18T14:51:00-04:00,76827,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Archives/Tar/TarArchive/IsTarFile,logical,,,2020-05-18T14:51:56-04:00,Static Analysis,f04c9d74a6fd90e4bf9aed1a759b57b45fb81263d6af878756a02e65f99a62e0,200178,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,This disposable local is not guaranteed to be disposed of before the method returns. Use a 'using' statement or surround the local's usage with a try/finally block. Local of type 'BinaryReader' is not disposed of (at least not locally).,plain-text,SharpCompress/Archives/Tar/TarArchive/IsTarFile,SharpCompress/Archives/Tar/TarArchive/IsTarFile,logical,,,,,,EnsureLocalDisposalRule,Gendarme,GEND-EnsureLocalDisposalRule,Ensure Local Disposal ,"This rule checks that disposable locals are always disposed of before
the method returns. Use a 'using' statement (or a try/finally block) to
guarantee local disposal even in the event an unhandled exception
occurs.

**Bad** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    DecodeHeader (stream);
    if (!DecodedHeader.HasContent) {
        return;
    }
    DecodeContent (stream);
    stream.Dispose ();
}
```
**Good** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        DecodeHeader (stream);
        if (!DecodedHeader.HasContent) {
            return;
        }
        DecodeContent (stream);
    }
}
```
**Bad** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    Decode (stream);
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
    stream.Dispose ();
}
```
**Good** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        Decode (stream);
    }
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.98204976,1
550,Static Analysis,2020-05-18T14:51:00-04:00,76831,2020-05-18T14:54:28-04:00,medium,false-positive,"config = require('./apm');

  Install = require('./install');

  Login = require('./login');",9,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/stars.js,file,12,12,2020-05-18T14:51:41-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,194731,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/stars.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\stars.js,file,20,13,12,12,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
551,Static Analysis,2020-05-18T14:51:00-04:00,76832,2020-05-18T14:54:28-04:00,medium,false-positive,"Login = require('./login');

  request = require('./request');

  tree = require('./tree');",13,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/stars.js,file,16,16,2020-05-18T14:51:41-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,194738,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/stars.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\stars.js,file,20,13,16,16,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
552,Static Analysis,2020-05-18T14:51:00-04:00,76835,2020-05-18T14:54:28-04:00,medium,false-positive,"_ = require('underscore-plus');

  yargs = require('yargs');

  Command = require('./command');",3,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/stars.js,file,6,6,2020-05-18T14:51:41-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,194719,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/stars.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\stars.js,file,18,11,6,6,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
553,Static Analysis,2020-05-18T14:51:00-04:00,76836,2020-05-18T14:54:28-04:00,medium,false-positive,"(function() {
  var Command, Install, Login, Stars, _, config, request, tree, yargs;

  _ = require('underscore-plus');

  yargs = require('yargs');",1,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/stars.js,file,4,4,2020-05-18T14:51:41-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,194714,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/stars.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\stars.js,file,14,7,4,4,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
554,Static Analysis,2020-05-18T14:51:00-04:00,76837,2020-05-18T14:54:28-04:00,medium,false-positive,"Install = require('./install');

  Login = require('./login');

  request = require('./request');",11,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/stars.js,file,14,14,2020-05-18T14:51:41-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,194733,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/stars.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\stars.js,file,18,11,14,14,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
555,Static Analysis,2020-05-18T14:51:00-04:00,76839,2020-05-18T14:54:28-04:00,medium,false-positive,"Command = require('./command');

  config = require('./apm');

  Install = require('./install');",7,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/stars.js,file,10,10,2020-05-18T14:51:41-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,194727,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/stars.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\stars.js,file,19,12,10,10,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
556,Static Analysis,2020-05-18T14:51:00-04:00,76841,2020-05-18T14:54:28-04:00,medium,false-positive,"tree = require('./tree');

  module.exports = Stars = (function() {
    class Stars extends Command {
      parseOptions(argv) {
        var options;",17,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/stars.js,file,20,20,2020-05-18T14:51:41-04:00,Static Analysis,62173c3357301b64bcb7cb49ad65b9eeb8aa24356212b93fe0fe0166d3218ce7,194746,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'module' is not defined.,plain-text,Atom x64/resources/app/apm/lib/stars.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\stars.js,file,9,3,20,20,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.068299174,0
557,Static Analysis,2020-05-18T14:51:00-04:00,76842,2020-05-18T14:54:28-04:00,medium,false-positive,"request = require('./request');

  tree = require('./tree');

  module.exports = Stars = (function() {
    class Stars extends Command {",15,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/stars.js,file,18,18,2020-05-18T14:51:41-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,194742,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/stars.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\stars.js,file,17,10,18,18,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
558,Static Analysis,2020-05-18T14:51:00-04:00,76843,2020-05-18T14:54:28-04:00,medium,false-positive,"yargs = require('yargs');

  Command = require('./command');

  config = require('./apm');",5,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/stars.js,file,8,8,2020-05-18T14:51:41-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,194723,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/stars.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\stars.js,file,20,13,8,8,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
559,Static Analysis,2020-05-18T14:51:00-04:00,76849,2020-05-18T14:54:28-04:00,medium,false-positive,"console.log(`${label.cyan} (${packages.length})`);
        tree(packages, function({name, version, description, downloads, stargazers_count}) {
          label = name.yellow;
          if (process.platform === 'darwin') {
            label = `\u2B50  ${label}`;
          }
          if (description) {",106,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/stars.js,file,109,109,2020-05-18T14:51:41-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,194830,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/stars.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\stars.js,file,22,15,109,109,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
560,Static Analysis,2020-05-18T14:51:00-04:00,76915,2020-05-18T14:54:28-04:00,high,escalated,,,,,,CWE-695: Use of Low-Level Functionality,http://cwevis.org/browse/695,695,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/Platform/NativeWrapper/MSG/(self),logical,,,2020-05-18T14:51:59-04:00,Static Analysis,3ac9036736202c636e5a647bb8073bf5337a353e654d9216f8af1cf9293e2f3b,202163,high,,,CWE-695: Use of Low-Level Functionality,http://cwevis.org/browse/695,695,The type uses System.IntPtr or System.UIntPtr instead of System.Runtime.InteropServices.SafeHandle. Consider changing the code to use SafeHandle.,plain-text,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/Platform/NativeWrapper/MSG/(self),Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/Platform/NativeWrapper/MSG/(self),logical,,,,,,PreferSafeHandleRule,Gendarme,GEND-PreferSafeHandleRule,Prefer Safe Handle ,"In general it is best to interop with native code using
**System.Runtime.InteropServices.SafeHandle** instead of
**System.IntPtr** or **System.UIntPtr** because:

SafeHandles are type safe.
SafeHandles are guaranteed to be disposed of during exceptional
conditions like a thread aborting unexpectedly or a stack overflow.
SafeHandles are not vulnerable to reycle attacks.
You don't need to write a finalizer which can be tricky to do because
they execute within their own thread, may execute on partially
constructed objects, and normally tear down the application if you allow
an exception to escape from them.


 **Bad** example:


```csharp
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable.
public sealed class Database {
    ~Database ()
    {
        // This will execute even if the ctor throws so it is important to check
        // to see if the fields are initialized.
        if (m_database != IntPtr.Zero) {
            NativeMethods.sqlite3_close (m_database);
        }
    }

    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        int err = NativeMethods.sqlite3_open_v2 (path, out m_database, flags, IntPtr.Zero);
        // handle errors
    }

    // exec and query methods would go here

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (IntPtr db);

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private IntPtr m_database;
}
```
**Good** example:


```csharp
using System.Runtime.ConstrainedExecution;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable, but you do not need to implement a finalizer because
// SafeHandle will take care of the cleanup.
internal sealed class Database {
    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        m_database = new SqlitePtr (path, flags);
    }

    // exec and query methods would go here

    // This corresponds to a native sqlite3*.
    [SecurityPermission (SecurityAction.InheritanceDemand, UnmanagedCode = true)]
    [SecurityPermission (SecurityAction.Demand, UnmanagedCode = true)]
    private sealed class SqlitePtr : SafeHandle {
        public SqlitePtr (string path, NativeMethods.OpenFlags flags) : base (IntPtr.Zero, true)
        {
            int err = NativeMethods.sqlite3_open_v2 (path, out handle, flags, IntPtr.Zero);
            // handle errors
        }

        public override bool IsInvalid {
            get {
                return (handle == IntPtr.Zero);
            }
        }

        // This will not be called if the handle is invalid. Note that this method should not throw.
        [ReliabilityContract (Consistency.WillNotCorruptState, Cer.MayFail)]
        protected override bool ReleaseHandle ()
        {
            NativeMethods.sqlite3_close (this);
            return true;
        }
    }

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (SqlitePtr db);

        // Open must take an IntPtr but all other methods take a type safe SqlitePtr.
        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private SqlitePtr m_database;
}
```",markdown,GEND-PreferSafeHandleRule,Prefer Safe Handle ,"In general it is best to interop with native code using
**System.Runtime.InteropServices.SafeHandle** instead of
**System.IntPtr** or **System.UIntPtr** because:

SafeHandles are type safe.
SafeHandles are guaranteed to be disposed of during exceptional
conditions like a thread aborting unexpectedly or a stack overflow.
SafeHandles are not vulnerable to reycle attacks.
You don't need to write a finalizer which can be tricky to do because
they execute within their own thread, may execute on partially
constructed objects, and normally tear down the application if you allow
an exception to escape from them.


 **Bad** example:


```csharp
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable.
public sealed class Database {
    ~Database ()
    {
        // This will execute even if the ctor throws so it is important to check
        // to see if the fields are initialized.
        if (m_database != IntPtr.Zero) {
            NativeMethods.sqlite3_close (m_database);
        }
    }

    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        int err = NativeMethods.sqlite3_open_v2 (path, out m_database, flags, IntPtr.Zero);
        // handle errors
    }

    // exec and query methods would go here

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (IntPtr db);

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private IntPtr m_database;
}
```
**Good** example:


```csharp
using System.Runtime.ConstrainedExecution;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable, but you do not need to implement a finalizer because
// SafeHandle will take care of the cleanup.
internal sealed class Database {
    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        m_database = new SqlitePtr (path, flags);
    }

    // exec and query methods would go here

    // This corresponds to a native sqlite3*.
    [SecurityPermission (SecurityAction.InheritanceDemand, UnmanagedCode = true)]
    [SecurityPermission (SecurityAction.Demand, UnmanagedCode = true)]
    private sealed class SqlitePtr : SafeHandle {
        public SqlitePtr (string path, NativeMethods.OpenFlags flags) : base (IntPtr.Zero, true)
        {
            int err = NativeMethods.sqlite3_open_v2 (path, out handle, flags, IntPtr.Zero);
            // handle errors
        }

        public override bool IsInvalid {
            get {
                return (handle == IntPtr.Zero);
            }
        }

        // This will not be called if the handle is invalid. Note that this method should not throw.
        [ReliabilityContract (Consistency.WillNotCorruptState, Cer.MayFail)]
        protected override bool ReleaseHandle ()
        {
            NativeMethods.sqlite3_close (this);
            return true;
        }
    }

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (SqlitePtr db);

        // Open must take an IntPtr but all other methods take a type safe SqlitePtr.
        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private SqlitePtr m_database;
}
```",markdown,,,escalated,0.8318374,1
561,Static Analysis,2020-05-18T14:51:00-04:00,76960,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Squirrel/Update/Program/ProcessStart,logical,,,2020-05-18T14:51:56-04:00,Static Analysis,990659a019388e4890643c93cad3046863745119ab7b4b291e2e747b1b3d211d,200144,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,This disposable local is not guaranteed to be disposed of before the method returns. Use a 'using' statement or surround the local's usage with a try/finally block. Local of type 'Process' is not disposed of (is this a fluent-like API ?).,plain-text,Squirrel/Update/Program/ProcessStart,Squirrel/Update/Program/ProcessStart,logical,,,,,,EnsureLocalDisposalRule,Gendarme,GEND-EnsureLocalDisposalRule,Ensure Local Disposal ,"This rule checks that disposable locals are always disposed of before
the method returns. Use a 'using' statement (or a try/finally block) to
guarantee local disposal even in the event an unhandled exception
occurs.

**Bad** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    DecodeHeader (stream);
    if (!DecodedHeader.HasContent) {
        return;
    }
    DecodeContent (stream);
    stream.Dispose ();
}
```
**Good** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        DecodeHeader (stream);
        if (!DecodedHeader.HasContent) {
            return;
        }
        DecodeContent (stream);
    }
}
```
**Bad** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    Decode (stream);
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
    stream.Dispose ();
}
```
**Good** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        Decode (stream);
    }
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.9805271,1
562,Static Analysis,2020-05-18T14:51:00-04:00,77034,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-557: Concurrency Issues,http://cwevis.org/browse/557,557,Squirrel/Update/Program/Main,logical,,,2020-05-18T14:51:59-04:00,Static Analysis,42321c3a185e11e0cab3329e9063e71c143b5a47aa37b3665aa65bcb3ed01ed0,201725,medium,,,CWE-567: Unsynchronized Access to Shared Data in a Multithreaded Context,http://cwevis.org/browse/567,567,"This instance method writes to static fields. This may cause problem with multiple instances in multithreaded applications. Move initialization to the static constructor or ensure appropriate locking. The static field 'opt', of type 'Squirrel.Update.StartupOption'. is being set in an instance method.",plain-text,Squirrel/Update/Program/Main,Squirrel/Update/Program/main,logical,,,,,,WriteStaticFieldFromInstanceMethodRule,Gendarme,GEND-WriteStaticFieldFromInstanceMethodRule,Write Static Field From Instance Method ,"This rule is used to check for instance methods which write values to
static fields. This may cause problems if multiple instances of the type
exist and are used in multithreaded applications.

**Bad** example:


```csharp
static int default_value;

public int Value {
    get {
        if (default_value == 0) {
            default_value = -1;
        }
        return (value > default_value) ? value : 0;
    }
}
```
**Good** example:


```csharp
static int default_value = -1;

public int Value {
    get {
        return (value > default_value) ? value : 0;
    }
}
```",markdown,rule-d1b92de2d2079261b3abb4d275473f8ffefb9c723f42c8c56f72d385fb3abc7c,Concurrency,,,,,escalated,0.73516303,1
563,Static Analysis,2020-05-18T14:51:00-04:00,77114,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Crypto/Crc32Stream/Write,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201135,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Crypto/Crc32Stream/Write,SharpCompress/Crypto/Crc32Stream/Write,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
564,Static Analysis,2020-05-18T14:51:00-04:00,77129,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/Web/XmlTransform/XmlAttributePreservationProvider/(self),logical,,,2020-05-18T14:51:56-04:00,Static Analysis,46fc0a7e0f560adadaa75dc6b74f954ebf662d5535b8ebf1422d4db220a25cf1,199990,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,This type contains disposable field(s) which aren't disposed. Ensure that every disposable field(s) is correctly disposed. Since streamReader is Disposable Dispose() should call streamReader.Dispose(),plain-text,Microsoft/Web/XmlTransform/XmlAttributePreservationProvider/(self),Microsoft/Web/XmlTransform/XmlAttributePreservationProvider/(self),logical,,,,,,DisposableFieldsShouldBeDisposedRule,Gendarme,GEND-DisposableFieldsShouldBeDisposedRule,Disposable Fields Should Be Disposed ,"The rule inspects all fields for disposable types and, if
**System.IDisposable** is implemented, checks that the type's
**Dispose** method does indeed call **Dispose** on all disposable
fields.

**Bad** example:


```csharp
class DoesNotDisposeMember : IDisposable {
    byte[] buffer;
    IDisposable field;

    public void Dispose ()
    {
        buffer = null;
        // field is not disposed
    }
}
```
**Good** example:


```csharp
class DisposePattern : IDisposable {
    byte[] buffer;
    IDisposable field;
    bool disposed;

    public void Dispose ()
    {
        Dispose (true);
    }

    private void Dispose (bool disposing)
    {
        if (!disposed) {
            if (disposing) {
                field.Dispose ();
            }
            buffer = null;
            disposed = true;
        }
    }
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.980538,1
565,Static Analysis,2020-05-18T14:51:00-04:00,77132,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Common/Rar/RarCryptoBinaryReader/SkipQueue,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201194,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Common/Rar/RarCryptoBinaryReader/SkipQueue,SharpCompress/Common/Rar/RarCryptoBinaryReader/SkipQueue,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
566,Static Analysis,2020-05-18T14:51:00-04:00,77195,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Archives/GZip/GZipArchive/LoadVolumes,logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.98149246,1
567,Static Analysis,2020-05-18T14:51:00-04:00,77222,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-227: 7PK - API Abuse,http://cwevis.org/browse/227,227,Microsoft/IdentityModel/Clients/ActiveDirectory/AdalServiceException/(self),logical,,,2020-05-18T14:51:59-04:00,Static Analysis,47a6df44d16eb182f816f23918542a817d2995bc2ddf0168976c20b9c8c63cb2,202085,medium,,,CWE-573: Improper Following of Specification by Caller,http://cwevis.org/browse/573,573,"The required constructor for ISerializable is not present in this type. Add a (private for sealed, protected otherwise) serialization constructor for this type. The required constructor for ISerializable is not present in this type.",plain-text,Microsoft/IdentityModel/Clients/ActiveDirectory/AdalServiceException/(self),Microsoft/IdentityModel/Clients/ActiveDirectory/AdalServiceException/(self),logical,,,,,,MissingSerializationConstructorRule,Gendarme,GEND-MissingSerializationConstructorRule,Missing Serialization Constructor ,"This rule checks for types that implement **System.ISerializable** but
don't provide a serialization constructor. The constructor is required
in order to make the type serializeable but cannot be enforced by the
interface. The serialization constructor should be **private** for
**sealed** types and **protected** for unsealed types.

**Bad** example:


```csharp
[Serializable]
public class Bad : ISerializable {
    public void GetObjectData (SerializationInfo info, StreamingContext context)
    {
    }
}
```
**Good** example (sealed):


```csharp
[Serializable]
public sealed class Good : ISerializable {
    private ClassWithConstructor (SerializationInfo info, StreamingContext context)
    {
    }

    public void GetObjectData (SerializationInfo info, StreamingContext context)
    {
    }
}
```
**Good** example:


```csharp
[Serializable]
public class Good : ISerializable {
    protected ClassWithConstructor (SerializationInfo info, StreamingContext context)
    {
    }

    public void GetObjectData (SerializationInfo info, StreamingContext context)
    {
    }
}
```",markdown,rule-dc56fd6c6aaaf7aef3e91a691e1f8bd8f7311763a2d3286fce16c6c5cf52b5e2,API Abuse,"The software uses an API in a manner contrary to its intended use.

An API is a contract between a caller and a callee. The most common forms of API misuse occurs when the caller does not honor its end of this contract. For example, if a program does not call chdir() after calling chroot(), it violates the contract that specifies how to change the active root directory in a secure fashion. Another good example of library abuse is expecting the callee to return trustworthy DNS information to the caller. In this case, the caller misuses the callee API by making certain assumptions about its behavior (that the return value can be used for authentication purposes). One can also violate the caller-callee contract from the other side. For example, if a coder subclasses SecureRandom and returns a non-random value, the contract is violated.",markdown,,,escalated,0.94911677,1
568,Static Analysis,2020-05-18T14:51:00-04:00,77230,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Compressors/BZip2/CBZip2OutputStream/Flush,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201178,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Compressors/BZip2/CBZip2OutputStream/Flush,SharpCompress/Compressors/BZip2/CBZip2OutputStream/Flush,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
569,Static Analysis,2020-05-18T14:51:00-04:00,77262,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Squirrel/UpdateManager/GetShortcutsForExecutable,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201256,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Squirrel/UpdateManager/GetShortcutsForExecutable,Squirrel/UpdateManager/GetShortcutsForExecutable,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
570,Static Analysis,2020-05-18T14:51:00-04:00,77269,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-252: Unchecked Return Value,http://cwevis.org/browse/252,252,Microsoft/IdentityModel/Clients/ActiveDirectory/TokenCache/GetHost,logical,,,2020-05-18T14:51:59-04:00,Static Analysis,8bb7869b4c0b72ad8c73e467acd1cce99711c409b0d33c14d7156607284635f9,202003,medium,,,CWE-252: Unchecked Return Value,http://cwevis.org/browse/252,252,The method ignores the result value from a method call. Don't ignore the result value. Unused object of type 'System.Void System.Uri::.ctor(System.String)' created.,plain-text,Microsoft/IdentityModel/Clients/ActiveDirectory/TokenCache/GetHost,Microsoft/IdentityModel/Clients/ActiveDirectory/TokenCache/GetHost,logical,,,,,,DoNotIgnoreMethodResultRule,Gendarme,GEND-DoNotIgnoreMethodResultRule,Do Not Ignore Method Result ,"This rule fires if a method is called that returns a new instance but
that instance is not used. This is a performance problem because it is
wasteful to create and collect objects which are never actually used. It
may also indicate a logic problem. Note that this rule currently only
checks methods within a small number of System types.

**Bad** example:


```csharp
public void GetName ()
{
    string name = Console.ReadLine ();
    // This is a bug: strings are (mostly) immutable so Trim leaves
    // name untouched and returns a new string.
    name.Trim ();
    Console.WriteLine (""Name: {0}"", name);
}
```
**Good** example:


```csharp
public void GetName ()
{
    string name = Console.ReadLine ();
    name = name.Trim ();
    Console.WriteLine (""Name: {0}"", name);
}
```",markdown,rule-9d96e172832dcb7198b029ec07a771b40eecf1c51bc7afeabe8926e6928c626d,Return Value,"The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.

Two common programmer assumptions are ""this function call can never fail"" and ""it doesn't matter if this function call fails"". If an attacker can force the function to fail or otherwise return a value that is not expected, then the subsequent program logic could lead to a vulnerability, because the software is not in a state that the programmer assumes. For example, if the program calls a function to drop privileges but does not check the return code to ensure that privileges were successfully dropped, then the program will continue to operate with the higher privileges.",markdown,,,escalated,0.9642873,1
571,Static Analysis,2020-05-18T14:51:00-04:00,77332,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Compressors/Deflate/ZlibBaseStream/Flush,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201165,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Compressors/Deflate/ZlibBaseStream/Flush,SharpCompress/Compressors/Deflate/ZlibBaseStream/Flush,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
572,Static Analysis,2020-05-18T14:51:00-04:00,77338,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Compressors/LZMA/LZipStream/Flush,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201151,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Compressors/LZMA/LZipStream/Flush,SharpCompress/Compressors/LZMA/LZipStream/Flush,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
573,Static Analysis,2020-05-18T14:51:00-04:00,77567,2020-05-18T14:54:28-04:00,medium,false-positive,"module.exports = {""hello"": ""world""};",1,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/native-module/index.js,file,1,1,2020-05-18T14:51:45-04:00,Static Analysis,62173c3357301b64bcb7cb49ad65b9eeb8aa24356212b93fe0fe0166d3218ce7,196272,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'module' is not defined.,plain-text,Atom x64/resources/app/apm/native-module/index.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\native-module\index.js,file,7,1,1,1,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.068299174,0
574,Static Analysis,2020-05-18T14:51:00-04:00,77569,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Mono/Cecil/PE/ImageWriter/WriteImage,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201286,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Mono/Cecil/PE/ImageWriter/WriteImage,Mono/Cecil/PE/ImageWriter/WriteImage,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
575,Static Analysis,2020-05-18T14:51:00-04:00,77676,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/Web/XmlTransform/XmlTransformation/Apply,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201242,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Microsoft/Web/XmlTransform/XmlTransformation/Apply,Microsoft/Web/XmlTransform/XmlTransformation/Apply,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
576,Static Analysis,2020-05-18T14:51:00-04:00,77751,2020-05-18T14:54:28-04:00,medium,false-positive,"fs = require('./fs');

  tree = require('./tree');

  module.exports = Links = (function() {
    class Links extends Command {",11,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/links.js,file,14,14,2020-05-18T14:51:36-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,193286,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/links.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\links.js,file,17,10,14,14,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
577,Static Analysis,2020-05-18T14:51:00-04:00,77753,2020-05-18T14:54:28-04:00,medium,false-positive,"Command = require('./command');

  config = require('./apm');

  fs = require('./fs');",7,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/links.js,file,10,10,2020-05-18T14:51:36-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,193281,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/links.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\links.js,file,19,12,10,10,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
578,Static Analysis,2020-05-18T14:51:00-04:00,77755,2020-05-18T14:54:28-04:00,high,escalated,"}, function(link) {
          var error, realpath;
          try {
            realpath = fs.realpathSync(link);
          } catch (error1) {
            error = error1;
            realpath = '???'.red;",59,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/lib/links.js,file,62,62,2020-05-18T14:51:36-04:00,Static Analysis,ae3b57bfa31363354c91597da5268125cecef9545e8e0de0e7d329feef7e5a0c,193316,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Found fs.realpathSync with non literal argument at index 0,plain-text,Atom x64/resources/app/apm/lib/links.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\links.js,file,39,24,62,62,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.97681946,1
579,Static Analysis,2020-05-18T14:51:00-04:00,77756,2020-05-18T14:54:28-04:00,medium,false-positive,"yargs = require('yargs');

  Command = require('./command');

  config = require('./apm');",5,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/links.js,file,8,8,2020-05-18T14:51:36-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,193278,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/links.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\links.js,file,20,13,8,8,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
580,Static Analysis,2020-05-18T14:51:00-04:00,77757,2020-05-18T14:54:28-04:00,medium,false-positive,"config = require('./apm');

  fs = require('./fs');

  tree = require('./tree');",9,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/links.js,file,12,12,2020-05-18T14:51:36-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,193284,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/links.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\links.js,file,15,8,12,12,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
581,Static Analysis,2020-05-18T14:51:00-04:00,77765,2020-05-18T14:54:28-04:00,high,false-positive,"symlinks = [];
        ref = fs.list(directoryPath);
        for (i = 0, len = ref.length; i < len; i++) {
          directory = ref[i];
          symlinkPath = path.join(directoryPath, directory);
          if (fs.isSymbolicLinkSync(symlinkPath)) {
            symlinks.push(symlinkPath);",41,,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/lib/links.js,file,44,44,2020-05-18T14:51:36-04:00,Static Analysis,6569b353992e88510a975ec3412e07f9c2539e0cf8eb813d02c1c97e2a312d82,193299,high,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Generic Object Injection Sink,plain-text,Atom x64/resources/app/apm/lib/links.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\links.js,file,29,23,44,44,security,detect-object-injection,ESLint,ESLINT-SECURITY-detect-object-injection,Detect object injection,"Detects `variable[key]` as a left- or right-hand assignment operand.

More information: [The Dangers of Square Bracket Notation](https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/the-dangers-of-square-bracket-notation.md)",markdown,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.9251437,1
582,Static Analysis,2020-05-18T14:51:00-04:00,77766,2020-05-18T14:54:28-04:00,medium,false-positive,"(function() {
  var Command, Links, config, fs, path, tree, yargs;

  path = require('path');

  yargs = require('yargs');",1,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/links.js,file,4,4,2020-05-18T14:51:36-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,193274,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/links.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\links.js,file,17,10,4,4,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
583,Static Analysis,2020-05-18T14:51:00-04:00,77767,2020-05-18T14:54:28-04:00,medium,false-positive,"tree = require('./tree');

  module.exports = Links = (function() {
    class Links extends Command {
      constructor() {
        super();",13,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/links.js,file,16,16,2020-05-18T14:51:36-04:00,Static Analysis,62173c3357301b64bcb7cb49ad65b9eeb8aa24356212b93fe0fe0166d3218ce7,193288,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'module' is not defined.,plain-text,Atom x64/resources/app/apm/lib/links.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\links.js,file,9,3,16,16,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.068299174,0
584,Static Analysis,2020-05-18T14:51:00-04:00,77768,2020-05-18T14:54:28-04:00,medium,false-positive,"path = require('path');

  yargs = require('yargs');

  Command = require('./command');",3,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/links.js,file,6,6,2020-05-18T14:51:36-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,193276,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/links.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\links.js,file,18,11,6,6,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
585,Static Analysis,2020-05-18T14:51:00-04:00,77827,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Mono/Cecil/CryptoService/HashStream,logical,,,2020-05-18T14:51:56-04:00,Static Analysis,e3196df7426ae462a04d023c5a50435cf7ec5634b1f1d66c263ec532841e97ed,200236,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,This disposable local is not guaranteed to be disposed of before the method returns. Use a 'using' statement or surround the local's usage with a try/finally block. Local of type 'SHA1Managed' is not disposed of (at least not locally).,plain-text,Mono/Cecil/CryptoService/HashStream,Mono/Cecil/CryptoService/HashStream,logical,,,,,,EnsureLocalDisposalRule,Gendarme,GEND-EnsureLocalDisposalRule,Ensure Local Disposal ,"This rule checks that disposable locals are always disposed of before
the method returns. Use a 'using' statement (or a try/finally block) to
guarantee local disposal even in the event an unhandled exception
occurs.

**Bad** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    DecodeHeader (stream);
    if (!DecodedHeader.HasContent) {
        return;
    }
    DecodeContent (stream);
    stream.Dispose ();
}
```
**Good** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        DecodeHeader (stream);
        if (!DecodedHeader.HasContent) {
            return;
        }
        DecodeContent (stream);
    }
}
```
**Bad** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    Decode (stream);
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
    stream.Dispose ();
}
```
**Good** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        Decode (stream);
    }
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.9815898,1
586,Static Analysis,2020-05-18T14:51:00-04:00,77837,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Compressors/LZMA/Utilites/CrcBuilderStream/Write,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201157,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Compressors/LZMA/Utilites/CrcBuilderStream/Write,SharpCompress/Compressors/LZMA/Utilites/CrcBuilderStream/Write,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
587,Static Analysis,2020-05-18T14:51:00-04:00,77841,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Compressors/Filters/BCJ2Filter/Read,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201161,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Compressors/Filters/BCJ2Filter/Read,SharpCompress/Compressors/Filters/BCJ2Filter/Read,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
588,Static Analysis,2020-05-18T14:51:00-04:00,77845,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-227: 7PK - API Abuse,http://cwevis.org/browse/227,227,AzureDevOps/Authentication/AuthenticationException/(self),logical,,,2020-05-18T14:52:13-04:00,Static Analysis,648b32f5a9c74d486fe403a92fdecb2334708034399591e88fcbd044aa7a2f78,202800,medium,,,CWE-573: Improper Following of Specification by Caller,http://cwevis.org/browse/573,573,"The required constructor for ISerializable is not present in this type. Add a (private for sealed, protected otherwise) serialization constructor for this type. The serialization constructor should be protected (family) since this type is not sealed.",plain-text,AzureDevOps/Authentication/AuthenticationException/(self),AzureDevOps/Authentication/AuthenticationException/(self),logical,,,,,,MissingSerializationConstructorRule,Gendarme,GEND-MissingSerializationConstructorRule,Missing Serialization Constructor ,"This rule checks for types that implement **System.ISerializable** but
don't provide a serialization constructor. The constructor is required
in order to make the type serializeable but cannot be enforced by the
interface. The serialization constructor should be **private** for
**sealed** types and **protected** for unsealed types.

**Bad** example:


```csharp
[Serializable]
public class Bad : ISerializable {
    public void GetObjectData (SerializationInfo info, StreamingContext context)
    {
    }
}
```
**Good** example (sealed):


```csharp
[Serializable]
public sealed class Good : ISerializable {
    private ClassWithConstructor (SerializationInfo info, StreamingContext context)
    {
    }

    public void GetObjectData (SerializationInfo info, StreamingContext context)
    {
    }
}
```
**Good** example:


```csharp
[Serializable]
public class Good : ISerializable {
    protected ClassWithConstructor (SerializationInfo info, StreamingContext context)
    {
    }

    public void GetObjectData (SerializationInfo info, StreamingContext context)
    {
    }
}
```",markdown,rule-dc56fd6c6aaaf7aef3e91a691e1f8bd8f7311763a2d3286fce16c6c5cf52b5e2,API Abuse,"The software uses an API in a manner contrary to its intended use.

An API is a contract between a caller and a callee. The most common forms of API misuse occurs when the caller does not honor its end of this contract. For example, if a program does not call chdir() after calling chroot(), it violates the contract that specifies how to change the active root directory in a secure fashion. Another good example of library abuse is expecting the callee to return trustworthy DNS information to the caller. In this case, the caller misuses the callee API by making certain assumptions about its behavior (that the return value can be used for authentication purposes). One can also violate the caller-callee contract from the other side. For example, if a coder subclasses SecureRandom and returns a non-random value, the contract is violated.",markdown,,,escalated,0.9543064,1
589,Static Analysis,2020-05-18T14:51:00-04:00,77878,2020-05-18T14:54:28-04:00,high,escalated,,,,,,CWE-695: Use of Low-Level Functionality,http://cwevis.org/browse/695,695,Microsoft/IdentityModel/Clients/ActiveDirectory/Native/BCryptNative/BCryptBuffer/(self),logical,,,2020-05-18T14:51:59-04:00,Static Analysis,3ac9036736202c636e5a647bb8073bf5337a353e654d9216f8af1cf9293e2f3b,202158,high,,,CWE-695: Use of Low-Level Functionality,http://cwevis.org/browse/695,695,The type uses System.IntPtr or System.UIntPtr instead of System.Runtime.InteropServices.SafeHandle. Consider changing the code to use SafeHandle.,plain-text,Microsoft/IdentityModel/Clients/ActiveDirectory/Native/BCryptNative/BCryptBuffer/(self),Microsoft/IdentityModel/Clients/ActiveDirectory/Native/BCryptNative/BCryptBuffer/(self),logical,,,,,,PreferSafeHandleRule,Gendarme,GEND-PreferSafeHandleRule,Prefer Safe Handle ,"In general it is best to interop with native code using
**System.Runtime.InteropServices.SafeHandle** instead of
**System.IntPtr** or **System.UIntPtr** because:

SafeHandles are type safe.
SafeHandles are guaranteed to be disposed of during exceptional
conditions like a thread aborting unexpectedly or a stack overflow.
SafeHandles are not vulnerable to reycle attacks.
You don't need to write a finalizer which can be tricky to do because
they execute within their own thread, may execute on partially
constructed objects, and normally tear down the application if you allow
an exception to escape from them.


 **Bad** example:


```csharp
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable.
public sealed class Database {
    ~Database ()
    {
        // This will execute even if the ctor throws so it is important to check
        // to see if the fields are initialized.
        if (m_database != IntPtr.Zero) {
            NativeMethods.sqlite3_close (m_database);
        }
    }

    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        int err = NativeMethods.sqlite3_open_v2 (path, out m_database, flags, IntPtr.Zero);
        // handle errors
    }

    // exec and query methods would go here

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (IntPtr db);

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private IntPtr m_database;
}
```
**Good** example:


```csharp
using System.Runtime.ConstrainedExecution;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable, but you do not need to implement a finalizer because
// SafeHandle will take care of the cleanup.
internal sealed class Database {
    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        m_database = new SqlitePtr (path, flags);
    }

    // exec and query methods would go here

    // This corresponds to a native sqlite3*.
    [SecurityPermission (SecurityAction.InheritanceDemand, UnmanagedCode = true)]
    [SecurityPermission (SecurityAction.Demand, UnmanagedCode = true)]
    private sealed class SqlitePtr : SafeHandle {
        public SqlitePtr (string path, NativeMethods.OpenFlags flags) : base (IntPtr.Zero, true)
        {
            int err = NativeMethods.sqlite3_open_v2 (path, out handle, flags, IntPtr.Zero);
            // handle errors
        }

        public override bool IsInvalid {
            get {
                return (handle == IntPtr.Zero);
            }
        }

        // This will not be called if the handle is invalid. Note that this method should not throw.
        [ReliabilityContract (Consistency.WillNotCorruptState, Cer.MayFail)]
        protected override bool ReleaseHandle ()
        {
            NativeMethods.sqlite3_close (this);
            return true;
        }
    }

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (SqlitePtr db);

        // Open must take an IntPtr but all other methods take a type safe SqlitePtr.
        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private SqlitePtr m_database;
}
```",markdown,GEND-PreferSafeHandleRule,Prefer Safe Handle ,"In general it is best to interop with native code using
**System.Runtime.InteropServices.SafeHandle** instead of
**System.IntPtr** or **System.UIntPtr** because:

SafeHandles are type safe.
SafeHandles are guaranteed to be disposed of during exceptional
conditions like a thread aborting unexpectedly or a stack overflow.
SafeHandles are not vulnerable to reycle attacks.
You don't need to write a finalizer which can be tricky to do because
they execute within their own thread, may execute on partially
constructed objects, and normally tear down the application if you allow
an exception to escape from them.


 **Bad** example:


```csharp
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable.
public sealed class Database {
    ~Database ()
    {
        // This will execute even if the ctor throws so it is important to check
        // to see if the fields are initialized.
        if (m_database != IntPtr.Zero) {
            NativeMethods.sqlite3_close (m_database);
        }
    }

    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        int err = NativeMethods.sqlite3_open_v2 (path, out m_database, flags, IntPtr.Zero);
        // handle errors
    }

    // exec and query methods would go here

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (IntPtr db);

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private IntPtr m_database;
}
```
**Good** example:


```csharp
using System.Runtime.ConstrainedExecution;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable, but you do not need to implement a finalizer because
// SafeHandle will take care of the cleanup.
internal sealed class Database {
    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        m_database = new SqlitePtr (path, flags);
    }

    // exec and query methods would go here

    // This corresponds to a native sqlite3*.
    [SecurityPermission (SecurityAction.InheritanceDemand, UnmanagedCode = true)]
    [SecurityPermission (SecurityAction.Demand, UnmanagedCode = true)]
    private sealed class SqlitePtr : SafeHandle {
        public SqlitePtr (string path, NativeMethods.OpenFlags flags) : base (IntPtr.Zero, true)
        {
            int err = NativeMethods.sqlite3_open_v2 (path, out handle, flags, IntPtr.Zero);
            // handle errors
        }

        public override bool IsInvalid {
            get {
                return (handle == IntPtr.Zero);
            }
        }

        // This will not be called if the handle is invalid. Note that this method should not throw.
        [ReliabilityContract (Consistency.WillNotCorruptState, Cer.MayFail)]
        protected override bool ReleaseHandle ()
        {
            NativeMethods.sqlite3_close (this);
            return true;
        }
    }

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (SqlitePtr db);

        // Open must take an IntPtr but all other methods take a type safe SqlitePtr.
        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private SqlitePtr m_database;
}
```",markdown,,,escalated,0.8318374,1
590,Static Analysis,2020-05-18T14:51:00-04:00,77978,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Squirrel/Update/Program/Releasify,logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.98149246,1
591,Static Analysis,2020-05-18T14:51:00-04:00,78089,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Common/Zip/WinzipAesEncryptionData/Initialize,logical,,,2020-05-18T14:51:56-04:00,Static Analysis,30630eaec9ce2940f75541aeba1a35f5fd1f6490a99b480277b9a2af4380630a,200167,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,This disposable local is not guaranteed to be disposed of before the method returns. Use a 'using' statement or surround the local's usage with a try/finally block. Local of type 'Rfc2898DeriveBytes' is not disposed of (at least not locally).,plain-text,SharpCompress/Common/Zip/WinzipAesEncryptionData/Initialize,SharpCompress/Common/Zip/WinzipAesEncryptionData/Initialize,logical,,,,,,EnsureLocalDisposalRule,Gendarme,GEND-EnsureLocalDisposalRule,Ensure Local Disposal ,"This rule checks that disposable locals are always disposed of before
the method returns. Use a 'using' statement (or a try/finally block) to
guarantee local disposal even in the event an unhandled exception
occurs.

**Bad** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    DecodeHeader (stream);
    if (!DecodedHeader.HasContent) {
        return;
    }
    DecodeContent (stream);
    stream.Dispose ();
}
```
**Good** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        DecodeHeader (stream);
        if (!DecodedHeader.HasContent) {
            return;
        }
        DecodeContent (stream);
    }
}
```
**Bad** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    Decode (stream);
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
    stream.Dispose ();
}
```
**Good** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        Decode (stream);
    }
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.9811318,1
592,Static Analysis,2020-05-18T14:51:00-04:00,78090,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Squirrel/Bsdiff/WrappingStream/set_Position,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201274,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Squirrel/Bsdiff/WrappingStream/set_Position,Squirrel/Bsdiff/WrappingStream/set_Position,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
593,Static Analysis,2020-05-18T14:51:00-04:00,78093,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-557: Concurrency Issues,http://cwevis.org/browse/557,557,NuGet/PackageSourceProvider/SavePackageSources,logical,,,2020-05-18T14:51:57-04:00,Static Analysis,0790545cafbf38fd3acba7ab29d480bbfefb5bca654d7b137a7ee48dd6ad8686,201024,medium,,,CWE-367: Time-of-check Time-of-use (TOCTOU) Race Condition,http://cwevis.org/browse/367,367,The use of the event does not seems protected properly against NullReferenceException and/or race conditions. Fix the event use to make sure it won't be null or susceptible to a race condition. Possible race condition since field 'PackageSourcesSaved' is accessed directly.,plain-text,NuGet/PackageSourceProvider/SavePackageSources,NuGet/PackageSourceProvider/SavePackageSources,logical,,,,,,ProtectCallToEventDelegatesRule,Gendarme,GEND-ProtectCallToEventDelegatesRule,Protect Call To Event Delegates ,"This rule checks that event invocations are safely implemented. In
particular, the event must be copied into a local to avoid race
conditions and it must be checked for null before it is used (events
will normally be null until a delegate is added to them).

**Bad** example (no check):


```csharp
public event EventHandler Loading;

protected void OnLoading (EventArgs e)
{
    // Loading field could be null, throwing a NullReferenceException
    Loading (this, e);
}
```
**Bad** example (race condition):


```csharp
public event EventHandler Loading;

protected void OnLoading (EventArgs e)
{
    // Loading could be non-null here
    if (Loading != null) {
        // but be null once we get here :(
        Loading (this, e);
    }
}
```
**Good** example:


```csharp
public event EventHandler Loading;
protected void OnLoading (EventArgs e)
{
    EventHandler handler = Loading;
    // handler is either null or non-null
    if (handler != null) {
        // and won't change (i.e. safe from a NullReferenceException)
        handler (this, e);
        // however it is still possible, like the original code, that
        // the Loading method will be removed before, or during its
        // execution. Your code should be safe against such occurance.
    }
}
```",markdown,rule-d1b92de2d2079261b3abb4d275473f8ffefb9c723f42c8c56f72d385fb3abc7c,Concurrency,,,,,escalated,0.7928567,1
594,Static Analysis,2020-05-18T14:51:00-04:00,78114,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Readers/Rar/RarReader/GetEntryStream,logical,,,2020-05-18T14:51:56-04:00,Static Analysis,f6d4752fc701ad02d48b9d09bda919cb3109f906ab4d0909bac7f3f0b8dd8c4c,200162,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,This disposable local is not guaranteed to be disposed of before the method returns. Use a 'using' statement or surround the local's usage with a try/finally block. Local of type 'RarCrcStream' is not disposed of (at least not locally).,plain-text,SharpCompress/Readers/Rar/RarReader/GetEntryStream,SharpCompress/Readers/Rar/RarReader/GetEntryStream,logical,,,,,,EnsureLocalDisposalRule,Gendarme,GEND-EnsureLocalDisposalRule,Ensure Local Disposal ,"This rule checks that disposable locals are always disposed of before
the method returns. Use a 'using' statement (or a try/finally block) to
guarantee local disposal even in the event an unhandled exception
occurs.

**Bad** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    DecodeHeader (stream);
    if (!DecodedHeader.HasContent) {
        return;
    }
    DecodeContent (stream);
    stream.Dispose ();
}
```
**Good** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        DecodeHeader (stream);
        if (!DecodedHeader.HasContent) {
            return;
        }
        DecodeContent (stream);
    }
}
```
**Bad** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    Decode (stream);
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
    stream.Dispose ();
}
```
**Good** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        Decode (stream);
    }
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.98217076,1
595,Static Analysis,2020-05-18T14:51:00-04:00,78153,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Readers/AbstractReader/(self),logical,,,2020-05-18T14:51:56-04:00,Static Analysis,de41d082fd32e3eded3c5c458fb12df148590a9ffe6479e7e80a1c4ecbd075aa,199985,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,This type contains disposable field(s) which aren't disposed. Ensure that every disposable field(s) is correctly disposed. Since entriesForCurrentReadStream is Disposable Dispose() should call entriesForCurrentReadStream.Dispose(),plain-text,SharpCompress/Readers/AbstractReader/(self),SharpCompress/Readers/AbstractReader/(self),logical,,,,,,DisposableFieldsShouldBeDisposedRule,Gendarme,GEND-DisposableFieldsShouldBeDisposedRule,Disposable Fields Should Be Disposed ,"The rule inspects all fields for disposable types and, if
**System.IDisposable** is implemented, checks that the type's
**Dispose** method does indeed call **Dispose** on all disposable
fields.

**Bad** example:


```csharp
class DoesNotDisposeMember : IDisposable {
    byte[] buffer;
    IDisposable field;

    public void Dispose ()
    {
        buffer = null;
        // field is not disposed
    }
}
```
**Good** example:


```csharp
class DisposePattern : IDisposable {
    byte[] buffer;
    IDisposable field;
    bool disposed;

    public void Dispose ()
    {
        Dispose (true);
    }

    private void Dispose (bool disposing)
    {
        if (!disposed) {
            if (disposing) {
                field.Dispose ();
            }
            buffer = null;
            disposed = true;
        }
    }
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97959876,1
596,Static Analysis,2020-05-18T14:51:00-04:00,78187,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-465: Pointer Issues,http://cwevis.org/browse/465,465,Squirrel/Update/CopStache/Render,logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-0dd0e028a5ce327b29cd3ffa9ef62c97353c7155364a9a4b89933187ee675fef,Invalid Pointer,,,,,escalated,0.6708902,1
597,Static Analysis,2020-05-18T14:51:00-04:00,78188,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-465: Pointer Issues,http://cwevis.org/browse/465,465,Atlassian/Bitbucket/Authentication/TokenScope/op_Subtraction,logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-0dd0e028a5ce327b29cd3ffa9ef62c97353c7155364a9a4b89933187ee675fef,Invalid Pointer,,,,,escalated,0.6708902,1
598,Static Analysis,2020-05-18T14:51:00-04:00,78196,2020-05-18T14:54:28-04:00,medium,false-positive,"process.title = 'apm';

  apm.run(process.argv.slice(2), function(error) {
    return process.exitCode = error != null ? 1 : 0;
  });

}).call(this);",6,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/cli.js,file,9,9,2020-05-18T14:51:33-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,192118,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/cli.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\cli.js,file,19,12,9,9,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
599,Static Analysis,2020-05-18T14:51:00-04:00,78197,2020-05-18T14:54:28-04:00,medium,false-positive,"apm = require('./apm-cli');

  process.title = 'apm';

  apm.run(process.argv.slice(2), function(error) {
    return process.exitCode = error != null ? 1 : 0;",3,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/cli.js,file,6,6,2020-05-18T14:51:33-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,192116,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/cli.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\cli.js,file,10,3,6,6,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
600,Static Analysis,2020-05-18T14:51:00-04:00,78198,2020-05-18T14:54:28-04:00,medium,false-positive,"process.title = 'apm';

  apm.run(process.argv.slice(2), function(error) {
    return process.exitCode = error != null ? 1 : 0;
  });",5,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/cli.js,file,8,8,2020-05-18T14:51:33-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,192117,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/cli.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\cli.js,file,18,11,8,8,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
601,Static Analysis,2020-05-18T14:51:00-04:00,78200,2020-05-18T14:54:28-04:00,medium,false-positive,"(function() {
  var apm;

  apm = require('./apm-cli');

  process.title = 'apm';",1,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/cli.js,file,4,4,2020-05-18T14:51:33-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192115,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/cli.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\cli.js,file,16,9,4,4,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
602,Static Analysis,2020-05-18T14:51:00-04:00,78228,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-189: Numeric Errors,http://cwevis.org/browse/189,189,SharpCompress/Compressors/PPMd/I1/Model/PpmContext/op_Subtraction,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,03ba04f65bdee74e716d09d64feb1f004a116c5543f675d9955d1297acbf5baf,201066,medium,,,CWE-190: Integer Overflow or Wraparound,http://cwevis.org/browse/190,190,This method casts the result of an integer multiplication into a larger integer. This may result in an overflow before the cast can be done. Cast the operands instead of the result.,plain-text,SharpCompress/Compressors/PPMd/I1/Model/PpmContext/op_Subtraction,SharpCompress/Compressors/PPMd/I1/Model/PpmContext/op_Subtraction,logical,,,,,,ReviewCastOnIntegerMultiplicationRule,Gendarme,GEND-ReviewCastOnIntegerMultiplicationRule,Review Cast On Integer Multiplication ,"This rule checks for integral multiply operations where the result is
cast to a larger integral type. It's safer instead to cast an operand to
the larger type to minimize the chance of overflow.

**Bad** example:


```csharp
public long Bad (int a, int b)
{
    // e.g. Bad (Int32.MaxInt, Int32.MaxInt) == 1
    return a * b;
}
```
**Good** example:


```csharp
public long Good (int a, int b)
{
    // e.g. Good (Int32.MaxInt, Int32.MaxInt) == 4611686014132420609
    return (long) a * b;
}
```",markdown,rule-87c4a91bc4c9e20c70f0637bd67a4d03975f25b3ec675b9cc13d0f04540c76a6,Numeric Error,,,,,escalated,0.9599974,1
603,Static Analysis,2020-05-18T14:51:00-04:00,78353,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/Alm/Cli/Program/Askpass,logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.98149246,1
604,Static Analysis,2020-05-18T14:51:00-04:00,78361,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/Web/XmlTransform/XmlFileInfoDocument/CreateAttribute,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201239,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Microsoft/Web/XmlTransform/XmlFileInfoDocument/CreateAttribute,Microsoft/Web/XmlTransform/XmlFileInfoDocument/CreateAttribute,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
605,Static Analysis,2020-05-18T14:51:00-04:00,78363,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-388: 7PK - Errors,http://cwevis.org/browse/388,388,GitHub/Authentication/Authentication/Authentication,logical,,,2020-05-18T14:52:13-04:00,Static Analysis,f73cef352a0b2bf1d0cc5310f027978a051db5e56968ba97879cbcb8e22239bf,202517,medium,,,CWE-754: Improper Check for Unusual or Exceptional Conditions,http://cwevis.org/browse/754,754,"Every delegate passed to native code must include an exception block which spans the entire method and has a catch all block. Surround the entire method body with a try/catch block. An exception occurred while verifying this method. This failure can probably be ignored, it's most likely due to an uncommon code sequence in the method the rule didn't understand. Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index",plain-text,GitHub/Authentication/Authentication/Authentication,GitHub/Authentication/Authentication/Authentication,logical,,,,,,DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRule,Gendarme,GEND-DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRule,Delegates Passed To Native Code Must Include Exception Handling ,"Every delegate which is passed to native code must include an exception
block which spans the entire method and has a catch all handler.

**Bad** example:


```csharp
public void NativeCallback ()
{
    Console.WriteLine (""{0}"", 1);
}
```
**Good** example:


```csharp
public void NativeCallback ()
{
    try {
        Console.WriteLine (""{0}"", 1);
    }
    catch {
    }
}
```",markdown,rule-e3f0972459f483bc18a68eed953b03a6c7e7fb7e495bc2047dd97eaba40f966b,Error Handling,,,,,escalated,0.88051474,1
606,Static Analysis,2020-05-18T14:51:00-04:00,78410,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Compressors/Xz/Filters/Lzma2Filter/SetBaseStream,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201139,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Compressors/Xz/Filters/Lzma2Filter/SetBaseStream,SharpCompress/Compressors/Xz/Filters/Lzma2Filter/SetBaseStream,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
607,Static Analysis,2020-05-18T14:51:00-04:00,78514,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-465: Pointer Issues,http://cwevis.org/browse/465,465,Atlassian/Bitbucket/Authentication/TokenScope/op_BitwiseOr,logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-0dd0e028a5ce327b29cd3ffa9ef62c97353c7155364a9a4b89933187ee675fef,Invalid Pointer,,,,,escalated,0.67089015,1
608,Static Analysis,2020-05-18T14:51:00-04:00,78661,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Squirrel/Shell/ShellLink/set_WorkingDirectory,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201264,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Squirrel/Shell/ShellLink/set_WorkingDirectory,Squirrel/Shell/ShellLink/set_WorkingDirectory,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
609,Static Analysis,2020-05-18T14:51:00-04:00,78668,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Compressors/Rar/MultiVolumeReadOnlyStream/Read,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201140,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Compressors/Rar/MultiVolumeReadOnlyStream/Read,SharpCompress/Compressors/Rar/MultiVolumeReadOnlyStream/Read,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
610,Static Analysis,2020-05-18T14:51:00-04:00,78697,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Mono/Cecil/PE/ImageWriter/GetHeaderSize,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201288,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Mono/Cecil/PE/ImageWriter/GetHeaderSize,Mono/Cecil/PE/ImageWriter/GetHeaderSize,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
611,Static Analysis,2020-05-18T14:51:00-04:00,78806,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-388: 7PK - Errors,http://cwevis.org/browse/388,388,Microsoft/IdentityModel/Clients/ActiveDirectory/LoggerCallbackHandler/ExecuteObsoleteCallback,logical,,,2020-05-18T14:51:59-04:00,Static Analysis,f73cef352a0b2bf1d0cc5310f027978a051db5e56968ba97879cbcb8e22239bf,201993,medium,,,CWE-754: Improper Check for Unusual or Exceptional Conditions,http://cwevis.org/browse/754,754,"Every delegate passed to native code must include an exception block which spans the entire method and has a catch all block. Surround the entire method body with a try/catch block. An exception occurred while verifying this method. This failure can probably be ignored, it's most likely due to an uncommon code sequence in the method the rule didn't understand. Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index",plain-text,Microsoft/IdentityModel/Clients/ActiveDirectory/LoggerCallbackHandler/ExecuteObsoleteCallback,Microsoft/IdentityModel/Clients/ActiveDirectory/LoggerCallbackHandler/ExecuteObsoleteCallback,logical,,,,,,DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRule,Gendarme,GEND-DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRule,Delegates Passed To Native Code Must Include Exception Handling ,"Every delegate which is passed to native code must include an exception
block which spans the entire method and has a catch all handler.

**Bad** example:


```csharp
public void NativeCallback ()
{
    Console.WriteLine (""{0}"", 1);
}
```
**Good** example:


```csharp
public void NativeCallback ()
{
    try {
        Console.WriteLine (""{0}"", 1);
    }
    catch {
    }
}
```",markdown,rule-e3f0972459f483bc18a68eed953b03a6c7e7fb7e495bc2047dd97eaba40f966b,Error Handling,,,,,escalated,0.88051474,1
612,Static Analysis,2020-05-18T14:51:00-04:00,78818,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-227: 7PK - API Abuse,http://cwevis.org/browse/227,227,Squirrel/ChecksumFailedException/(self),logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-dc56fd6c6aaaf7aef3e91a691e1f8bd8f7311763a2d3286fce16c6c5cf52b5e2,API Abuse,"The software uses an API in a manner contrary to its intended use.

An API is a contract between a caller and a callee. The most common forms of API misuse occurs when the caller does not honor its end of this contract. For example, if a program does not call chdir() after calling chroot(), it violates the contract that specifies how to change the active root directory in a secure fashion. Another good example of library abuse is expecting the callee to return trustworthy DNS information to the caller. In this case, the caller misuses the callee API by making certain assumptions about its behavior (that the return value can be used for authentication purposes). One can also violate the caller-callee contract from the other side. For example, if a coder subclasses SecureRandom and returns a non-random value, the contract is violated.",markdown,,,escalated,0.94525355,1
613,Static Analysis,2020-05-18T14:51:00-04:00,78862,2020-05-18T14:54:28-04:00,high,escalated,"if (preferencesBySelector[selector][key] != null) {
              preferencesBySelector[selector][key] = _.extend(value, preferencesBySelector[selector][key]);
            } else {
              preferencesBySelector[selector][key] = value;
            }
          }
        }",269,,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/lib/package-converter.js,file,272,272,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.93355244,1
614,Static Analysis,2020-05-18T14:51:00-04:00,78863,2020-05-18T14:54:28-04:00,medium,false-positive,"url = require('url');

  zlib = require('zlib');

  _ = require('underscore-plus');",5,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/package-converter.js,file,8,8,2020-05-18T14:51:36-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,193654,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/package-converter.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\package-converter.js,file,17,10,8,8,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
615,Static Analysis,2020-05-18T14:51:00-04:00,78867,2020-05-18T14:54:28-04:00,high,escalated,"convertedFileName = convertedFileName.replace(/[\s-]+/g, '-');
        convertedPath = path.join(directoryPath, convertedFileName);
        suffix = 1;
        while (fs.existsSync(convertedPath) || fs.existsSync(convertedPath.toLowerCase())) {
          extension = path.extname(convertedFileName);
          convertedFileName = `${path.basename(convertedFileName, extension)}-${suffix}${extension}`;
          convertedPath = path.join(directoryPath, convertedFileName);",170,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/lib/package-converter.js,file,173,173,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.9752869,1
616,Static Analysis,2020-05-18T14:51:00-04:00,78868,2020-05-18T14:54:28-04:00,medium,false-positive,"CSON = require('season');

  plist = require('@atom/plist');

  ({ScopeSelector} = require('first-mate'));",11,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/package-converter.js,file,14,14,2020-05-18T14:51:36-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,193657,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/package-converter.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\package-converter.js,file,18,11,14,14,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
617,Static Analysis,2020-05-18T14:51:00-04:00,78870,2020-05-18T14:54:28-04:00,high,escalated,"preferencesBySelector[selector] = {};
            }
            if (preferencesBySelector[selector][key] != null) {
              preferencesBySelector[selector][key] = _.extend(value, preferencesBySelector[selector][key]);
            } else {
              preferencesBySelector[selector][key] = value;
            }",267,,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/lib/package-converter.js,file,270,270,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.93355244,1
618,Static Analysis,2020-05-18T14:51:00-04:00,78872,2020-05-18T14:54:28-04:00,medium,false-positive,"_ = require('underscore-plus');

  CSON = require('season');

  plist = require('@atom/plist');",9,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/package-converter.js,file,12,12,2020-05-18T14:51:36-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,193656,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/package-converter.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\package-converter.js,file,17,10,12,12,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
619,Static Analysis,2020-05-18T14:51:00-04:00,78873,2020-05-18T14:54:28-04:00,high,escalated,"}
          for (key in properties) {
            value = properties[key];
            if (preferencesBySelector[selector] == null) {
              preferencesBySelector[selector] = {};
            }
            if (preferencesBySelector[selector][key] != null) {",263,,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/lib/package-converter.js,file,266,266,2020-05-18T14:51:37-04:00,Static Analysis,6569b353992e88510a975ec3412e07f9c2539e0cf8eb813d02c1c97e2a312d82,193694,high,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Generic Object Injection Sink,plain-text,Atom x64/resources/app/apm/lib/package-converter.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\package-converter.js,file,48,17,266,266,security,detect-object-injection,ESLint,ESLINT-SECURITY-detect-object-injection,Detect object injection,"Detects `variable[key]` as a left- or right-hand assignment operand.

More information: [The Dangers of Square Bracket Notation](https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/the-dangers-of-square-bracket-notation.md)",markdown,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.9251437,1
620,Static Analysis,2020-05-18T14:51:00-04:00,78874,2020-05-18T14:54:28-04:00,high,escalated,"if (_.contains(this.plistExtensions, path.extname(sourcePath))) {
        contents = plist.parseFileSync(sourcePath);
      } else if (_.contains(['.json', '.cson'], path.extname(sourcePath))) {
        contents = CSON.readFileSync(sourcePath);
      }
      return this.writeFileSync(destinationPath, contents);
    }",147,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/lib/package-converter.js,file,150,150,2020-05-18T14:51:37-04:00,Static Analysis,374ad040fff48d9edaa97052bf28a674b1f4e79af66a0448f1ab1699003790cd,193672,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Found fs.readFileSync with non literal argument at index 0,plain-text,Atom x64/resources/app/apm/lib/package-converter.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\package-converter.js,file,37,20,150,150,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.9758102,1
621,Static Analysis,2020-05-18T14:51:00-04:00,78875,2020-05-18T14:54:28-04:00,high,escalated,"convertedPath = path.join(directoryPath, convertedFileName);
          suffix++;
        }
        results.push(fs.renameSync(childPath, convertedPath));
      }
      return results;
    }",176,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/lib/package-converter.js,file,179,179,2020-05-18T14:51:37-04:00,Static Analysis,08c8b2216480d12ce0d2de8abebe5c0369095554002ed97b71e395e908c50f24,193679,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,"Found fs.renameSync with non literal argument at index 0,1",plain-text,Atom x64/resources/app/apm/lib/package-converter.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\package-converter.js,file,35,22,179,179,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.9745312,1
622,Static Analysis,2020-05-18T14:51:00-04:00,78876,2020-05-18T14:54:28-04:00,high,escalated,"return;
      }
      destination = path.join(this.destinationPath, 'grammars');
      ref = fs.readdirSync(sourceSyntaxes);
      for (i = 0, len = ref.length; i < len; i++) {
        child = ref[i];
        childPath = path.join(sourceSyntaxes, child);",288,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/lib/package-converter.js,file,291,291,2020-05-18T14:51:37-04:00,Static Analysis,cbb6e839417e7d17515dcb248b2294ad68b4b8c574da732c47e66bfae873164c,193705,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Found fs.readdirSync with non literal argument at index 0,plain-text,Atom x64/resources/app/apm/lib/package-converter.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\package-converter.js,file,27,13,291,291,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.978149,1
623,Static Analysis,2020-05-18T14:51:00-04:00,78879,2020-05-18T14:54:28-04:00,high,escalated,"writeFileSync(filePath, object = {}) {
      this.filterObject(object);
      if (Object.keys(object).length > 0) {
        return CSON.writeFileSync(filePath, object);
      }
    }",134,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/lib/package-converter.js,file,137,137,2020-05-18T14:51:37-04:00,Static Analysis,ecd1b614179fad4c5807eb746c8d93996057dc747bbd482dce6aa7e91d17e648,193671,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Found fs.writeFileSync with non literal argument at index 0,plain-text,Atom x64/resources/app/apm/lib/package-converter.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\package-converter.js,file,34,16,137,137,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.9786352,1
624,Static Analysis,2020-05-18T14:51:00-04:00,78881,2020-05-18T14:54:28-04:00,high,escalated,"if (_.contains(this.plistExtensions, path.extname(filePath))) {
        return plist.parseFileSync(filePath);
      } else if (_.contains(['.json', '.cson'], path.extname(filePath))) {
        return CSON.readFileSync(filePath);
      }
    }",127,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/lib/package-converter.js,file,130,130,2020-05-18T14:51:36-04:00,Static Analysis,374ad040fff48d9edaa97052bf28a674b1f4e79af66a0448f1ab1699003790cd,193670,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Found fs.readFileSync with non literal argument at index 0,plain-text,Atom x64/resources/app/apm/lib/package-converter.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\package-converter.js,file,33,16,130,130,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.9758102,1
625,Static Analysis,2020-05-18T14:51:00-04:00,78883,2020-05-18T14:54:28-04:00,high,escalated,"var packageName, ref;
      sourcePath = path.resolve(sourcePath);
      try {
        packageName = (ref = JSON.parse(fs.readFileSync(path.join(sourcePath, 'package.json')))) != null ? ref.packageName : void 0;
      } catch (error1) {}
      if (packageName == null) {
        packageName = path.basename(this.destinationPath);",81,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/lib/package-converter.js,file,84,84,2020-05-18T14:51:36-04:00,Static Analysis,374ad040fff48d9edaa97052bf28a674b1f4e79af66a0448f1ab1699003790cd,193666,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Found fs.readFileSync with non literal argument at index 0,plain-text,Atom x64/resources/app/apm/lib/package-converter.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\package-converter.js,file,56,41,84,84,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.9758102,1
626,Static Analysis,2020-05-18T14:51:00-04:00,78885,2020-05-18T14:54:28-04:00,high,escalated,"if (!(scope && settings)) {
          continue;
        }
        if (properties = this.convertSettings(settings)) {
          try {
            selector = new ScopeSelector(scope).toCssSelector();
          } catch (error1) {",253,,,,CWE-697: Incorrect Comparison,http://cwevis.org/browse/697,697,Atom x64/resources/app/apm/lib/package-converter.js,file,256,256,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-c271f2bb931810eef633f7c736d1dd934fbd6ed5f62ac8d8ea39ade811190622,Comparison,,,,,escalated,0.9110538,1
627,Static Analysis,2020-05-18T14:51:00-04:00,78888,2020-05-18T14:54:28-04:00,medium,false-positive,"temp = require('temp');

  fs = require('./fs');

  request = require('./request');",19,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/package-converter.js,file,22,22,2020-05-18T14:51:36-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,193661,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/package-converter.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\package-converter.js,file,15,8,22,22,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
628,Static Analysis,2020-05-18T14:51:00-04:00,78891,2020-05-18T14:54:28-04:00,high,escalated,"if (selector == null) {
          selector = '*';
        }
        if (snippetsBySelector[selector] == null) {
          snippetsBySelector[selector] = {};
        }
        snippetsBySelector[selector][name] = {",223,,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/lib/package-converter.js,file,226,226,2020-05-18T14:51:37-04:00,Static Analysis,6569b353992e88510a975ec3412e07f9c2539e0cf8eb813d02c1c97e2a312d82,193683,high,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Generic Object Injection Sink,plain-text,Atom x64/resources/app/apm/lib/package-converter.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\package-converter.js,file,41,13,226,226,security,detect-object-injection,ESLint,ESLINT-SECURITY-detect-object-injection,Detect object injection,"Detects `variable[key]` as a left- or right-hand assignment operand.

More information: [The Dangers of Square Bracket Notation](https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/the-dangers-of-square-bracket-notation.md)",markdown,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.9251437,1
629,Static Analysis,2020-05-18T14:51:00-04:00,78898,2020-05-18T14:54:28-04:00,high,false-positive,"ref = fs.readdirSync(directoryPath);
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        child = ref[i];
        childPath = path.join(directoryPath, child);
        // Invalid characters taken from http://msdn.microsoft.com/en-us/library/windows/desktop/aa365247(v=vs.85).aspx
        convertedFileName = child.replace(/[|?*<>:""\\\/]+/g, '-');",160,Generic Object Injection Sink,admin,2020-05-30T13:19:33-04:00,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/lib/package-converter.js,file,163,163,2020-05-18T14:51:37-04:00,Static Analysis,6569b353992e88510a975ec3412e07f9c2539e0cf8eb813d02c1c97e2a312d82,193675,high,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Generic Object Injection Sink,plain-text,Atom x64/resources/app/apm/lib/package-converter.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\package-converter.js,file,23,17,163,163,security,detect-object-injection,ESLint,ESLINT-SECURITY-detect-object-injection,Detect object injection,"Detects `variable[key]` as a left- or right-hand assignment operand.

More information: [The Dangers of Square Bracket Notation](https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/the-dangers-of-square-bracket-notation.md)",markdown,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.9251437,1
630,Static Analysis,2020-05-18T14:51:00-04:00,78905,2020-05-18T14:54:28-04:00,high,escalated,"if (preferencesBySelector[selector] == null) {
              preferencesBySelector[selector] = {};
            }
            if (preferencesBySelector[selector][key] != null) {
              preferencesBySelector[selector][key] = _.extend(value, preferencesBySelector[selector][key]);
            } else {
              preferencesBySelector[selector][key] = value;",266,Generic Object Injection Sink,admin,2020-05-27T15:38:31-04:00,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/lib/package-converter.js,file,269,269,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.93355244,1
631,Static Analysis,2020-05-18T14:51:00-04:00,78908,2020-05-18T14:54:28-04:00,high,escalated,"} else if (_.contains(['.json', '.cson'], path.extname(sourcePath))) {
        contents = CSON.readFileSync(sourcePath);
      }
      return this.writeFileSync(destinationPath, contents);
    }

    normalizeFilenames(directoryPath) {",149,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/lib/package-converter.js,file,152,152,2020-05-18T14:51:37-04:00,Static Analysis,ecd1b614179fad4c5807eb746c8d93996057dc747bbd482dce6aa7e91d17e648,193673,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Found fs.writeFileSync with non literal argument at index 0,plain-text,Atom x64/resources/app/apm/lib/package-converter.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\package-converter.js,file,32,14,152,152,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.9786352,1
632,Static Analysis,2020-05-18T14:51:00-04:00,78909,2020-05-18T14:54:28-04:00,high,escalated,"if (snippetsBySelector[selector] == null) {
          snippetsBySelector[selector] = {};
        }
        snippetsBySelector[selector][name] = {
          prefix: tabTrigger,
          body: content
        };",226,Generic Object Injection Sink,admin,2020-05-27T15:38:06-04:00,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/lib/package-converter.js,file,229,229,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.93355244,1
633,Static Analysis,2020-05-18T14:51:00-04:00,78916,2020-05-18T14:54:28-04:00,medium,false-positive,"fs = require('./fs');

  request = require('./request');

  // Convert a TextMate bundle to an Atom package
  module.exports = PackageConverter = class PackageConverter {",21,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/package-converter.js,file,24,24,2020-05-18T14:51:36-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,193662,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/package-converter.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\package-converter.js,file,20,13,24,24,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
634,Static Analysis,2020-05-18T14:51:00-04:00,78917,2020-05-18T14:54:28-04:00,high,escalated,"}
      snippetsBySelector = {};
      destination = path.join(this.destinationPath, 'snippets');
      ref = fs.readdirSync(sourceSnippets);
      for (i = 0, len = ref.length; i < len; i++) {
        child = ref[i];
        snippet = (ref1 = this.readFileSync(path.join(sourceSnippets, child))) != null ? ref1 : {};",192,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/lib/package-converter.js,file,195,195,2020-05-18T14:51:37-04:00,Static Analysis,cbb6e839417e7d17515dcb248b2294ad68b4b8c574da732c47e66bfae873164c,193680,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Found fs.readdirSync with non literal argument at index 0,plain-text,Atom x64/resources/app/apm/lib/package-converter.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\package-converter.js,file,27,13,195,195,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.978149,1
635,Static Analysis,2020-05-18T14:51:00-04:00,78918,2020-05-18T14:54:28-04:00,medium,false-positive,"request = require('./request');

  // Convert a TextMate bundle to an Atom package
  module.exports = PackageConverter = class PackageConverter {
    constructor(sourcePath1, destinationPath) {
      this.sourcePath = sourcePath1;
      this.destinationPath = path.resolve(destinationPath);",24,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/package-converter.js,file,27,27,2020-05-18T14:51:36-04:00,Static Analysis,62173c3357301b64bcb7cb49ad65b9eeb8aa24356212b93fe0fe0166d3218ce7,193663,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'module' is not defined.,plain-text,Atom x64/resources/app/apm/lib/package-converter.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\package-converter.js,file,9,3,27,27,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.068299174,0
636,Static Analysis,2020-05-18T14:51:00-04:00,78919,2020-05-18T14:54:28-04:00,medium,false-positive,"path = require('path');

  url = require('url');

  zlib = require('zlib');",3,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/package-converter.js,file,6,6,2020-05-18T14:51:36-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,193653,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/package-converter.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\package-converter.js,file,16,9,6,6,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
637,Static Analysis,2020-05-18T14:51:00-04:00,78925,2020-05-18T14:54:28-04:00,high,escalated,"if (!fs.isDirectorySync(directoryPath)) {
        return;
      }
      ref = fs.readdirSync(directoryPath);
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        child = ref[i];",157,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/lib/package-converter.js,file,160,160,2020-05-18T14:51:37-04:00,Static Analysis,cbb6e839417e7d17515dcb248b2294ad68b4b8c574da732c47e66bfae873164c,193674,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Found fs.readdirSync with non literal argument at index 0,plain-text,Atom x64/resources/app/apm/lib/package-converter.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\package-converter.js,file,27,13,160,160,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.978149,1
638,Static Analysis,2020-05-18T14:51:00-04:00,78930,2020-05-18T14:54:28-04:00,medium,false-positive,"zlib = require('zlib');

  _ = require('underscore-plus');

  CSON = require('season');",7,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/package-converter.js,file,10,10,2020-05-18T14:51:36-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,193655,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/package-converter.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\package-converter.js,file,14,7,10,10,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270798,0
639,Static Analysis,2020-05-18T14:51:00-04:00,78933,2020-05-18T14:54:28-04:00,high,escalated,"body: content
        };
      }
      this.writeFileSync(path.join(destination, `${packageName}.cson`), snippetsBySelector);
      return this.normalizeFilenames(destination);
    }",231,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/lib/package-converter.js,file,234,234,2020-05-18T14:51:37-04:00,Static Analysis,ecd1b614179fad4c5807eb746c8d93996057dc747bbd482dce6aa7e91d17e648,193687,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Found fs.writeFileSync with non literal argument at index 0,plain-text,Atom x64/resources/app/apm/lib/package-converter.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\package-converter.js,file,25,7,234,234,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.9786352,1
640,Static Analysis,2020-05-18T14:51:00-04:00,78934,2020-05-18T14:54:28-04:00,high,escalated,"ref = settings.shellVariables;
        for (i = 0, len = ref.length; i < len; i++) {
          ({name, value} = ref[i]);
          shellVariables[name] = value;
        }
        settings.shellVariables = shellVariables;
      }",104,Generic Object Injection Sink,admin,2020-05-27T15:37:31-04:00,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/lib/package-converter.js,file,107,107,2020-05-18T14:51:36-04:00,Static Analysis,6569b353992e88510a975ec3412e07f9c2539e0cf8eb813d02c1c97e2a312d82,193669,high,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Generic Object Injection Sink,plain-text,Atom x64/resources/app/apm/lib/package-converter.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\package-converter.js,file,31,11,107,107,security,detect-object-injection,ESLint,ESLINT-SECURITY-detect-object-injection,Detect object injection,"Detects `variable[key]` as a left- or right-hand assignment operand.

More information: [The Dangers of Square Bracket Notation](https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/the-dangers-of-square-bracket-notation.md)",markdown,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.9251437,1
641,Static Analysis,2020-05-18T14:51:00-04:00,78935,2020-05-18T14:54:28-04:00,high,false-positive,"shellVariables = {};
        ref = settings.shellVariables;
        for (i = 0, len = ref.length; i < len; i++) {
          ({name, value} = ref[i]);
          shellVariables[name] = value;
        }
        settings.shellVariables = shellVariables;",103,Generic Object Injection Sink,admin,2020-05-27T15:36:59-04:00,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/lib/package-converter.js,file,106,106,2020-05-18T14:51:36-04:00,Static Analysis,6569b353992e88510a975ec3412e07f9c2539e0cf8eb813d02c1c97e2a312d82,193668,high,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Generic Object Injection Sink,plain-text,Atom x64/resources/app/apm/lib/package-converter.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\package-converter.js,file,34,28,106,106,security,detect-object-injection,ESLint,ESLINT-SECURITY-detect-object-injection,Detect object injection,"Detects `variable[key]` as a left- or right-hand assignment operand.

More information: [The Dangers of Square Bracket Notation](https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/the-dangers-of-square-bracket-notation.md)",markdown,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.9251437,1
642,Static Analysis,2020-05-18T14:51:00-04:00,78937,2020-05-18T14:54:28-04:00,high,escalated,"return callback(error);
        }).on('end', () => {
          var sourcePath;
          sourcePath = path.join(tempPath, fs.readdirSync(tempPath)[0]);
          return this.copyDirectories(sourcePath, callback);
        });
      });",71,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/lib/package-converter.js,file,74,74,2020-05-18T14:51:36-04:00,Static Analysis,cbb6e839417e7d17515dcb248b2294ad68b4b8c574da732c47e66bfae873164c,193665,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Found fs.readdirSync with non literal argument at index 0,plain-text,Atom x64/resources/app/apm/lib/package-converter.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\package-converter.js,file,58,44,74,74,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.978149,1
643,Static Analysis,2020-05-18T14:51:00-04:00,78938,2020-05-18T14:54:28-04:00,medium,false-positive,"tar = require('tar');

  temp = require('temp');

  fs = require('./fs');",17,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/package-converter.js,file,20,20,2020-05-18T14:51:36-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,193660,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/package-converter.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\package-converter.js,file,17,10,20,20,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
644,Static Analysis,2020-05-18T14:51:00-04:00,78939,2020-05-18T14:54:28-04:00,high,escalated,"selector = '*';
        }
        if (snippetsBySelector[selector] == null) {
          snippetsBySelector[selector] = {};
        }
        snippetsBySelector[selector][name] = {
          prefix: tabTrigger,",224,Generic Object Injection Sink,admin,2020-05-27T15:36:41-04:00,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/lib/package-converter.js,file,227,227,2020-05-18T14:51:37-04:00,Static Analysis,6569b353992e88510a975ec3412e07f9c2539e0cf8eb813d02c1c97e2a312d82,193684,high,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Generic Object Injection Sink,plain-text,Atom x64/resources/app/apm/lib/package-converter.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\package-converter.js,file,39,11,227,227,security,detect-object-injection,ESLint,ESLINT-SECURITY-detect-object-injection,Detect object injection,"Detects `variable[key]` as a left- or right-hand assignment operand.

More information: [The Dangers of Square Bracket Notation](https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/the-dangers-of-square-bracket-notation.md)",markdown,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.9251437,1
645,Static Analysis,2020-05-18T14:51:00-04:00,78941,2020-05-18T14:54:28-04:00,high,false-positive,"destination = path.join(this.destinationPath, 'settings');
      ref = fs.readdirSync(sourcePreferences);
      for (i = 0, len = ref.length; i < len; i++) {
        child = ref[i];
        ({scope, settings} = (ref1 = this.readFileSync(path.join(sourcePreferences, child))) != null ? ref1 : {});
        if (!(scope && settings)) {
          continue;",248,Generic Object Injection Sink,admin,2020-05-27T15:36:07-04:00,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/lib/package-converter.js,file,251,251,2020-05-18T14:51:37-04:00,Static Analysis,6569b353992e88510a975ec3412e07f9c2539e0cf8eb813d02c1c97e2a312d82,193689,high,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Generic Object Injection Sink,plain-text,Atom x64/resources/app/apm/lib/package-converter.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\package-converter.js,file,23,17,251,251,security,detect-object-injection,ESLint,ESLINT-SECURITY-detect-object-injection,Detect object injection,"Detects `variable[key]` as a left- or right-hand assignment operand.

More information: [The Dangers of Square Bracket Notation](https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/the-dangers-of-square-bracket-notation.md)",markdown,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.9251437,1
646,Static Analysis,2020-05-18T14:51:00-04:00,78942,2020-05-18T14:54:28-04:00,high,escalated,"throw e;
          }
          for (key in properties) {
            value = properties[key];
            if (preferencesBySelector[selector] == null) {
              preferencesBySelector[selector] = {};
            }",262,Generic Object Injection Sink,admin,2020-05-27T15:35:51-04:00,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/lib/package-converter.js,file,265,265,2020-05-18T14:51:37-04:00,Static Analysis,6569b353992e88510a975ec3412e07f9c2539e0cf8eb813d02c1c97e2a312d82,193693,high,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Generic Object Injection Sink,plain-text,Atom x64/resources/app/apm/lib/package-converter.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\package-converter.js,file,36,21,265,265,security,detect-object-injection,ESLint,ESLINT-SECURITY-detect-object-injection,Detect object injection,"Detects `variable[key]` as a left- or right-hand assignment operand.

More information: [The Dangers of Square Bracket Notation](https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/the-dangers-of-square-bracket-notation.md)",markdown,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.9251437,1
647,Static Analysis,2020-05-18T14:51:00-04:00,78943,2020-05-18T14:54:28-04:00,high,false-positive,"destination = path.join(this.destinationPath, 'snippets');
      ref = fs.readdirSync(sourceSnippets);
      for (i = 0, len = ref.length; i < len; i++) {
        child = ref[i];
        snippet = (ref1 = this.readFileSync(path.join(sourceSnippets, child))) != null ? ref1 : {};
        ({scope, name, content, tabTrigger} = snippet);
        if (!(tabTrigger && content)) {",194,Generic Object Injection Sink,admin,2020-05-27T15:35:33-04:00,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/lib/package-converter.js,file,197,197,2020-05-18T14:51:37-04:00,Static Analysis,6569b353992e88510a975ec3412e07f9c2539e0cf8eb813d02c1c97e2a312d82,193681,high,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Generic Object Injection Sink,plain-text,Atom x64/resources/app/apm/lib/package-converter.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\package-converter.js,file,23,17,197,197,security,detect-object-injection,ESLint,ESLINT-SECURITY-detect-object-injection,Detect object injection,"Detects `variable[key]` as a left- or right-hand assignment operand.

More information: [The Dangers of Square Bracket Notation](https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/the-dangers-of-square-bracket-notation.md)",markdown,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.9251437,1
648,Static Analysis,2020-05-18T14:51:00-04:00,78946,2020-05-18T14:54:28-04:00,high,false-positive,"destination = path.join(this.destinationPath, 'grammars');
      ref = fs.readdirSync(sourceSyntaxes);
      for (i = 0, len = ref.length; i < len; i++) {
        child = ref[i];
        childPath = path.join(sourceSyntaxes, child);
        if (fs.isFileSync(childPath)) {
          this.convertFile(childPath, destination);",290,Generic Object Injection Sink,admin,2020-05-27T15:34:19-04:00,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/lib/package-converter.js,file,293,293,2020-05-18T14:51:37-04:00,Static Analysis,6569b353992e88510a975ec3412e07f9c2539e0cf8eb813d02c1c97e2a312d82,193706,high,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Generic Object Injection Sink,plain-text,Atom x64/resources/app/apm/lib/package-converter.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\package-converter.js,file,23,17,293,293,security,detect-object-injection,ESLint,ESLINT-SECURITY-detect-object-injection,Detect object injection,"Detects `variable[key]` as a left- or right-hand assignment operand.

More information: [The Dangers of Square Bracket Notation](https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/the-dangers-of-square-bracket-notation.md)",markdown,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.9251437,1
649,Static Analysis,2020-05-18T14:51:00-04:00,78947,2020-05-18T14:54:28-04:00,medium,false-positive,"(function() {
  var CSON, PackageConverter, ScopeSelector, _, fs, path, plist, request, tar, temp, url, zlib;

  path = require('path');

  url = require('url');",1,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/package-converter.js,file,4,4,2020-05-18T14:51:36-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,193652,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/package-converter.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\package-converter.js,file,17,10,4,4,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
650,Static Analysis,2020-05-18T14:51:00-04:00,78950,2020-05-18T14:54:28-04:00,high,escalated,"ref = fs.readdirSync(sourceSnippets);
      for (i = 0, len = ref.length; i < len; i++) {
        child = ref[i];
        snippet = (ref1 = this.readFileSync(path.join(sourceSnippets, child))) != null ? ref1 : {};
        ({scope, name, content, tabTrigger} = snippet);
        if (!(tabTrigger && content)) {
          continue;",195,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/lib/package-converter.js,file,198,198,2020-05-18T14:51:37-04:00,Static Analysis,374ad040fff48d9edaa97052bf28a674b1f4e79af66a0448f1ab1699003790cd,193682,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Found fs.readFileSync with non literal argument at index 0,plain-text,Atom x64/resources/app/apm/lib/package-converter.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\package-converter.js,file,44,27,198,198,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.9758102,1
651,Static Analysis,2020-05-18T14:51:00-04:00,78954,2020-05-18T14:54:28-04:00,high,escalated,"ref = fs.readdirSync(sourcePreferences);
      for (i = 0, len = ref.length; i < len; i++) {
        child = ref[i];
        ({scope, settings} = (ref1 = this.readFileSync(path.join(sourcePreferences, child))) != null ? ref1 : {});
        if (!(scope && settings)) {
          continue;
        }",249,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/lib/package-converter.js,file,252,252,2020-05-18T14:51:37-04:00,Static Analysis,374ad040fff48d9edaa97052bf28a674b1f4e79af66a0448f1ab1699003790cd,193690,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Found fs.readFileSync with non literal argument at index 0,plain-text,Atom x64/resources/app/apm/lib/package-converter.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\package-converter.js,file,55,38,252,252,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.9758102,1
652,Static Analysis,2020-05-18T14:51:00-04:00,78955,2020-05-18T14:54:28-04:00,high,escalated,"requestOptions = {
        url: this.getDownloadUrl()
      };
      return request.createReadStream(requestOptions, (readStream) => {
        readStream.on('response', function({headers, statusCode}) {
          if (statusCode !== 200) {
            return callback(`Download failed (${headers.status})`);",59,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/lib/package-converter.js,file,62,62,2020-05-18T14:51:36-04:00,Static Analysis,b3d66f69f89d98bddd97a34c6540decbf25e4aa4b5b8992dbf1bb363accfdeb9,193664,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Found fs.createReadStream with non literal argument at index 0,plain-text,Atom x64/resources/app/apm/lib/package-converter.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\package-converter.js,file,38,14,62,62,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.9687304,1
653,Static Analysis,2020-05-18T14:51:00-04:00,78956,2020-05-18T14:54:28-04:00,medium,false-positive,"({ScopeSelector} = require('first-mate'));

  tar = require('tar');

  temp = require('temp');",15,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/package-converter.js,file,18,18,2020-05-18T14:51:36-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,193659,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/package-converter.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\package-converter.js,file,16,9,18,18,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
654,Static Analysis,2020-05-18T14:51:00-04:00,78957,2020-05-18T14:54:28-04:00,medium,false-positive,"plist = require('@atom/plist');

  ({ScopeSelector} = require('first-mate'));

  tar = require('tar');",13,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/package-converter.js,file,16,16,2020-05-18T14:51:36-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,193658,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/package-converter.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\package-converter.js,file,29,22,16,16,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
655,Static Analysis,2020-05-18T14:51:00-04:00,78958,2020-05-18T14:54:28-04:00,high,escalated,"}
      preferencesBySelector = {};
      destination = path.join(this.destinationPath, 'settings');
      ref = fs.readdirSync(sourcePreferences);
      for (i = 0, len = ref.length; i < len; i++) {
        child = ref[i];
        ({scope, settings} = (ref1 = this.readFileSync(path.join(sourcePreferences, child))) != null ? ref1 : {});",246,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/lib/package-converter.js,file,249,249,2020-05-18T14:51:37-04:00,Static Analysis,cbb6e839417e7d17515dcb248b2294ad68b4b8c574da732c47e66bfae873164c,193688,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Found fs.readdirSync with non literal argument at index 0,plain-text,Atom x64/resources/app/apm/lib/package-converter.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\package-converter.js,file,27,13,249,249,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.978149,1
656,Static Analysis,2020-05-18T14:51:00-04:00,78961,2020-05-18T14:54:28-04:00,high,escalated,"for (key in properties) {
            value = properties[key];
            if (preferencesBySelector[selector] == null) {
              preferencesBySelector[selector] = {};
            }
            if (preferencesBySelector[selector][key] != null) {
              preferencesBySelector[selector][key] = _.extend(value, preferencesBySelector[selector][key]);",264,Generic Object Injection Sink,admin,2020-05-27T15:33:48-04:00,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/lib/package-converter.js,file,267,267,2020-05-18T14:51:37-04:00,Static Analysis,6569b353992e88510a975ec3412e07f9c2539e0cf8eb813d02c1c97e2a312d82,193695,high,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Generic Object Injection Sink,plain-text,Atom x64/resources/app/apm/lib/package-converter.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\package-converter.js,file,46,15,267,267,security,detect-object-injection,ESLint,ESLINT-SECURITY-detect-object-injection,Detect object injection,"Detects `variable[key]` as a left- or right-hand assignment operand.

More information: [The Dangers of Square Bracket Notation](https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/the-dangers-of-square-bracket-notation.md)",markdown,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.9251437,1
657,Static Analysis,2020-05-18T14:51:00-04:00,78962,2020-05-18T14:54:28-04:00,high,escalated,"}
        }
      }
      this.writeFileSync(path.join(destination, `${packageName}.cson`), preferencesBySelector);
      return this.normalizeFilenames(destination);
    }",274,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/lib/package-converter.js,file,277,277,2020-05-18T14:51:37-04:00,Static Analysis,ecd1b614179fad4c5807eb746c8d93996057dc747bbd482dce6aa7e91d17e648,193704,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Found fs.writeFileSync with non literal argument at index 0,plain-text,Atom x64/resources/app/apm/lib/package-converter.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\package-converter.js,file,25,7,277,277,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.9786352,1
658,Static Analysis,2020-05-18T14:51:00-04:00,78988,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Compressors/Rar/RarStream/Write,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201145,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Compressors/Rar/RarStream/Write,SharpCompress/Compressors/Rar/RarStream/Write,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
659,Static Analysis,2020-05-18T14:51:00-04:00,79012,2020-05-18T14:54:28-04:00,high,escalated,,,,,,CWE-227: 7PK - API Abuse,http://cwevis.org/browse/227,227,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/Native/X509Native/UnsafeNativeMethods/(self),logical,,,2020-05-18T14:52:00-04:00,Static Analysis,dbd57bbd7b01d2cdc8d58222b94308e03da707a5c7a5e9eab6acb7a083c63ff7,202216,high,,,CWE-676: Use of Potentially Dangerous Function,http://cwevis.org/browse/676,676,This type or method is decorated with [SuppressUnmanagedCodeSecurity] which reduce the number of security checks done when unmanaged code is called. Ensure that use of this attribute does not compromise the security of the application.,plain-text,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/Native/X509Native/UnsafeNativeMethods/(self),Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/Native/X509Native/UnsafeNativeMethods/(self),logical,,,,,,ReviewSuppressUnmanagedCodeSecurityUsageRule,Gendarme,GEND-ReviewSuppressUnmanagedCodeSecurityUsageRule,Review Suppress Unmanaged Code Security Usage ,"This rule fires if a type or method is decorated with the
**[SuppressUnmanagedCodeSecurity]**attribute. This attribute reduces the
security checks done when executing unmanaged code and its usage should
be reviewed to confirm that no exploitable security holes are present.

Example:


```csharp
[SuppressUnmanagedCodeSecurity]
public class Safe {
    [DllImport (""User32.dll"")]
    static extern Boolean MessageBeep (UInt32 beepType);
}
```",markdown,rule-dc56fd6c6aaaf7aef3e91a691e1f8bd8f7311763a2d3286fce16c6c5cf52b5e2,API Abuse,"The software uses an API in a manner contrary to its intended use.

An API is a contract between a caller and a callee. The most common forms of API misuse occurs when the caller does not honor its end of this contract. For example, if a program does not call chdir() after calling chroot(), it violates the contract that specifies how to change the active root directory in a secure fashion. Another good example of library abuse is expecting the callee to return trustworthy DNS information to the caller. In this case, the caller misuses the callee API by making certain assumptions about its behavior (that the return value can be used for authentication purposes). One can also violate the caller-callee contract from the other side. For example, if a coder subclasses SecureRandom and returns a non-random value, the contract is violated.",markdown,,,escalated,0.9466878,1
660,Static Analysis,2020-05-18T14:51:00-04:00,79052,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/Platform/SilentWebUI/(self),logical,,,2020-05-18T14:51:59-04:00,Static Analysis,7f0dbee3f1c79bb2f978fa35d5605b27e8bf7fb06617bca8f628c794765e9a1d,201995,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,This type contains disposable field(s) which aren't disposed. Ensure that every disposable field(s) is correctly disposed. Since dialog is Disposable Dispose() should call dialog.Dispose(),plain-text,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/Platform/SilentWebUI/(self),Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/Platform/SilentWebUI/(self),logical,,,,,,DisposableFieldsShouldBeDisposedRule,Gendarme,GEND-DisposableFieldsShouldBeDisposedRule,Disposable Fields Should Be Disposed ,"The rule inspects all fields for disposable types and, if
**System.IDisposable** is implemented, checks that the type's
**Dispose** method does indeed call **Dispose** on all disposable
fields.

**Bad** example:


```csharp
class DoesNotDisposeMember : IDisposable {
    byte[] buffer;
    IDisposable field;

    public void Dispose ()
    {
        buffer = null;
        // field is not disposed
    }
}
```
**Good** example:


```csharp
class DisposePattern : IDisposable {
    byte[] buffer;
    IDisposable field;
    bool disposed;

    public void Dispose ()
    {
        Dispose (true);
    }

    private void Dispose (bool disposing)
    {
        if (!disposed) {
            if (disposing) {
                field.Dispose ();
            }
            buffer = null;
            disposed = true;
        }
    }
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97745097,1
661,Static Analysis,2020-05-18T14:51:00-04:00,79263,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-557: Concurrency Issues,http://cwevis.org/browse/557,557,Microsoft/Web/XmlTransform/XmlElementContext/get_NameAndArgumentsRegex,logical,,,2020-05-18T14:51:59-04:00,Static Analysis,a594261077d13c6bb0813b8804acbfead663210b8e3d50657400e5ea56606a52,201726,medium,,,CWE-567: Unsynchronized Access to Shared Data in a Multithreaded Context,http://cwevis.org/browse/567,567,"This instance method writes to static fields. This may cause problem with multiple instances in multithreaded applications. Move initialization to the static constructor or ensure appropriate locking. The static field 'nameAndArgumentsRegex', of type 'System.Text.RegularExpressions.Regex'. is being set in an instance method.",plain-text,Microsoft/Web/XmlTransform/XmlElementContext/get_NameAndArgumentsRegex,Microsoft/Web/XmlTransform/XmlElementContext/get_NameAndArgumentsRegex,logical,,,,,,WriteStaticFieldFromInstanceMethodRule,Gendarme,GEND-WriteStaticFieldFromInstanceMethodRule,Write Static Field From Instance Method ,"This rule is used to check for instance methods which write values to
static fields. This may cause problems if multiple instances of the type
exist and are used in multithreaded applications.

**Bad** example:


```csharp
static int default_value;

public int Value {
    get {
        if (default_value == 0) {
            default_value = -1;
        }
        return (value > default_value) ? value : 0;
    }
}
```
**Good** example:


```csharp
static int default_value = -1;

public int Value {
    get {
        return (value > default_value) ? value : 0;
    }
}
```",markdown,rule-d1b92de2d2079261b3abb4d275473f8ffefb9c723f42c8c56f72d385fb3abc7c,Concurrency,,,,,escalated,0.726277,1
662,Static Analysis,2020-05-18T14:51:00-04:00,79277,2020-05-18T14:54:28-04:00,high,escalated,,,,,,CWE-695: Use of Low-Level Functionality,http://cwevis.org/browse/695,695,Microsoft/IdentityModel/Clients/ActiveDirectory/Native/BCryptNative/BCryptBufferDesc/(self),logical,,,2020-05-18T14:51:59-04:00,Static Analysis,3ac9036736202c636e5a647bb8073bf5337a353e654d9216f8af1cf9293e2f3b,202159,high,,,CWE-695: Use of Low-Level Functionality,http://cwevis.org/browse/695,695,The type uses System.IntPtr or System.UIntPtr instead of System.Runtime.InteropServices.SafeHandle. Consider changing the code to use SafeHandle.,plain-text,Microsoft/IdentityModel/Clients/ActiveDirectory/Native/BCryptNative/BCryptBufferDesc/(self),Microsoft/IdentityModel/Clients/ActiveDirectory/Native/BCryptNative/BCryptBufferDesc/(self),logical,,,,,,PreferSafeHandleRule,Gendarme,GEND-PreferSafeHandleRule,Prefer Safe Handle ,"In general it is best to interop with native code using
**System.Runtime.InteropServices.SafeHandle** instead of
**System.IntPtr** or **System.UIntPtr** because:

SafeHandles are type safe.
SafeHandles are guaranteed to be disposed of during exceptional
conditions like a thread aborting unexpectedly or a stack overflow.
SafeHandles are not vulnerable to reycle attacks.
You don't need to write a finalizer which can be tricky to do because
they execute within their own thread, may execute on partially
constructed objects, and normally tear down the application if you allow
an exception to escape from them.


 **Bad** example:


```csharp
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable.
public sealed class Database {
    ~Database ()
    {
        // This will execute even if the ctor throws so it is important to check
        // to see if the fields are initialized.
        if (m_database != IntPtr.Zero) {
            NativeMethods.sqlite3_close (m_database);
        }
    }

    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        int err = NativeMethods.sqlite3_open_v2 (path, out m_database, flags, IntPtr.Zero);
        // handle errors
    }

    // exec and query methods would go here

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (IntPtr db);

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private IntPtr m_database;
}
```
**Good** example:


```csharp
using System.Runtime.ConstrainedExecution;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable, but you do not need to implement a finalizer because
// SafeHandle will take care of the cleanup.
internal sealed class Database {
    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        m_database = new SqlitePtr (path, flags);
    }

    // exec and query methods would go here

    // This corresponds to a native sqlite3*.
    [SecurityPermission (SecurityAction.InheritanceDemand, UnmanagedCode = true)]
    [SecurityPermission (SecurityAction.Demand, UnmanagedCode = true)]
    private sealed class SqlitePtr : SafeHandle {
        public SqlitePtr (string path, NativeMethods.OpenFlags flags) : base (IntPtr.Zero, true)
        {
            int err = NativeMethods.sqlite3_open_v2 (path, out handle, flags, IntPtr.Zero);
            // handle errors
        }

        public override bool IsInvalid {
            get {
                return (handle == IntPtr.Zero);
            }
        }

        // This will not be called if the handle is invalid. Note that this method should not throw.
        [ReliabilityContract (Consistency.WillNotCorruptState, Cer.MayFail)]
        protected override bool ReleaseHandle ()
        {
            NativeMethods.sqlite3_close (this);
            return true;
        }
    }

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (SqlitePtr db);

        // Open must take an IntPtr but all other methods take a type safe SqlitePtr.
        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private SqlitePtr m_database;
}
```",markdown,GEND-PreferSafeHandleRule,Prefer Safe Handle ,"In general it is best to interop with native code using
**System.Runtime.InteropServices.SafeHandle** instead of
**System.IntPtr** or **System.UIntPtr** because:

SafeHandles are type safe.
SafeHandles are guaranteed to be disposed of during exceptional
conditions like a thread aborting unexpectedly or a stack overflow.
SafeHandles are not vulnerable to reycle attacks.
You don't need to write a finalizer which can be tricky to do because
they execute within their own thread, may execute on partially
constructed objects, and normally tear down the application if you allow
an exception to escape from them.


 **Bad** example:


```csharp
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable.
public sealed class Database {
    ~Database ()
    {
        // This will execute even if the ctor throws so it is important to check
        // to see if the fields are initialized.
        if (m_database != IntPtr.Zero) {
            NativeMethods.sqlite3_close (m_database);
        }
    }

    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        int err = NativeMethods.sqlite3_open_v2 (path, out m_database, flags, IntPtr.Zero);
        // handle errors
    }

    // exec and query methods would go here

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (IntPtr db);

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private IntPtr m_database;
}
```
**Good** example:


```csharp
using System.Runtime.ConstrainedExecution;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable, but you do not need to implement a finalizer because
// SafeHandle will take care of the cleanup.
internal sealed class Database {
    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        m_database = new SqlitePtr (path, flags);
    }

    // exec and query methods would go here

    // This corresponds to a native sqlite3*.
    [SecurityPermission (SecurityAction.InheritanceDemand, UnmanagedCode = true)]
    [SecurityPermission (SecurityAction.Demand, UnmanagedCode = true)]
    private sealed class SqlitePtr : SafeHandle {
        public SqlitePtr (string path, NativeMethods.OpenFlags flags) : base (IntPtr.Zero, true)
        {
            int err = NativeMethods.sqlite3_open_v2 (path, out handle, flags, IntPtr.Zero);
            // handle errors
        }

        public override bool IsInvalid {
            get {
                return (handle == IntPtr.Zero);
            }
        }

        // This will not be called if the handle is invalid. Note that this method should not throw.
        [ReliabilityContract (Consistency.WillNotCorruptState, Cer.MayFail)]
        protected override bool ReleaseHandle ()
        {
            NativeMethods.sqlite3_close (this);
            return true;
        }
    }

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (SqlitePtr db);

        // Open must take an IntPtr but all other methods take a type safe SqlitePtr.
        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private SqlitePtr m_database;
}
```",markdown,,,escalated,0.8318374,1
663,Static Analysis,2020-05-18T14:51:00-04:00,79287,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/Alm/Authentication/Git/Trace/Flush,logical,,,2020-05-18T14:52:00-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,202465,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Microsoft/Alm/Authentication/Git/Trace/Flush,Microsoft/Alm/Authentication/Git/Trace/Flush,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
664,Static Analysis,2020-05-18T14:51:00-04:00,79303,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Squirrel/Shell/ShellLink/set_HotKey,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201268,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Squirrel/Shell/ShellLink/set_HotKey,Squirrel/Shell/ShellLink/set_HotKey,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
665,Static Analysis,2020-05-18T14:51:00-04:00,79310,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Compressors/PPMd/PpmdStream/Read,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201146,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Compressors/PPMd/PpmdStream/Read,SharpCompress/Compressors/PPMd/PpmdStream/Read,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
666,Static Analysis,2020-05-18T14:51:00-04:00,79398,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Mono/Cecil/PE/ImageWriter/GetStrongNameSignatureDirectory,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201287,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Mono/Cecil/PE/ImageWriter/GetStrongNameSignatureDirectory,Mono/Cecil/PE/ImageWriter/GetStrongNameSignatureDirectory,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
667,Static Analysis,2020-05-18T14:51:00-04:00,79405,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-388: 7PK - Errors,http://cwevis.org/browse/388,388,SharpCompress/Archives/AbstractArchive/SharpCompress/Archives/IArchiveExtractionListener/FireEntryExtractionBegin,logical,,,2020-05-18T14:51:56-04:00,Static Analysis,f73cef352a0b2bf1d0cc5310f027978a051db5e56968ba97879cbcb8e22239bf,199972,medium,,,CWE-754: Improper Check for Unusual or Exceptional Conditions,http://cwevis.org/browse/754,754,"Every delegate passed to native code must include an exception block which spans the entire method and has a catch all block. Surround the entire method body with a try/catch block. An exception occurred while verifying this method. This failure can probably be ignored, it's most likely due to an uncommon code sequence in the method the rule didn't understand. Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index",plain-text,SharpCompress/Archives/AbstractArchive/SharpCompress/Archives/IArchiveExtractionListener/FireEntryExtractionBegin,SharpCompress/Archives/AbstractArchive/SharpCompress/Archives/IArchiveExtractionListener/FireEntryExtractionBegin,logical,,,,,,DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRule,Gendarme,GEND-DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRule,Delegates Passed To Native Code Must Include Exception Handling ,"Every delegate which is passed to native code must include an exception
block which spans the entire method and has a catch all handler.

**Bad** example:


```csharp
public void NativeCallback ()
{
    Console.WriteLine (""{0}"", 1);
}
```
**Good** example:


```csharp
public void NativeCallback ()
{
    try {
        Console.WriteLine (""{0}"", 1);
    }
    catch {
    }
}
```",markdown,rule-e3f0972459f483bc18a68eed953b03a6c7e7fb7e495bc2047dd97eaba40f966b,Error Handling,,,,,escalated,0.88051474,1
668,Static Analysis,2020-05-18T14:51:00-04:00,79415,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Compressors/LZMA/Bcj2DecoderStream/Read,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201149,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Compressors/LZMA/Bcj2DecoderStream/Read,SharpCompress/Compressors/LZMA/Bcj2DecoderStream/Read,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
669,Static Analysis,2020-05-18T14:51:00-04:00,79448,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Squirrel/Update/UnmanagedPointer/op_Implicit,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201109,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Squirrel/Update/UnmanagedPointer/op_Implicit,Squirrel/Update/UnmanagedPointer/op_Implicit,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
670,Static Analysis,2020-05-18T14:51:00-04:00,79477,2020-05-18T14:54:28-04:00,medium,false-positive,"},
    getResourcePath: function(callback) {
      var apmFolder, appFolder, appLocation, asarPath;
      if (process.env.ATOM_RESOURCE_PATH) {
        return process.nextTick(function() {
          return callback(process.env.ATOM_RESOURCE_PATH);
        });",35,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/apm.js,file,38,38,2020-05-18T14:51:33-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,191870,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/apm.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\apm.js,file,18,11,38,38,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474263,0
671,Static Analysis,2020-05-18T14:51:00-04:00,79478,2020-05-18T14:54:28-04:00,high,escalated,"appFolder = path.dirname(apmFolder);
      if (path.basename(apmFolder) === 'apm' && path.basename(appFolder) === 'app') {
        asarPath = `${appFolder}.asar`;
        if (fs.existsSync(asarPath)) {
          return process.nextTick(function() {
            return callback(asarPath);
          });",54,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/lib/apm.js,file,57,57,2020-05-18T14:51:33-04:00,Static Analysis,a8eb318301dc105f6b242fce363923637060c403e8c9c7b93b984891497b7744,191910,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Found fs.existsSync with non literal argument at index 0,plain-text,Atom x64/resources/app/apm/lib/apm.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\apm.js,file,26,13,57,57,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.96763015,1
672,Static Analysis,2020-05-18T14:51:00-04:00,79479,2020-05-18T14:54:28-04:00,medium,false-positive,"semver = require('semver');

  module.exports = {
    getHomeDirectory: function() {
      if (process.platform === 'win32') {
        return process.env.USERPROFILE;",11,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/apm.js,file,14,14,2020-05-18T14:51:33-04:00,Static Analysis,62173c3357301b64bcb7cb49ad65b9eeb8aa24356212b93fe0fe0166d3218ce7,191796,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'module' is not defined.,plain-text,Atom x64/resources/app/apm/lib/apm.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\apm.js,file,9,3,14,14,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.068299174,0
673,Static Analysis,2020-05-18T14:51:00-04:00,79480,2020-05-18T14:54:28-04:00,medium,false-positive,"if (!fs.existsSync(appLocation)) {
            appLocation = '/usr/share/atom/resources/app.asar';
          }
          return process.nextTick(function() {
            return callback(appLocation);
          });
      }",77,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/apm.js,file,80,80,2020-05-18T14:51:33-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,191935,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/apm.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\apm.js,file,25,18,80,80,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
674,Static Analysis,2020-05-18T14:51:00-04:00,79482,2020-05-18T14:54:28-04:00,medium,false-positive,"return callback(process.env.ATOM_RESOURCE_PATH);
        });
      }
      apmFolder = path.resolve(__dirname, '..');
      appFolder = path.dirname(apmFolder);
      if (path.basename(apmFolder) === 'apm' && path.basename(appFolder) === 'app') {
        asarPath = `${appFolder}.asar`;",40,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/apm.js,file,43,43,2020-05-18T14:51:33-04:00,Static Analysis,9ced861d153ab418069da667a5c9f5fefe90861e103a53df87d410e5550ee1e7,191883,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'__dirname' is not defined.,plain-text,Atom x64/resources/app/apm/lib/apm.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\apm.js,file,41,32,43,43,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.09524149,0
675,Static Analysis,2020-05-18T14:51:00-04:00,79483,2020-05-18T14:54:28-04:00,high,escalated,"},
    setupApmRcFile: function() {
      try {
        return fs.writeFileSync(this.getGlobalConfigPath(), `; This file is auto-generated and should not be edited since any\n; modifications will be lost the next time any apm command is run.\n;\n; You should instead edit your .apmrc config located in ~/.atom/.apmrc\ncache = ${this.getCacheDirectory()}\n; Hide progress-bar to prevent npm from altering apm console output.\nprogress = false`);
      } catch (error1) {}
    }
  };",160,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/lib/apm.js,file,163,163,2020-05-18T14:51:33-04:00,Static Analysis,ecd1b614179fad4c5807eb746c8d93996057dc747bbd482dce6aa7e91d17e648,191977,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Found fs.writeFileSync with non literal argument at index 0,plain-text,Atom x64/resources/app/apm/lib/apm.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\apm.js,file,32,16,163,163,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.9786352,1
676,Static Analysis,2020-05-18T14:51:00-04:00,79485,2020-05-18T14:54:28-04:00,medium,false-positive,"module.exports = {
    getHomeDirectory: function() {
      if (process.platform === 'win32') {
        return process.env.USERPROFILE;
      } else {
        return process.env.HOME;
      }",14,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/apm.js,file,17,17,2020-05-18T14:51:33-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,191809,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/apm.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\apm.js,file,23,16,17,17,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
677,Static Analysis,2020-05-18T14:51:00-04:00,79487,2020-05-18T14:54:28-04:00,high,escalated,"appFolder = path.dirname(apmFolder);
      if (path.basename(apmFolder) === 'apm' && path.basename(appFolder) === 'app') {
        asarPath = `${appFolder}.asar`;
        if (fs.existsSync(asarPath)) {
          return process.nextTick(function() {
            return callback(asarPath);
          });",44,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/lib/apm.js,file,47,47,2020-05-18T14:51:33-04:00,Static Analysis,a8eb318301dc105f6b242fce363923637060c403e8c9c7b93b984891497b7744,191889,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Found fs.existsSync with non literal argument at index 0,plain-text,Atom x64/resources/app/apm/lib/apm.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\apm.js,file,26,13,47,47,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.96763015,1
678,Static Analysis,2020-05-18T14:51:00-04:00,79489,2020-05-18T14:54:28-04:00,medium,false-positive,"if (!this.isWin32()) {
        return null;
      }
      if (process.env.GYP_MSVS_VERSION) {
        // Use the explictly-configured version when set
        return process.env.GYP_MSVS_VERSION;
      }",123,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/apm.js,file,126,126,2020-05-18T14:51:33-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,191962,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/apm.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\apm.js,file,18,11,126,126,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
679,Static Analysis,2020-05-18T14:51:00-04:00,79490,2020-05-18T14:54:28-04:00,medium,false-positive,"},
    getElectronArch: function() {
      var ref;
      switch (process.platform) {
        case 'darwin':
          return 'x64';
        default:",100,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/apm.js,file,103,103,2020-05-18T14:51:33-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,191950,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/apm.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\apm.js,file,22,15,103,103,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
680,Static Analysis,2020-05-18T14:51:00-04:00,79491,2020-05-18T14:54:28-04:00,medium,false-positive,"if (path.basename(apmFolder) === 'apm' && path.basename(appFolder) === 'app') {
        asarPath = `${appFolder}.asar`;
        if (fs.existsSync(asarPath)) {
          return process.nextTick(function() {
            return callback(asarPath);
          });
        }",55,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/apm.js,file,58,58,2020-05-18T14:51:33-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,191914,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/apm.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\apm.js,file,25,18,58,58,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
681,Static Analysis,2020-05-18T14:51:00-04:00,79493,2020-05-18T14:54:28-04:00,medium,false-positive,"},
    getAtomDirectory: function() {
      var ref;
      return (ref = process.env.ATOM_HOME) != null ? ref : path.join(this.getHomeDirectory(), '.atom');
    },
    getRustupHomeDirPath: function() {
      if (process.env.RUSTUP_HOME) {",21,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/apm.js,file,24,24,2020-05-18T14:51:33-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,191830,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/apm.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\apm.js,file,28,21,24,24,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
682,Static Analysis,2020-05-18T14:51:00-04:00,79494,2020-05-18T14:54:28-04:00,medium,false-positive,"npm = require('npm');

  semver = require('semver');

  module.exports = {
    getHomeDirectory: function() {",9,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/apm.js,file,12,12,2020-05-18T14:51:33-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,191793,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/apm.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\apm.js,file,19,12,12,12,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
683,Static Analysis,2020-05-18T14:51:00-04:00,79495,2020-05-18T14:54:28-04:00,medium,false-positive,"getResourcePath: function(callback) {
      var apmFolder, appFolder, appLocation, asarPath;
      if (process.env.ATOM_RESOURCE_PATH) {
        return process.nextTick(function() {
          return callback(process.env.ATOM_RESOURCE_PATH);
        });
      }",36,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/apm.js,file,39,39,2020-05-18T14:51:33-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,191874,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/apm.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\apm.js,file,23,16,39,39,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
684,Static Analysis,2020-05-18T14:51:00-04:00,79496,2020-05-18T14:54:28-04:00,high,escalated,"(function() {
  var child_process, fs, npm, path, semver;

  child_process = require('child_process');

  fs = require('./fs');",1,,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/lib/apm.js,file,4,4,2020-05-18T14:51:33-04:00,Static Analysis,63cfeff1e19efa6702923410272f5381339ce1d5ae0e4401b9a7b3accccb14ee,191778,high,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,"Found require(""child_process"")",plain-text,Atom x64/resources/app/apm/lib/apm.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\apm.js,file,43,19,4,4,security,detect-child-process,ESLint,ESLINT-SECURITY-detect-child-process,Detect child process,"Detects instances of [`child_process`](https://nodejs.org/api/child_process.html) & non-literal [`exec()`](https://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback)

More information: [Avoiding Command Injection in Node.js](https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/avoid-command-injection-node.md)",markdown,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.93688923,1
685,Static Analysis,2020-05-18T14:51:00-04:00,79497,2020-05-18T14:54:28-04:00,medium,false-positive,"(function() {
  var child_process, fs, npm, path, semver;

  child_process = require('child_process');

  fs = require('./fs');",1,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/apm.js,file,4,4,2020-05-18T14:51:33-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,191780,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/apm.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\apm.js,file,26,19,4,4,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
686,Static Analysis,2020-05-18T14:51:00-04:00,79499,2020-05-18T14:54:28-04:00,medium,false-positive,"if (process.platform === 'win32') {
        return process.env.USERPROFILE;
      } else {
        return process.env.HOME;
      }
    },
    getAtomDirectory: function() {",16,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/apm.js,file,19,19,2020-05-18T14:51:33-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,191816,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/apm.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\apm.js,file,23,16,19,19,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
687,Static Analysis,2020-05-18T14:51:00-04:00,79500,2020-05-18T14:54:28-04:00,medium,false-positive,"case 'darwin':
          return 'x64';
        default:
          return (ref = process.env.ATOM_ARCH) != null ? ref : process.arch;
      }
    },
    getUserConfigPath: function() {",104,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/apm.js,file,107,107,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.17391245,0
688,Static Analysis,2020-05-18T14:51:00-04:00,79502,2020-05-18T14:54:28-04:00,high,escalated,"}
    },
    visualStudioIsInstalled: function(version) {
      return fs.existsSync(path.join(this.x86ProgramFilesDirectory(), `Microsoft Visual Studio ${version}`, ""Common7"", ""IDE""));
    },
    loadNpm: function(callback) {
      var npmOptions;",141,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/lib/apm.js,file,144,144,2020-05-18T14:51:33-04:00,Static Analysis,a8eb318301dc105f6b242fce363923637060c403e8c9c7b93b984891497b7744,191971,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Found fs.existsSync with non literal argument at index 0,plain-text,Atom x64/resources/app/apm/lib/apm.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\apm.js,file,27,14,144,144,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.96763015,1
689,Static Analysis,2020-05-18T14:51:00-04:00,79503,2020-05-18T14:54:28-04:00,medium,false-positive,"child_process = require('child_process');

  fs = require('./fs');

  path = require('path');",3,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/apm.js,file,6,6,2020-05-18T14:51:33-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,191784,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/apm.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\apm.js,file,15,8,6,6,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
690,Static Analysis,2020-05-18T14:51:00-04:00,79504,2020-05-18T14:54:28-04:00,medium,false-positive,"});
        }
      }
      switch (process.platform) {
        case 'darwin':
          return child_process.exec('mdfind ""kMDItemCFBundleIdentifier == \'com.github.atom\'""', function(error, stdout = '', stderr) {
            var appLocation;",60,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/apm.js,file,63,63,2020-05-18T14:51:33-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,191921,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/apm.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\apm.js,file,22,15,63,63,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
691,Static Analysis,2020-05-18T14:51:00-04:00,79505,2020-05-18T14:54:28-04:00,medium,false-positive,"return process.platform === 'win32';
    },
    x86ProgramFilesDirectory: function() {
      return process.env[""ProgramFiles(x86)""] || process.env[""ProgramFiles""];
    },
    getInstalledVisualStudioFlag: function() {
      if (!this.isWin32()) {",117,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/apm.js,file,120,120,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.17391245,0
692,Static Analysis,2020-05-18T14:51:00-04:00,79506,2020-05-18T14:54:28-04:00,medium,false-positive,"},
    getElectronUrl: function() {
      var ref;
      return (ref = process.env.ATOM_ELECTRON_URL) != null ? ref : 'https://atom.io/download/electron';
    },
    getAtomPackagesUrl: function() {
      var ref;",88,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/apm.js,file,91,91,2020-05-18T14:51:33-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,191945,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/apm.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\apm.js,file,28,21,91,91,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
693,Static Analysis,2020-05-18T14:51:00-04:00,79507,2020-05-18T14:54:28-04:00,medium,false-positive,"},
    getRustupHomeDirPath: function() {
      if (process.env.RUSTUP_HOME) {
        return process.env.RUSTUP_HOME;
      } else {
        return path.join(this.getHomeDirectory(), '.multirust');
      }",25,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/apm.js,file,28,28,2020-05-18T14:51:33-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,191844,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/apm.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\apm.js,file,23,16,28,28,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
694,Static Analysis,2020-05-18T14:51:00-04:00,79508,2020-05-18T14:54:28-04:00,medium,false-positive,"}
      if (process.env.GYP_MSVS_VERSION) {
        // Use the explictly-configured version when set
        return process.env.GYP_MSVS_VERSION;
      }
      if (this.visualStudioIsInstalled(""14.0"")) {
        return '2015';",125,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/apm.js,file,128,128,2020-05-18T14:51:33-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,191963,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/apm.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\apm.js,file,23,16,128,128,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
695,Static Analysis,2020-05-18T14:51:00-04:00,79510,2020-05-18T14:54:28-04:00,medium,false-positive,"var apmFolder, appFolder, appLocation, asarPath;
      if (process.env.ATOM_RESOURCE_PATH) {
        return process.nextTick(function() {
          return callback(process.env.ATOM_RESOURCE_PATH);
        });
      }
      apmFolder = path.resolve(__dirname, '..');",37,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/apm.js,file,40,40,2020-05-18T14:51:33-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,191878,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/apm.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\apm.js,file,34,27,40,40,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
696,Static Analysis,2020-05-18T14:51:00-04:00,79511,2020-05-18T14:54:28-04:00,medium,false-positive,"path = require('path');

  npm = require('npm');

  semver = require('semver');",7,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/apm.js,file,10,10,2020-05-18T14:51:33-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,191790,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/apm.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\apm.js,file,16,9,10,10,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
697,Static Analysis,2020-05-18T14:51:00-04:00,79512,2020-05-18T14:54:28-04:00,medium,false-positive,"},
    getAtomPackagesUrl: function() {
      var ref;
      return (ref = process.env.ATOM_PACKAGES_URL) != null ? ref : `${this.getAtomApiUrl()}/packages`;
    },
    getAtomApiUrl: function() {
      var ref;",92,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/apm.js,file,95,95,2020-05-18T14:51:33-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,191948,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/apm.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\apm.js,file,28,21,95,95,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
698,Static Analysis,2020-05-18T14:51:00-04:00,79513,2020-05-18T14:54:28-04:00,medium,false-positive,"module.exports = {
    getHomeDirectory: function() {
      if (process.platform === 'win32') {
        return process.env.USERPROFILE;
      } else {
        return process.env.HOME;",13,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/apm.js,file,16,16,2020-05-18T14:51:33-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,191805,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/apm.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\apm.js,file,18,11,16,16,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
699,Static Analysis,2020-05-18T14:51:00-04:00,79514,2020-05-18T14:54:28-04:00,medium,false-positive,"if (path.basename(apmFolder) === 'apm' && path.basename(appFolder) === 'app') {
        asarPath = `${appFolder}.asar`;
        if (fs.existsSync(asarPath)) {
          return process.nextTick(function() {
            return callback(asarPath);
          });
        }",45,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/apm.js,file,48,48,2020-05-18T14:51:33-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,191892,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/apm.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\apm.js,file,25,18,48,48,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
700,Static Analysis,2020-05-18T14:51:00-04:00,79515,2020-05-18T14:54:28-04:00,medium,false-positive,"return (ref = process.env.ATOM_HOME) != null ? ref : path.join(this.getHomeDirectory(), '.atom');
    },
    getRustupHomeDirPath: function() {
      if (process.env.RUSTUP_HOME) {
        return process.env.RUSTUP_HOME;
      } else {
        return path.join(this.getHomeDirectory(), '.multirust');",24,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/apm.js,file,27,27,2020-05-18T14:51:33-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,191842,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/apm.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\apm.js,file,18,11,27,27,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
701,Static Analysis,2020-05-18T14:51:00-04:00,79516,2020-05-18T14:54:28-04:00,medium,false-positive,"});
        }
      }
      apmFolder = path.resolve(__dirname, '..', '..', '..');
      appFolder = path.dirname(apmFolder);
      if (path.basename(apmFolder) === 'apm' && path.basename(appFolder) === 'app') {
        asarPath = `${appFolder}.asar`;",50,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/apm.js,file,53,53,2020-05-18T14:51:33-04:00,Static Analysis,9ced861d153ab418069da667a5c9f5fefe90861e103a53df87d410e5550ee1e7,191901,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'__dirname' is not defined.,plain-text,Atom x64/resources/app/apm/lib/apm.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\apm.js,file,41,32,53,53,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.09524149,0
702,Static Analysis,2020-05-18T14:51:00-04:00,79517,2020-05-18T14:54:28-04:00,medium,false-positive,"return path.resolve(this.getAtomDirectory(), '.apm', '.apmrc');
    },
    isWin32: function() {
      return process.platform === 'win32';
    },
    x86ProgramFilesDirectory: function() {
      return process.env[""ProgramFiles(x86)""] || process.env[""ProgramFiles""];",114,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/apm.js,file,117,117,2020-05-18T14:51:33-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,191958,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/apm.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\apm.js,file,21,14,117,117,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474263,0
703,Static Analysis,2020-05-18T14:51:00-04:00,79519,2020-05-18T14:54:28-04:00,medium,false-positive,"},
    getReposDirectory: function() {
      var ref;
      return (ref = process.env.ATOM_REPOS_HOME) != null ? ref : path.join(this.getHomeDirectory(), 'github');
    },
    getElectronUrl: function() {
      var ref;",84,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/apm.js,file,87,87,2020-05-18T14:51:33-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,191943,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/apm.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\apm.js,file,28,21,87,87,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474263,0
704,Static Analysis,2020-05-18T14:51:00-04:00,79520,2020-05-18T14:54:28-04:00,medium,false-positive,"},
    getAtomApiUrl: function() {
      var ref;
      return (ref = process.env.ATOM_API_URL) != null ? ref : 'https://atom.io/api';
    },
    getElectronArch: function() {
      var ref;",96,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/apm.js,file,99,99,2020-05-18T14:51:33-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,191949,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/apm.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\apm.js,file,28,21,99,99,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
705,Static Analysis,2020-05-18T14:51:00-04:00,79521,2020-05-18T14:54:28-04:00,medium,false-positive,"fs = require('./fs');

  path = require('path');

  npm = require('npm');",5,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/apm.js,file,8,8,2020-05-18T14:51:33-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,191787,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/apm.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\apm.js,file,17,10,8,8,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
706,Static Analysis,2020-05-18T14:51:00-04:00,79523,2020-05-18T14:54:28-04:00,high,escalated,"});
        case 'linux':
          appLocation = '/usr/local/share/atom/resources/app.asar';
          if (!fs.existsSync(appLocation)) {
            appLocation = '/usr/share/atom/resources/app.asar';
          }
          return process.nextTick(function() {",74,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/lib/apm.js,file,77,77,2020-05-18T14:51:33-04:00,Static Analysis,a8eb318301dc105f6b242fce363923637060c403e8c9c7b93b984891497b7744,191931,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Found fs.existsSync with non literal argument at index 0,plain-text,Atom x64/resources/app/apm/lib/apm.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\apm.js,file,29,16,77,77,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.96763015,1
707,Static Analysis,2020-05-18T14:51:00-04:00,79542,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/IdentityModel/Clients/ActiveDirectory/TokenCache/Deserialize,logical,,,2020-05-18T14:51:59-04:00,Static Analysis,f04c9d74a6fd90e4bf9aed1a759b57b45fb81263d6af878756a02e65f99a62e0,202007,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,This disposable local is not guaranteed to be disposed of before the method returns. Use a 'using' statement or surround the local's usage with a try/finally block. Local of type 'BinaryReader' is not disposed of (at least not locally).,plain-text,Microsoft/IdentityModel/Clients/ActiveDirectory/TokenCache/Deserialize,Microsoft/IdentityModel/Clients/ActiveDirectory/TokenCache/Deserialize,logical,,,,,,EnsureLocalDisposalRule,Gendarme,GEND-EnsureLocalDisposalRule,Ensure Local Disposal ,"This rule checks that disposable locals are always disposed of before
the method returns. Use a 'using' statement (or a try/finally block) to
guarantee local disposal even in the event an unhandled exception
occurs.

**Bad** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    DecodeHeader (stream);
    if (!DecodedHeader.HasContent) {
        return;
    }
    DecodeContent (stream);
    stream.Dispose ();
}
```
**Good** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        DecodeHeader (stream);
        if (!DecodedHeader.HasContent) {
            return;
        }
        DecodeContent (stream);
    }
}
```
**Bad** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    Decode (stream);
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
    stream.Dispose ();
}
```
**Good** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        Decode (stream);
    }
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.98204976,1
708,Static Analysis,2020-05-18T14:51:00-04:00,79608,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Compressors/Xz/Filters/Lzma2Filter/Init,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201138,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Compressors/Xz/Filters/Lzma2Filter/Init,SharpCompress/Compressors/Xz/Filters/Lzma2Filter/Init,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
709,Static Analysis,2020-05-18T14:51:00-04:00,79629,2020-05-18T14:54:28-04:00,medium,false-positive,"Install = require('./install');

  git = require('./git');

  Link = require('./link');",17,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/develop.js,file,20,20,2020-05-18T14:51:34-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192262,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/develop.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\develop.js,file,16,9,20,20,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
710,Static Analysis,2020-05-18T14:51:00-04:00,79630,2020-05-18T14:54:28-04:00,medium,false-positive,"(function() {
  var Command, Develop, Install, Link, _, async, config, fs, git, path, request, yargs;

  fs = require('fs');

  path = require('path');",1,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/develop.js,file,4,4,2020-05-18T14:51:34-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192254,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/develop.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\develop.js,file,15,8,4,4,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
711,Static Analysis,2020-05-18T14:51:00-04:00,79633,2020-05-18T14:54:28-04:00,medium,false-positive,"_ = require('underscore-plus');

  async = require('async');

  yargs = require('yargs');",7,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/develop.js,file,10,10,2020-05-18T14:51:34-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192257,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/develop.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\develop.js,file,18,11,10,10,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
712,Static Analysis,2020-05-18T14:51:00-04:00,79636,2020-05-18T14:54:28-04:00,medium,false-positive,"Link = require('./link');

  request = require('./request');

  module.exports = Develop = (function() {
    class Develop extends Command {",21,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/develop.js,file,24,24,2020-05-18T14:51:34-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192264,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/develop.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\develop.js,file,20,13,24,24,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
713,Static Analysis,2020-05-18T14:51:00-04:00,79638,2020-05-18T14:54:28-04:00,medium,false-positive,"installDependencies(packageDirectory, options, callback = function() {}) {
        var installOptions;
        process.chdir(packageDirectory);
        installOptions = _.clone(options);
        installOptions.callback = callback;
        return new Install().run(installOptions);",84,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/develop.js,file,87,87,2020-05-18T14:51:34-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,192271,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/develop.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\develop.js,file,16,9,87,87,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
714,Static Analysis,2020-05-18T14:51:00-04:00,79639,2020-05-18T14:54:28-04:00,medium,false-positive,"path = require('path');

  _ = require('underscore-plus');

  async = require('async');",5,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/develop.js,file,8,8,2020-05-18T14:51:34-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192256,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/develop.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\develop.js,file,14,7,8,8,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
715,Static Analysis,2020-05-18T14:51:00-04:00,79641,2020-05-18T14:54:28-04:00,medium,false-positive,"fs = require('fs');

  path = require('path');

  _ = require('underscore-plus');",3,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/develop.js,file,6,6,2020-05-18T14:51:34-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192255,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/develop.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\develop.js,file,17,10,6,6,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
716,Static Analysis,2020-05-18T14:51:00-04:00,79642,2020-05-18T14:54:28-04:00,medium,false-positive,"Command = require('./command');

  Install = require('./install');

  git = require('./git');",15,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/develop.js,file,18,18,2020-05-18T14:51:34-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192261,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/develop.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\develop.js,file,20,13,18,18,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
717,Static Analysis,2020-05-18T14:51:00-04:00,79643,2020-05-18T14:54:28-04:00,medium,false-positive,"if (!options.argv.json) {
            process.stdout.write(`Cloning ${repoUrl} `);
          }
          git.addGitToEnv(process.env);
          return this.spawn(command, args, (...args) => {
            if (options.argv.json) {
              return this.logCommandResultsIfFail(callback, ...args);",71,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/develop.js,file,74,74,2020-05-18T14:51:34-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,192270,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/develop.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\develop.js,file,34,27,74,74,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
718,Static Analysis,2020-05-18T14:51:00-04:00,79644,2020-05-18T14:54:28-04:00,medium,false-positive,"yargs = require('yargs');

  config = require('./apm');

  Command = require('./command');",11,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/develop.js,file,14,14,2020-05-18T14:51:34-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192259,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/develop.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\develop.js,file,19,12,14,14,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
719,Static Analysis,2020-05-18T14:51:00-04:00,79645,2020-05-18T14:54:28-04:00,medium,false-positive,"async = require('async');

  yargs = require('yargs');

  config = require('./apm');",9,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/develop.js,file,12,12,2020-05-18T14:51:34-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192258,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/develop.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\develop.js,file,18,11,12,12,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
720,Static Analysis,2020-05-18T14:51:00-04:00,79646,2020-05-18T14:54:28-04:00,high,escalated,"}
        packageDirectory = (ref = options.commandArgs.shift()) != null ? ref : path.join(config.getReposDirectory(), packageName);
        packageDirectory = path.resolve(packageDirectory);
        if (fs.existsSync(packageDirectory)) {
          return this.linkPackage(packageDirectory, options);
        } else {
          return this.getRepositoryUrl(packageName, (error, repoUrl) => {",108,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/lib/develop.js,file,111,111,2020-05-18T14:51:34-04:00,Static Analysis,a8eb318301dc105f6b242fce363923637060c403e8c9c7b93b984891497b7744,192272,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Found fs.existsSync with non literal argument at index 0,plain-text,Atom x64/resources/app/apm/lib/develop.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\develop.js,file,26,13,111,111,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.96763015,1
721,Static Analysis,2020-05-18T14:51:00-04:00,79647,2020-05-18T14:54:28-04:00,medium,false-positive,"request = require('./request');

  module.exports = Develop = (function() {
    class Develop extends Command {
      constructor() {
        super();",23,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/develop.js,file,26,26,2020-05-18T14:51:34-04:00,Static Analysis,62173c3357301b64bcb7cb49ad65b9eeb8aa24356212b93fe0fe0166d3218ce7,192265,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'module' is not defined.,plain-text,Atom x64/resources/app/apm/lib/develop.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\develop.js,file,9,3,26,26,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.068299174,0
722,Static Analysis,2020-05-18T14:51:00-04:00,79648,2020-05-18T14:54:28-04:00,high,escalated,"if (error != null) {
            return callback(`Request for package information failed: ${error.message}`);
          } else if (response.statusCode === 200) {
            if (repositoryUrl = body.repository.url) {
              return callback(null, repositoryUrl);
            } else {
              return callback(`No repository URL found for package: ${packageName}`);",49,,,,CWE-697: Incorrect Comparison,http://cwevis.org/browse/697,697,Atom x64/resources/app/apm/lib/develop.js,file,52,52,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-c271f2bb931810eef633f7c736d1dd934fbd6ed5f62ac8d8ea39ade811190622,Comparison,,,,,escalated,0.9110538,1
723,Static Analysis,2020-05-18T14:51:00-04:00,79651,2020-05-18T14:54:28-04:00,medium,false-positive,"config = require('./apm');

  Command = require('./command');

  Install = require('./install');",13,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/develop.js,file,16,16,2020-05-18T14:51:34-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192260,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/develop.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\develop.js,file,20,13,16,16,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
724,Static Analysis,2020-05-18T14:51:00-04:00,79652,2020-05-18T14:54:28-04:00,high,escalated,"parseOptions(argv) {
        var options;
        options = yargs(argv).wrap(Math.min(100, yargs.terminalWidth()));
        options.usage(""Usage: apm develop <package_name> [<directory>]\n\nClone the given package's Git repository to the directory specified,\ninstall its dependencies, and link it for development to\n~/.atom/dev/packages/<package_name>.\n\nIf no directory is specified then the repository is cloned to\n~/github/<package_name>. The default folder to clone packages into can\nbe overridden using the ATOM_REPOS_HOME environment variable.\n\nOnce this command completes you can open a dev window from atom using\ncmd-shift-o to run the package out of the newly cloned repository."");
        return options.alias('h', 'help').describe('help', 'Print this usage message');
      }",34,,,,CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'),http://cwevis.org/browse/79,79,Atom x64/resources/app/apm/lib/develop.js,file,37,37,2020-05-18T14:51:34-04:00,Static Analysis,b4414dd3b1087806bb332146e753f5917a3aec259e29c568ca289f9ab428d0d4,192266,high,,,CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS),http://cwevis.org/browse/80,80,HTML passed in to function 'options.usage',plain-text,Atom x64/resources/app/apm/lib/develop.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\develop.js,file,22,9,37,37,xss,no-mixed-html,ESLint,ESLINT-XSS-no-mixed-html,No mixed html,"Wanted a way to catch XSS issues in code before they end up in production.

## Rule Details

This rule aims to catch as many XSS issues by examining the code as possible.
The rule checks for mixed html/non-html content, unescaped input, etc.

The following patterns are considered warnings:

```js

// Mixed content
var x = '<div>' + input + '</div>';
$node.html( '<div>' + input + '</div>' );

// Unsafe container names.
var html = input;
var text = htmlInput;
displayValue( htmlInput );

// Checking certain expression parameters that might end up in the variables.
var htmlItems = [ input1, input2 ].join();
var textItems = [ '<div>', input, '</div>' ].join();
var tag = isNumbered ? '<ol>' : '<ul>';

// Checking function return values.
var createHtml = function( item ) { return item.name; }
var createBox = function( item ) { return '<div>' + encode( item ) + '</div>' }

```

The following patterns are not warnings:

```js

// Proper encoding
var html = '<div>' + encode( input ) + '</div>';
$node.html( '<div>' + encode( input ) + '</div>' );

// Proper container names
var html = '<img src=""happy.png"">';
var text = textbox.value;

```

## When Not To Use It

If you are creating a Node.js application that doesn't output any HTML, you can
safely disable this rule.

## Further Reading

- [XSS Prevention CHeat Sheet - OWASP](https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet)",markdown,rule-396ebe8bb0c3dc5d4eb2b5368a97688fdb0f2587416453645c3d06db2b216479,Cross-site Scripting (XSS),"Cross-site scripting (XSS) vulnerabilities occur when:
1. Untrusted data enters a web application, typically from a web request.
2. The web application dynamically generates a web page that contains this untrusted data.
3. During page generation, the application does not prevent the data from containing content that is executable by a web browser, such as JavaScript, HTML tags, HTML attributes, mouse events, Flash, ActiveX, etc.
4. A victim visits the generated web page through a web browser, which contains malicious script that was injected using the untrusted data.
5. Since the script comes from a web page that was sent by the web server, the victim's web browser executes the malicious script in the context of the web server's domain.
6. This effectively violates the intention of the web browser's same-origin policy, which states that scripts in one domain should not be able to access resources or run code in a different domain.
There are three main kinds of XSS:

*Reflected XSS (or Non-Persistent)*

The server reads data directly from the HTTP request and reflects it back in the HTTP response. Reflected XSS exploits occur when an attacker causes a victim to supply dangerous content to a vulnerable web application, which is then reflected back to the victim and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to the victim. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces a victim to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the victim, the content is executed by the victim's browser.

*Stored XSS (or Persistent)*

The application stores dangerous data in a database, message forum, visitor log, or other trusted data store. At a later time, the dangerous data is subsequently read back into the application and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. For example, the attacker might inject XSS into a log message, which might not be handled properly when an administrator views the logs.

*DOM-Based XSS*

In DOM-based XSS, the client performs the injection of XSS into the page; in the other types, the server performs the injection. DOM-based XSS generally involves server-controlled, trusted script that is sent to the client, such as Javascript that performs sanity checks on a form before the user submits it. If the server-supplied script processes user-supplied data and then injects it back into the web page (such as with dynamic HTML), then DOM-based XSS is possible.

Once the malicious script is injected, the attacker can perform a variety of malicious activities. The attacker could transfer private information, such as cookies that may include session information, from the victim's machine to the attacker. The attacker could send malicious requests to a web site on behalf of the victim, which could be especially dangerous to the site if the victim has administrator privileges to manage that site. Phishing attacks could be used to emulate trusted web sites and trick the victim into entering a password, allowing the attacker to compromise the victim's account on that web site. Finally, the script could exploit a vulnerability in the web browser itself possibly taking over the victim's machine, sometimes referred to as ""drive-by hacking.""

In many cases, the attack can be launched without the victim even being aware of it. Even with careful users, attackers frequently use a variety of methods to encode the malicious portion of the attack, such as URL encoding or Unicode, so the request looks less suspicious.

**Guidance**

To remedy XSS vulnerabilities, it is important to never use untrusted or unfiltered data within the code of a HTML page.

Untrusted data can originate not only form the client but potentially a third party or previously uploaded file etc.

Filtering of untrusted data typically involves converting special characters to their HTML entity encoded counterparts (however, other methods do exist, see references).

These special characters include:

* `&`
* `<`
* `>`
* `""`
* `'`
* `/`

An example of HTML entity encoding is converting `<` to `&lt;`.

Although it is possible to filter untrusted input, there are five locations within an HTML page where untrusted input (even if it has been filtered) should never be placed:

1. Directly in a script.
2. Inside an HTML comment.
3. In an attribute name.
4. In a tag name.
5. Directly in CSS.

Each of these locations have their own form of escaping and filtering.

Because many browsers attempt to implement XSS protection, any manual verification of this finding should be conducted using multiple different browsers and browser
versions.

**References**

- [WASC](http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting)
- [Secunia](http://secunia.com/advisories/9716/)
- [OWASP XSS Prevention Cheat Sheet](https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet)
- [OWASP DOM Based XSS](https://www.owasp.org/index.php/DOM_Based_XSS)
- [OWASP DOM Based XSS Prevention Cheat Sheet](https://www.owasp.org/index.php/DOM_based_XSS_Prevention_Cheat_Sheet)",markdown,,,escalated,0.8266207,1
725,Static Analysis,2020-05-18T14:51:00-04:00,79656,2020-05-18T14:54:28-04:00,medium,false-positive,"}
          args = ['clone', '--recursive', repoUrl, packageDirectory];
          if (!options.argv.json) {
            process.stdout.write(`Cloning ${repoUrl} `);
          }
          git.addGitToEnv(process.env);
          return this.spawn(command, args, (...args) => {",69,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/develop.js,file,72,72,2020-05-18T14:51:34-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,192269,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/develop.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\develop.js,file,20,13,72,72,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
726,Static Analysis,2020-05-18T14:51:00-04:00,79659,2020-05-18T14:54:28-04:00,medium,false-positive,"git = require('./git');

  Link = require('./link');

  request = require('./request');",19,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/develop.js,file,22,22,2020-05-18T14:51:34-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192263,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/develop.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\develop.js,file,17,10,22,22,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
727,Static Analysis,2020-05-18T14:51:00-04:00,79663,2020-05-18T14:54:28-04:00,high,escalated,,,,,,CWE-693: Protection Mechanism Failure,http://cwevis.org/browse/693,693,Squirrel/NativeMethods/UpdateResource,logical,,,2020-05-18T14:51:57-04:00,Static Analysis,5ef960fdf76e8654c75a37bfcf2046c170e0bad00bf5137d7f036d0b281c01bb,200497,high,,,CWE-693: Protection Mechanism Failure,http://cwevis.org/browse/693,693,"Marshaling information for string types is missing and what is required may be different from what you expected the default to be. Add [DllImport CharSet=] to the method or [MarshalAs] on the parameter(s) Parameter 'pType', of type 'String', does not have [MarshalAs] attribute, yet no [DllImport CharSet=] is set for the method 'UpdateResource'.",plain-text,Squirrel/NativeMethods/UpdateResource,Squirrel/NativeMethods/UpdateResource,logical,,,,,,MarshalStringsInPInvokeDeclarationsRule,Gendarme,GEND-MarshalStringsInPInvokeDeclarationsRule,Marshal Strings In PInvoke Declarations ,"This rule will fire if a P/Invoke method has System.String or
System.Text.StringBuilder arguments, and the DllImportAttribute does not
specify the **CharSet**, and the string arguments are not decorated with
**[MarshalAs]**. This is important because the defaults are different on
the various platforms. On Mono the default is to always use utf-8. On
.NET the default is to use the ANSI CharSet which is the native encoding
and will typically be some variant of ASCII or something like Shift-JIS.
On Compact .NET the default is utf-16.

**Bad** example:


```csharp
[DllImport (""coredll"")]
static extern int SHCreateShortcut (StringBuilder szShortcut, StringBuilder szTarget);
```
**Good** examples:


```csharp
[DllImport (""coredll"", CharSet = CharSet.Auto)]
static extern int SHCreateShortcut (StringBuilder szShortcut, StringBuilder szTarget);

[DllImport (""coredll"")]
static extern int SHCreateShortcut ([MarshalAs (UnmanagedType.LPTStr)] StringBuilder szShortcut,
[MarshalAs (UnmanagedType.LPTStr)] StringBuilder szTarget);
```",markdown,GEND-MarshalStringsInPInvokeDeclarationsRule,Marshal Strings In PInvoke Declarations ,"This rule will fire if a P/Invoke method has System.String or
System.Text.StringBuilder arguments, and the DllImportAttribute does not
specify the **CharSet**, and the string arguments are not decorated with
**[MarshalAs]**. This is important because the defaults are different on
the various platforms. On Mono the default is to always use utf-8. On
.NET the default is to use the ANSI CharSet which is the native encoding
and will typically be some variant of ASCII or something like Shift-JIS.
On Compact .NET the default is utf-16.

**Bad** example:


```csharp
[DllImport (""coredll"")]
static extern int SHCreateShortcut (StringBuilder szShortcut, StringBuilder szTarget);
```
**Good** examples:


```csharp
[DllImport (""coredll"", CharSet = CharSet.Auto)]
static extern int SHCreateShortcut (StringBuilder szShortcut, StringBuilder szTarget);

[DllImport (""coredll"")]
static extern int SHCreateShortcut ([MarshalAs (UnmanagedType.LPTStr)] StringBuilder szShortcut,
[MarshalAs (UnmanagedType.LPTStr)] StringBuilder szTarget);
```",markdown,,,escalated,0.594039,1
728,Static Analysis,2020-05-18T14:51:00-04:00,79676,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/Alm/Cli/Installer/DeployElevated,logical,,,2020-05-18T14:52:14-04:00,Static Analysis,f6e7a27beb47b13d9eb4ba4a378ee22d05730082073a972429fe831f72cb6c95,202954,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,This disposable local is not guaranteed to be disposed of before the method returns. Use a 'using' statement or surround the local's usage with a try/finally block. Local of type 'Process' is not disposed of (at least not locally).,plain-text,Microsoft/Alm/Cli/Installer/DeployElevated,Microsoft/Alm/Cli/Installer/DeployElevated,logical,,,,,,EnsureLocalDisposalRule,Gendarme,GEND-EnsureLocalDisposalRule,Ensure Local Disposal ,"This rule checks that disposable locals are always disposed of before
the method returns. Use a 'using' statement (or a try/finally block) to
guarantee local disposal even in the event an unhandled exception
occurs.

**Bad** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    DecodeHeader (stream);
    if (!DecodedHeader.HasContent) {
        return;
    }
    DecodeContent (stream);
    stream.Dispose ();
}
```
**Good** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        DecodeHeader (stream);
        if (!DecodedHeader.HasContent) {
            return;
        }
        DecodeContent (stream);
    }
}
```
**Bad** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    Decode (stream);
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
    stream.Dispose ();
}
```
**Good** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        Decode (stream);
    }
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.98242956,1
729,Static Analysis,2020-05-18T14:51:00-04:00,79680,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-388: 7PK - Errors,http://cwevis.org/browse/388,388,SharpCompress/Readers/AbstractReader/SharpCompress/Readers/IReaderExtractionListener/FireEntryExtractionProgress,logical,,,2020-05-18T14:51:56-04:00,Static Analysis,f73cef352a0b2bf1d0cc5310f027978a051db5e56968ba97879cbcb8e22239bf,199969,medium,,,CWE-754: Improper Check for Unusual or Exceptional Conditions,http://cwevis.org/browse/754,754,"Every delegate passed to native code must include an exception block which spans the entire method and has a catch all block. Surround the entire method body with a try/catch block. An exception occurred while verifying this method. This failure can probably be ignored, it's most likely due to an uncommon code sequence in the method the rule didn't understand. Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index",plain-text,SharpCompress/Readers/AbstractReader/SharpCompress/Readers/IReaderExtractionListener/FireEntryExtractionProgress,SharpCompress/Readers/AbstractReader/SharpCompress/Readers/IReaderExtractionListener/FireEntryExtractionProgress,logical,,,,,,DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRule,Gendarme,GEND-DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRule,Delegates Passed To Native Code Must Include Exception Handling ,"Every delegate which is passed to native code must include an exception
block which spans the entire method and has a catch all handler.

**Bad** example:


```csharp
public void NativeCallback ()
{
    Console.WriteLine (""{0}"", 1);
}
```
**Good** example:


```csharp
public void NativeCallback ()
{
    try {
        Console.WriteLine (""{0}"", 1);
    }
    catch {
    }
}
```",markdown,rule-e3f0972459f483bc18a68eed953b03a6c7e7fb7e495bc2047dd97eaba40f966b,Error Handling,,,,,escalated,0.88051474,1
730,Static Analysis,2020-05-18T14:51:00-04:00,79735,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Common/EntryStream/SkipEntry,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201180,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Common/EntryStream/SkipEntry,SharpCompress/Common/EntryStream/SkipEntry,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
731,Static Analysis,2020-05-18T14:51:00-04:00,79749,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-388: 7PK - Errors,http://cwevis.org/browse/388,388,Microsoft/Alm/Cli/OperationArguments/get_Password,logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-e3f0972459f483bc18a68eed953b03a6c7e7fb7e495bc2047dd97eaba40f966b,Error Handling,,,,,escalated,0.8818622,1
732,Static Analysis,2020-05-18T14:51:00-04:00,79804,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-465: Pointer Issues,http://cwevis.org/browse/465,465,Mono/Options/OptionSet/Parse,logical,,,2020-05-18T14:51:55-04:00,Static Analysis,a5fceea52596662e61c66f7abfad9036937d4f22e1a53681e48ab77fa50bb893,199793,medium,,,CWE-476: NULL Pointer Dereference,http://cwevis.org/browse/476,476,A visible method does not check its parameter(s) for null values. Since the caller is unknown you should always verify all of your parameters to protect yourself.,plain-text,Mono/Options/OptionSet/Parse,Mono/Options/OptionSet/Parse,logical,,,,,,CheckParametersNullityInVisibleMethodsRule,Gendarme,GEND-CheckParametersNullityInVisibleMethodsRule,Check Parameters Nullity In Visible Methods ,"This rule checks if all nullable parameters of visible methods are
compared with **null** before they get used. This reduce the likelyhood
of the runtime throwing a **NullReferenceException**.

**Bad** example:


```csharp
[DllImport (""message"")]
internal static extern byte [] Parse (string s, int length);

public bool TryParse (string s, out Message m)
{
    // is 's' is null then 's.Length' will throw a NullReferenceException
    // which a TryParse method should never do
    byte [] data = Parse (s, s.Length);
    if (data == null) {
        m = null;
        return false;
    }
    m = new Message (data);
    return true;
}
```
**Good** example:


```csharp
[DllImport (""message"")]
internal static extern byte [] Parse (string s, int length);

public bool TryParse (string s, out Message m)
{
    if (s == null) {
        m = null;
        return false;
    }
    byte [] data = Parse (s, s.Length);
    if (data == null) {
        m = null;
        return false;
    }
    m = new Message (data);
    return true;
}
```",markdown,rule-0dd0e028a5ce327b29cd3ffa9ef62c97353c7155364a9a4b89933187ee675fef,Invalid Pointer,,,,,escalated,0.56592375,1
733,Static Analysis,2020-05-18T14:51:00-04:00,79806,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Compressors/BZip2/BZip2Stream/Write,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201174,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Compressors/BZip2/BZip2Stream/Write,SharpCompress/Compressors/BZip2/BZip2Stream/Write,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
734,Static Analysis,2020-05-18T14:51:00-04:00,79818,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Squirrel/UpdateManager/(self),logical,,,2020-05-18T14:51:56-04:00,Static Analysis,624c7c16eb7d436c69d014c1147d4cb3d5fab9ac0b96926adb1c9c156399e04f,199994,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,This type contains disposable field(s) which aren't disposed. Ensure that every disposable field(s) is correctly disposed. Since updateLock is Disposable Dispose() should call updateLock.Dispose(),plain-text,Squirrel/UpdateManager/(self),Squirrel/UpdateManager/(self),logical,,,,,,DisposableFieldsShouldBeDisposedRule,Gendarme,GEND-DisposableFieldsShouldBeDisposedRule,Disposable Fields Should Be Disposed ,"The rule inspects all fields for disposable types and, if
**System.IDisposable** is implemented, checks that the type's
**Dispose** method does indeed call **Dispose** on all disposable
fields.

**Bad** example:


```csharp
class DoesNotDisposeMember : IDisposable {
    byte[] buffer;
    IDisposable field;

    public void Dispose ()
    {
        buffer = null;
        // field is not disposed
    }
}
```
**Good** example:


```csharp
class DisposePattern : IDisposable {
    byte[] buffer;
    IDisposable field;
    bool disposed;

    public void Dispose ()
    {
        Dispose (true);
    }

    private void Dispose (bool disposing)
    {
        if (!disposed) {
            if (disposing) {
                field.Dispose ();
            }
            buffer = null;
            disposed = true;
        }
    }
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.981808,1
735,Static Analysis,2020-05-18T14:51:00-04:00,79894,2020-05-18T14:54:28-04:00,high,escalated,,,,,,CWE-695: Use of Low-Level Functionality,http://cwevis.org/browse/695,695,DeltaCompressionDotNet/MsDelta/DeltaInput/(self),logical,,,2020-05-18T14:51:57-04:00,Static Analysis,3ac9036736202c636e5a647bb8073bf5337a353e654d9216f8af1cf9293e2f3b,200965,high,,,CWE-695: Use of Low-Level Functionality,http://cwevis.org/browse/695,695,The type uses System.IntPtr or System.UIntPtr instead of System.Runtime.InteropServices.SafeHandle. Consider changing the code to use SafeHandle.,plain-text,DeltaCompressionDotNet/MsDelta/DeltaInput/(self),DeltaCompressionDotNet/MsDelta/DeltaInput/(self),logical,,,,,,PreferSafeHandleRule,Gendarme,GEND-PreferSafeHandleRule,Prefer Safe Handle ,"In general it is best to interop with native code using
**System.Runtime.InteropServices.SafeHandle** instead of
**System.IntPtr** or **System.UIntPtr** because:

SafeHandles are type safe.
SafeHandles are guaranteed to be disposed of during exceptional
conditions like a thread aborting unexpectedly or a stack overflow.
SafeHandles are not vulnerable to reycle attacks.
You don't need to write a finalizer which can be tricky to do because
they execute within their own thread, may execute on partially
constructed objects, and normally tear down the application if you allow
an exception to escape from them.


 **Bad** example:


```csharp
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable.
public sealed class Database {
    ~Database ()
    {
        // This will execute even if the ctor throws so it is important to check
        // to see if the fields are initialized.
        if (m_database != IntPtr.Zero) {
            NativeMethods.sqlite3_close (m_database);
        }
    }

    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        int err = NativeMethods.sqlite3_open_v2 (path, out m_database, flags, IntPtr.Zero);
        // handle errors
    }

    // exec and query methods would go here

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (IntPtr db);

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private IntPtr m_database;
}
```
**Good** example:


```csharp
using System.Runtime.ConstrainedExecution;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable, but you do not need to implement a finalizer because
// SafeHandle will take care of the cleanup.
internal sealed class Database {
    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        m_database = new SqlitePtr (path, flags);
    }

    // exec and query methods would go here

    // This corresponds to a native sqlite3*.
    [SecurityPermission (SecurityAction.InheritanceDemand, UnmanagedCode = true)]
    [SecurityPermission (SecurityAction.Demand, UnmanagedCode = true)]
    private sealed class SqlitePtr : SafeHandle {
        public SqlitePtr (string path, NativeMethods.OpenFlags flags) : base (IntPtr.Zero, true)
        {
            int err = NativeMethods.sqlite3_open_v2 (path, out handle, flags, IntPtr.Zero);
            // handle errors
        }

        public override bool IsInvalid {
            get {
                return (handle == IntPtr.Zero);
            }
        }

        // This will not be called if the handle is invalid. Note that this method should not throw.
        [ReliabilityContract (Consistency.WillNotCorruptState, Cer.MayFail)]
        protected override bool ReleaseHandle ()
        {
            NativeMethods.sqlite3_close (this);
            return true;
        }
    }

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (SqlitePtr db);

        // Open must take an IntPtr but all other methods take a type safe SqlitePtr.
        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private SqlitePtr m_database;
}
```",markdown,GEND-PreferSafeHandleRule,Prefer Safe Handle ,"In general it is best to interop with native code using
**System.Runtime.InteropServices.SafeHandle** instead of
**System.IntPtr** or **System.UIntPtr** because:

SafeHandles are type safe.
SafeHandles are guaranteed to be disposed of during exceptional
conditions like a thread aborting unexpectedly or a stack overflow.
SafeHandles are not vulnerable to reycle attacks.
You don't need to write a finalizer which can be tricky to do because
they execute within their own thread, may execute on partially
constructed objects, and normally tear down the application if you allow
an exception to escape from them.


 **Bad** example:


```csharp
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable.
public sealed class Database {
    ~Database ()
    {
        // This will execute even if the ctor throws so it is important to check
        // to see if the fields are initialized.
        if (m_database != IntPtr.Zero) {
            NativeMethods.sqlite3_close (m_database);
        }
    }

    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        int err = NativeMethods.sqlite3_open_v2 (path, out m_database, flags, IntPtr.Zero);
        // handle errors
    }

    // exec and query methods would go here

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (IntPtr db);

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private IntPtr m_database;
}
```
**Good** example:


```csharp
using System.Runtime.ConstrainedExecution;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable, but you do not need to implement a finalizer because
// SafeHandle will take care of the cleanup.
internal sealed class Database {
    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        m_database = new SqlitePtr (path, flags);
    }

    // exec and query methods would go here

    // This corresponds to a native sqlite3*.
    [SecurityPermission (SecurityAction.InheritanceDemand, UnmanagedCode = true)]
    [SecurityPermission (SecurityAction.Demand, UnmanagedCode = true)]
    private sealed class SqlitePtr : SafeHandle {
        public SqlitePtr (string path, NativeMethods.OpenFlags flags) : base (IntPtr.Zero, true)
        {
            int err = NativeMethods.sqlite3_open_v2 (path, out handle, flags, IntPtr.Zero);
            // handle errors
        }

        public override bool IsInvalid {
            get {
                return (handle == IntPtr.Zero);
            }
        }

        // This will not be called if the handle is invalid. Note that this method should not throw.
        [ReliabilityContract (Consistency.WillNotCorruptState, Cer.MayFail)]
        protected override bool ReleaseHandle ()
        {
            NativeMethods.sqlite3_close (this);
            return true;
        }
    }

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (SqlitePtr db);

        // Open must take an IntPtr but all other methods take a type safe SqlitePtr.
        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private SqlitePtr m_database;
}
```",markdown,,,escalated,0.83183736,1
736,Static Analysis,2020-05-18T14:51:00-04:00,79896,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Common/Rar/RarCrcBinaryReader/GetCrc,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201188,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Common/Rar/RarCrcBinaryReader/GetCrc,SharpCompress/Common/Rar/RarCrcBinaryReader/GetCrc,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
737,Static Analysis,2020-05-18T14:51:00-04:00,79900,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/Alm/Authentication/Git/Trace/AddListener,logical,,,2020-05-18T14:52:00-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,202464,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Microsoft/Alm/Authentication/Git/Trace/AddListener,Microsoft/Alm/Authentication/Git/Trace/AddListener,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
738,Static Analysis,2020-05-18T14:51:00-04:00,79981,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/Native/RSACng/set_SignatureSaltBytes,logical,,,2020-05-18T14:52:00-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,202227,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/Native/RSACng/set_SignatureSaltBytes,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/Native/RSACng/set_SignatureSaltBytes,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
739,Static Analysis,2020-05-18T14:51:00-04:00,79987,2020-05-18T14:54:28-04:00,high,escalated,,,,,,CWE-695: Use of Low-Level Functionality,http://cwevis.org/browse/695,695,Squirrel/NOTIFYITEM/(self),logical,,,2020-05-18T14:51:57-04:00,Static Analysis,3ac9036736202c636e5a647bb8073bf5337a353e654d9216f8af1cf9293e2f3b,200967,high,,,CWE-695: Use of Low-Level Functionality,http://cwevis.org/browse/695,695,The type uses System.IntPtr or System.UIntPtr instead of System.Runtime.InteropServices.SafeHandle. Consider changing the code to use SafeHandle.,plain-text,Squirrel/NOTIFYITEM/(self),Squirrel/NOTIFYITEM/(self),logical,,,,,,PreferSafeHandleRule,Gendarme,GEND-PreferSafeHandleRule,Prefer Safe Handle ,"In general it is best to interop with native code using
**System.Runtime.InteropServices.SafeHandle** instead of
**System.IntPtr** or **System.UIntPtr** because:

SafeHandles are type safe.
SafeHandles are guaranteed to be disposed of during exceptional
conditions like a thread aborting unexpectedly or a stack overflow.
SafeHandles are not vulnerable to reycle attacks.
You don't need to write a finalizer which can be tricky to do because
they execute within their own thread, may execute on partially
constructed objects, and normally tear down the application if you allow
an exception to escape from them.


 **Bad** example:


```csharp
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable.
public sealed class Database {
    ~Database ()
    {
        // This will execute even if the ctor throws so it is important to check
        // to see if the fields are initialized.
        if (m_database != IntPtr.Zero) {
            NativeMethods.sqlite3_close (m_database);
        }
    }

    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        int err = NativeMethods.sqlite3_open_v2 (path, out m_database, flags, IntPtr.Zero);
        // handle errors
    }

    // exec and query methods would go here

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (IntPtr db);

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private IntPtr m_database;
}
```
**Good** example:


```csharp
using System.Runtime.ConstrainedExecution;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable, but you do not need to implement a finalizer because
// SafeHandle will take care of the cleanup.
internal sealed class Database {
    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        m_database = new SqlitePtr (path, flags);
    }

    // exec and query methods would go here

    // This corresponds to a native sqlite3*.
    [SecurityPermission (SecurityAction.InheritanceDemand, UnmanagedCode = true)]
    [SecurityPermission (SecurityAction.Demand, UnmanagedCode = true)]
    private sealed class SqlitePtr : SafeHandle {
        public SqlitePtr (string path, NativeMethods.OpenFlags flags) : base (IntPtr.Zero, true)
        {
            int err = NativeMethods.sqlite3_open_v2 (path, out handle, flags, IntPtr.Zero);
            // handle errors
        }

        public override bool IsInvalid {
            get {
                return (handle == IntPtr.Zero);
            }
        }

        // This will not be called if the handle is invalid. Note that this method should not throw.
        [ReliabilityContract (Consistency.WillNotCorruptState, Cer.MayFail)]
        protected override bool ReleaseHandle ()
        {
            NativeMethods.sqlite3_close (this);
            return true;
        }
    }

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (SqlitePtr db);

        // Open must take an IntPtr but all other methods take a type safe SqlitePtr.
        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private SqlitePtr m_database;
}
```",markdown,GEND-PreferSafeHandleRule,Prefer Safe Handle ,"In general it is best to interop with native code using
**System.Runtime.InteropServices.SafeHandle** instead of
**System.IntPtr** or **System.UIntPtr** because:

SafeHandles are type safe.
SafeHandles are guaranteed to be disposed of during exceptional
conditions like a thread aborting unexpectedly or a stack overflow.
SafeHandles are not vulnerable to reycle attacks.
You don't need to write a finalizer which can be tricky to do because
they execute within their own thread, may execute on partially
constructed objects, and normally tear down the application if you allow
an exception to escape from them.


 **Bad** example:


```csharp
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable.
public sealed class Database {
    ~Database ()
    {
        // This will execute even if the ctor throws so it is important to check
        // to see if the fields are initialized.
        if (m_database != IntPtr.Zero) {
            NativeMethods.sqlite3_close (m_database);
        }
    }

    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        int err = NativeMethods.sqlite3_open_v2 (path, out m_database, flags, IntPtr.Zero);
        // handle errors
    }

    // exec and query methods would go here

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (IntPtr db);

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private IntPtr m_database;
}
```
**Good** example:


```csharp
using System.Runtime.ConstrainedExecution;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable, but you do not need to implement a finalizer because
// SafeHandle will take care of the cleanup.
internal sealed class Database {
    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        m_database = new SqlitePtr (path, flags);
    }

    // exec and query methods would go here

    // This corresponds to a native sqlite3*.
    [SecurityPermission (SecurityAction.InheritanceDemand, UnmanagedCode = true)]
    [SecurityPermission (SecurityAction.Demand, UnmanagedCode = true)]
    private sealed class SqlitePtr : SafeHandle {
        public SqlitePtr (string path, NativeMethods.OpenFlags flags) : base (IntPtr.Zero, true)
        {
            int err = NativeMethods.sqlite3_open_v2 (path, out handle, flags, IntPtr.Zero);
            // handle errors
        }

        public override bool IsInvalid {
            get {
                return (handle == IntPtr.Zero);
            }
        }

        // This will not be called if the handle is invalid. Note that this method should not throw.
        [ReliabilityContract (Consistency.WillNotCorruptState, Cer.MayFail)]
        protected override bool ReleaseHandle ()
        {
            NativeMethods.sqlite3_close (this);
            return true;
        }
    }

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (SqlitePtr db);

        // Open must take an IntPtr but all other methods take a type safe SqlitePtr.
        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private SqlitePtr m_database;
}
```",markdown,,,escalated,0.8318374,1
740,Static Analysis,2020-05-18T14:51:00-04:00,80058,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Compressors/Filters/Filter/Write,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201163,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Compressors/Filters/Filter/Write,SharpCompress/Compressors/Filters/Filter/Write,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
741,Static Analysis,2020-05-18T14:51:00-04:00,80076,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/Web/XmlTransform/XmlElementContext/ExistedInOriginal,logical,,,2020-05-18T14:51:56-04:00,Static Analysis,aaaa55b988261c7c089c58a15199d965b60e120bc65373b1aacde2cbcb68d1f7,200190,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,This disposable local is not guaranteed to be disposed of before the method returns. Use a 'using' statement or surround the local's usage with a try/finally block. Local of type 'XmlNodeList' is not disposed of (at least not locally).,plain-text,Microsoft/Web/XmlTransform/XmlElementContext/ExistedInOriginal,Microsoft/Web/XmlTransform/XmlElementContext/ExistedInOriginal,logical,,,,,,EnsureLocalDisposalRule,Gendarme,GEND-EnsureLocalDisposalRule,Ensure Local Disposal ,"This rule checks that disposable locals are always disposed of before
the method returns. Use a 'using' statement (or a try/finally block) to
guarantee local disposal even in the event an unhandled exception
occurs.

**Bad** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    DecodeHeader (stream);
    if (!DecodedHeader.HasContent) {
        return;
    }
    DecodeContent (stream);
    stream.Dispose ();
}
```
**Good** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        DecodeHeader (stream);
        if (!DecodedHeader.HasContent) {
            return;
        }
        DecodeContent (stream);
    }
}
```
**Bad** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    Decode (stream);
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
    stream.Dispose ();
}
```
**Good** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        Decode (stream);
    }
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.9804121,1
742,Static Analysis,2020-05-18T14:51:00-04:00,80176,2020-05-18T14:54:28-04:00,high,escalated,,,,,,CWE-693: Protection Mechanism Failure,http://cwevis.org/browse/693,693,Squirrel/NativeMethods/GetFileVersionInfoSize,logical,,,2020-05-18T14:51:57-04:00,Static Analysis,8151f88e4132039e16327feb41ed0dffbf4a276ca35f70b8453e9b41f2527020,200493,high,,,CWE-693: Protection Mechanism Failure,http://cwevis.org/browse/693,693,"Marshaling information for string types is missing and what is required may be different from what you expected the default to be. Add [DllImport CharSet=] to the method or [MarshalAs] on the parameter(s) Parameter 'lpszFileName', of type 'String', does not have [MarshalAs] attribute, yet no [DllImport CharSet=] is set for the method 'GetFileVersionInfoSize'.",plain-text,Squirrel/NativeMethods/GetFileVersionInfoSize,Squirrel/NativeMethods/GetFileVersionInfoSize,logical,,,,,,MarshalStringsInPInvokeDeclarationsRule,Gendarme,GEND-MarshalStringsInPInvokeDeclarationsRule,Marshal Strings In PInvoke Declarations ,"This rule will fire if a P/Invoke method has System.String or
System.Text.StringBuilder arguments, and the DllImportAttribute does not
specify the **CharSet**, and the string arguments are not decorated with
**[MarshalAs]**. This is important because the defaults are different on
the various platforms. On Mono the default is to always use utf-8. On
.NET the default is to use the ANSI CharSet which is the native encoding
and will typically be some variant of ASCII or something like Shift-JIS.
On Compact .NET the default is utf-16.

**Bad** example:


```csharp
[DllImport (""coredll"")]
static extern int SHCreateShortcut (StringBuilder szShortcut, StringBuilder szTarget);
```
**Good** examples:


```csharp
[DllImport (""coredll"", CharSet = CharSet.Auto)]
static extern int SHCreateShortcut (StringBuilder szShortcut, StringBuilder szTarget);

[DllImport (""coredll"")]
static extern int SHCreateShortcut ([MarshalAs (UnmanagedType.LPTStr)] StringBuilder szShortcut,
[MarshalAs (UnmanagedType.LPTStr)] StringBuilder szTarget);
```",markdown,GEND-MarshalStringsInPInvokeDeclarationsRule,Marshal Strings In PInvoke Declarations ,"This rule will fire if a P/Invoke method has System.String or
System.Text.StringBuilder arguments, and the DllImportAttribute does not
specify the **CharSet**, and the string arguments are not decorated with
**[MarshalAs]**. This is important because the defaults are different on
the various platforms. On Mono the default is to always use utf-8. On
.NET the default is to use the ANSI CharSet which is the native encoding
and will typically be some variant of ASCII or something like Shift-JIS.
On Compact .NET the default is utf-16.

**Bad** example:


```csharp
[DllImport (""coredll"")]
static extern int SHCreateShortcut (StringBuilder szShortcut, StringBuilder szTarget);
```
**Good** examples:


```csharp
[DllImport (""coredll"", CharSet = CharSet.Auto)]
static extern int SHCreateShortcut (StringBuilder szShortcut, StringBuilder szTarget);

[DllImport (""coredll"")]
static extern int SHCreateShortcut ([MarshalAs (UnmanagedType.LPTStr)] StringBuilder szShortcut,
[MarshalAs (UnmanagedType.LPTStr)] StringBuilder szTarget);
```",markdown,,,escalated,0.5935113,1
743,Static Analysis,2020-05-18T14:51:00-04:00,80301,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Compressors/LZMA/LzmaStream/Read,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201154,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Compressors/LZMA/LzmaStream/Read,SharpCompress/Compressors/LZMA/LzmaStream/Read,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
744,Static Analysis,2020-05-18T14:51:00-04:00,80505,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/Web/XmlTransform/XmlAttributePreservingWriter/WriteFullEndElement,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201223,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Microsoft/Web/XmlTransform/XmlAttributePreservingWriter/WriteFullEndElement,Microsoft/Web/XmlTransform/XmlAttributePreservingWriter/WriteFullEndElement,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
745,Static Analysis,2020-05-18T14:51:00-04:00,80547,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Splat/Locator/cctor,logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.98149246,1
746,Static Analysis,2020-05-18T14:51:00-04:00,80594,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/Web/XmlTransform/XmlAttributePreservingWriter/WriteEndElement,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201221,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Microsoft/Web/XmlTransform/XmlAttributePreservingWriter/WriteEndElement,Microsoft/Web/XmlTransform/XmlAttributePreservingWriter/WriteEndElement,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
747,Static Analysis,2020-05-18T14:51:00-04:00,80667,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-252: Unchecked Return Value,http://cwevis.org/browse/252,252,Atlassian/Bitbucket/Authentication/OAuth/SimpleServer/GetSuccessString,logical,,,2020-05-18T14:51:51-04:00,Static Analysis,1fd1da599815096ae13e9ba21e5b01da775f436f34477025beaf10d670148d77,197879,medium,,,CWE-252: Unchecked Return Value,http://cwevis.org/browse/252,252,The method ignores the result value from a method call. Don't ignore the result value. Unused object of type 'System.Void System.Windows.Application::.ctor()' created.,plain-text,Atlassian/Bitbucket/Authentication/OAuth/SimpleServer/GetSuccessString,Atlassian/Bitbucket/Authentication/OAuth/SimpleServer/GetSuccessString,logical,,,,,,DoNotIgnoreMethodResultRule,Gendarme,GEND-DoNotIgnoreMethodResultRule,Do Not Ignore Method Result ,"This rule fires if a method is called that returns a new instance but
that instance is not used. This is a performance problem because it is
wasteful to create and collect objects which are never actually used. It
may also indicate a logic problem. Note that this rule currently only
checks methods within a small number of System types.

**Bad** example:


```csharp
public void GetName ()
{
    string name = Console.ReadLine ();
    // This is a bug: strings are (mostly) immutable so Trim leaves
    // name untouched and returns a new string.
    name.Trim ();
    Console.WriteLine (""Name: {0}"", name);
}
```
**Good** example:


```csharp
public void GetName ()
{
    string name = Console.ReadLine ();
    name = name.Trim ();
    Console.WriteLine (""Name: {0}"", name);
}
```",markdown,rule-9d96e172832dcb7198b029ec07a771b40eecf1c51bc7afeabe8926e6928c626d,Return Value,"The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.

Two common programmer assumptions are ""this function call can never fail"" and ""it doesn't matter if this function call fails"". If an attacker can force the function to fail or otherwise return a value that is not expected, then the subsequent program logic could lead to a vulnerability, because the software is not in a state that the programmer assumes. For example, if the program calls a function to drop privileges but does not check the return code to ensure that privileges were successfully dropped, then the program will continue to operate with the higher privileges.",markdown,,,escalated,0.96596473,1
748,Static Analysis,2020-05-18T14:51:00-04:00,80713,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Compressors/BZip2/CBZip2InputStream/ReadByte,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201175,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Compressors/BZip2/CBZip2InputStream/ReadByte,SharpCompress/Compressors/BZip2/CBZip2InputStream/ReadByte,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
749,Static Analysis,2020-05-18T14:51:00-04:00,80714,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Common/Zip/PkwareTraditionalCryptoStream/Write,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201183,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Common/Zip/PkwareTraditionalCryptoStream/Write,SharpCompress/Common/Zip/PkwareTraditionalCryptoStream/Write,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
750,Static Analysis,2020-05-18T14:51:00-04:00,80867,2020-05-18T14:54:28-04:00,medium,false-positive,"yargs = require('yargs');

  _ = require('underscore-plus');

  Command = require('./command');",9,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/clean.js,file,12,12,2020-05-18T14:51:33-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192083,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/clean.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\clean.js,file,14,7,12,12,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
751,Static Analysis,2020-05-18T14:51:00-04:00,80869,2020-05-18T14:54:28-04:00,medium,false-positive,"(function() {
  var CSON, Clean, Command, _, async, config, fs, path, yargs;

  path = require('path');

  async = require('async');",1,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/clean.js,file,4,4,2020-05-18T14:51:33-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192067,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/clean.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\clean.js,file,17,10,4,4,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
752,Static Analysis,2020-05-18T14:51:00-04:00,80870,2020-05-18T14:54:28-04:00,medium,false-positive,"_ = require('underscore-plus');

  Command = require('./command');

  config = require('./apm');",11,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/clean.js,file,14,14,2020-05-18T14:51:33-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192086,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/clean.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\clean.js,file,20,13,14,14,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
753,Static Analysis,2020-05-18T14:51:00-04:00,80871,2020-05-18T14:54:28-04:00,medium,false-positive,"async = require('async');

  CSON = require('season');

  yargs = require('yargs');",5,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/clean.js,file,8,8,2020-05-18T14:51:33-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192075,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/clean.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\clean.js,file,17,10,8,8,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
754,Static Analysis,2020-05-18T14:51:00-04:00,80872,2020-05-18T14:54:28-04:00,medium,false-positive,"}

      run(options) {
        process.stdout.write(""Removing extraneous modules "");
        return this.fork(this.atomNpmPath, ['prune'], (...args) => {
          return this.logCommandResults(options.callback, ...args);
        });",32,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/clean.js,file,35,35,2020-05-18T14:51:33-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,192103,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/clean.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\clean.js,file,16,9,35,35,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
755,Static Analysis,2020-05-18T14:51:00-04:00,80873,2020-05-18T14:54:28-04:00,medium,false-positive,"config = require('./apm');

  fs = require('./fs');

  module.exports = Clean = (function() {
    class Clean extends Command {",15,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/clean.js,file,18,18,2020-05-18T14:51:33-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192092,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/clean.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\clean.js,file,15,8,18,18,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
756,Static Analysis,2020-05-18T14:51:00-04:00,80874,2020-05-18T14:54:28-04:00,medium,false-positive,"path = require('path');

  async = require('async');

  CSON = require('season');",3,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/clean.js,file,6,6,2020-05-18T14:51:33-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192070,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/clean.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\clean.js,file,18,11,6,6,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
757,Static Analysis,2020-05-18T14:51:00-04:00,80877,2020-05-18T14:54:28-04:00,medium,false-positive,"fs = require('./fs');

  module.exports = Clean = (function() {
    class Clean extends Command {
      constructor() {
        super();",17,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/clean.js,file,20,20,2020-05-18T14:51:33-04:00,Static Analysis,62173c3357301b64bcb7cb49ad65b9eeb8aa24356212b93fe0fe0166d3218ce7,192096,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'module' is not defined.,plain-text,Atom x64/resources/app/apm/lib/clean.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\clean.js,file,9,3,20,20,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.068299174,0
758,Static Analysis,2020-05-18T14:51:00-04:00,80878,2020-05-18T14:54:28-04:00,medium,false-positive,"Command = require('./command');

  config = require('./apm');

  fs = require('./fs');",13,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/clean.js,file,16,16,2020-05-18T14:51:33-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192088,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/clean.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\clean.js,file,19,12,16,16,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
759,Static Analysis,2020-05-18T14:51:00-04:00,80879,2020-05-18T14:54:28-04:00,medium,false-positive,"class Clean extends Command {
      constructor() {
        super();
        this.atomNpmPath = require.resolve('npm/bin/npm-cli');
      }

      parseOptions(argv) {",21,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/clean.js,file,24,24,2020-05-18T14:51:33-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192100,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/clean.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\clean.js,file,35,28,24,24,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
760,Static Analysis,2020-05-18T14:51:00-04:00,80880,2020-05-18T14:54:28-04:00,medium,false-positive,"CSON = require('season');

  yargs = require('yargs');

  _ = require('underscore-plus');",7,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/clean.js,file,10,10,2020-05-18T14:51:33-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192079,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/clean.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\clean.js,file,18,11,10,10,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
761,Static Analysis,2020-05-18T14:51:00-04:00,80967,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/IdentityModel/Clients/ActiveDirectory/TokenCache/Serialize,logical,,,2020-05-18T14:51:59-04:00,Static Analysis,f4bab9a27203a90e307bcaedd9f80834cf27d8cfc5b4d9c96f388ac6ee1909e1,202006,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,This disposable local is not guaranteed to be disposed of before the method returns. Use a 'using' statement or surround the local's usage with a try/finally block. Local of type 'BinaryWriter' is not disposed of (at least not locally).,plain-text,Microsoft/IdentityModel/Clients/ActiveDirectory/TokenCache/Serialize,Microsoft/IdentityModel/Clients/ActiveDirectory/TokenCache/Serialize,logical,,,,,,EnsureLocalDisposalRule,Gendarme,GEND-EnsureLocalDisposalRule,Ensure Local Disposal ,"This rule checks that disposable locals are always disposed of before
the method returns. Use a 'using' statement (or a try/finally block) to
guarantee local disposal even in the event an unhandled exception
occurs.

**Bad** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    DecodeHeader (stream);
    if (!DecodedHeader.HasContent) {
        return;
    }
    DecodeContent (stream);
    stream.Dispose ();
}
```
**Good** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        DecodeHeader (stream);
        if (!DecodedHeader.HasContent) {
            return;
        }
        DecodeContent (stream);
    }
}
```
**Bad** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    Decode (stream);
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
    stream.Dispose ();
}
```
**Good** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        Decode (stream);
    }
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.98185366,1
762,Static Analysis,2020-05-18T14:51:00-04:00,80972,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Squirrel/UpdateManager/RestartApp,logical,,,2020-05-18T14:51:56-04:00,Static Analysis,990659a019388e4890643c93cad3046863745119ab7b4b291e2e747b1b3d211d,200212,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,This disposable local is not guaranteed to be disposed of before the method returns. Use a 'using' statement or surround the local's usage with a try/finally block. Local of type 'Process' is not disposed of (is this a fluent-like API ?).,plain-text,Squirrel/UpdateManager/RestartApp,Squirrel/UpdateManager/RestartApp,logical,,,,,,EnsureLocalDisposalRule,Gendarme,GEND-EnsureLocalDisposalRule,Ensure Local Disposal ,"This rule checks that disposable locals are always disposed of before
the method returns. Use a 'using' statement (or a try/finally block) to
guarantee local disposal even in the event an unhandled exception
occurs.

**Bad** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    DecodeHeader (stream);
    if (!DecodedHeader.HasContent) {
        return;
    }
    DecodeContent (stream);
    stream.Dispose ();
}
```
**Good** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        DecodeHeader (stream);
        if (!DecodedHeader.HasContent) {
            return;
        }
        DecodeContent (stream);
    }
}
```
**Bad** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    Decode (stream);
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
    stream.Dispose ();
}
```
**Good** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        Decode (stream);
    }
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.9805271,1
763,Static Analysis,2020-05-18T14:51:00-04:00,81100,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/Alm/Cli/Program/PrintHelpMessage,logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.98149246,1
764,Static Analysis,2020-05-18T14:51:00-04:00,81117,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/IO/MarkingBinaryReader/Mark,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201126,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/IO/MarkingBinaryReader/Mark,SharpCompress/IO/MarkingBinaryReader/Mark,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
765,Static Analysis,2020-05-18T14:51:00-04:00,81214,2020-05-18T14:54:28-04:00,medium,false-positive,"fs = require('./fs');

  yargs = require('yargs');

  async = require('async');",5,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/ci.js,file,8,8,2020-05-18T14:51:33-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192022,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/ci.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\ci.js,file,18,11,8,8,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
766,Static Analysis,2020-05-18T14:51:00-04:00,81216,2020-05-18T14:54:28-04:00,high,escalated,"if (options.argv.verbose) {
          installArgs.push('--verbose');
        }
        if (vsArgs = this.getVisualStudioFlags()) {
          installArgs.push(vsArgs);
        }
        fs.makeTreeSync(this.atomDirectory);",44,,,,CWE-697: Incorrect Comparison,http://cwevis.org/browse/697,697,Atom x64/resources/app/apm/lib/ci.js,file,47,47,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-c271f2bb931810eef633f7c736d1dd934fbd6ed5f62ac8d8ea39ade811190622,Comparison,,,,,escalated,0.9110538,1
767,Static Analysis,2020-05-18T14:51:00-04:00,81217,2020-05-18T14:54:28-04:00,medium,false-positive,"config = require('./apm');

  Command = require('./command');

  module.exports = Ci = (function() {
    class Ci extends Command {",13,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/ci.js,file,16,16,2020-05-18T14:51:33-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192027,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/ci.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\ci.js,file,20,13,16,16,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270798,0
768,Static Analysis,2020-05-18T14:51:00-04:00,81218,2020-05-18T14:54:28-04:00,medium,false-positive,"yargs = require('yargs');

  async = require('async');

  _ = require('underscore-plus');",7,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/ci.js,file,10,10,2020-05-18T14:51:33-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192024,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/ci.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\ci.js,file,18,11,10,10,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
769,Static Analysis,2020-05-18T14:51:00-04:00,81219,2020-05-18T14:54:28-04:00,medium,false-positive,"Command = require('./command');

  module.exports = Ci = (function() {
    class Ci extends Command {
      constructor() {
        super();",15,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/ci.js,file,18,18,2020-05-18T14:51:33-04:00,Static Analysis,62173c3357301b64bcb7cb49ad65b9eeb8aa24356212b93fe0fe0166d3218ce7,192028,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'module' is not defined.,plain-text,Atom x64/resources/app/apm/lib/ci.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\ci.js,file,9,3,18,18,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.068299174,0
770,Static Analysis,2020-05-18T14:51:00-04:00,81220,2020-05-18T14:54:28-04:00,medium,false-positive,"var env, installArgs, installOptions, vsArgs;
        process.stdout.write('Installing locked modules');
        if (options.argv.verbose) {
          process.stdout.write('\n');
        } else {
          process.stdout.write(' ');
        }",36,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/ci.js,file,39,39,2020-05-18T14:51:33-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,192039,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/ci.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\ci.js,file,18,11,39,39,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
771,Static Analysis,2020-05-18T14:51:00-04:00,81221,2020-05-18T14:54:28-04:00,medium,false-positive,"_ = require('underscore-plus');

  config = require('./apm');

  Command = require('./command');",11,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/ci.js,file,14,14,2020-05-18T14:51:33-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192026,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/ci.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\ci.js,file,19,12,14,14,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
772,Static Analysis,2020-05-18T14:51:00-04:00,81226,2020-05-18T14:54:28-04:00,medium,false-positive,"super();
        this.atomDirectory = config.getAtomDirectory();
        this.atomNodeDirectory = path.join(this.atomDirectory, '.node-gyp');
        this.atomNpmPath = require.resolve('npm/bin/npm-cli');
      }

      parseOptions(argv) {",21,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/ci.js,file,24,24,2020-05-18T14:51:33-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192029,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/ci.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\ci.js,file,35,28,24,24,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
773,Static Analysis,2020-05-18T14:51:00-04:00,81227,2020-05-18T14:54:28-04:00,medium,false-positive,"path = require('path');

  fs = require('./fs');

  yargs = require('yargs');",3,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/ci.js,file,6,6,2020-05-18T14:51:33-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192020,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/ci.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\ci.js,file,15,8,6,6,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
774,Static Analysis,2020-05-18T14:51:00-04:00,81229,2020-05-18T14:54:28-04:00,medium,false-positive,"(function() {
  var Ci, Command, _, async, config, fs, path, yargs;

  path = require('path');

  fs = require('./fs');",1,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/ci.js,file,4,4,2020-05-18T14:51:33-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192019,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/ci.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\ci.js,file,17,10,4,4,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
775,Static Analysis,2020-05-18T14:51:00-04:00,81230,2020-05-18T14:54:28-04:00,medium,false-positive,"async = require('async');

  _ = require('underscore-plus');

  config = require('./apm');",9,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/ci.js,file,12,12,2020-05-18T14:51:33-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192025,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/ci.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\ci.js,file,14,7,12,12,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
776,Static Analysis,2020-05-18T14:51:00-04:00,81231,2020-05-18T14:54:28-04:00,medium,false-positive,"installArgs.push(vsArgs);
        }
        fs.makeTreeSync(this.atomDirectory);
        env = _.extend({}, process.env, {
          HOME: this.atomNodeDirectory,
          RUSTUP_HOME: config.getRustupHomeDirPath()
        });",48,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/ci.js,file,51,51,2020-05-18T14:51:33-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,192048,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/ci.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\ci.js,file,35,28,51,51,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
777,Static Analysis,2020-05-18T14:51:00-04:00,81232,2020-05-18T14:54:28-04:00,medium,false-positive,"installModules(options, callback) {
        var env, installArgs, installOptions, vsArgs;
        process.stdout.write('Installing locked modules');
        if (options.argv.verbose) {
          process.stdout.write('\n');
        } else {",34,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/ci.js,file,37,37,2020-05-18T14:51:33-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,192036,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/ci.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\ci.js,file,16,9,37,37,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
778,Static Analysis,2020-05-18T14:51:00-04:00,81234,2020-05-18T14:54:28-04:00,medium,false-positive,"if (options.argv.verbose) {
          process.stdout.write('\n');
        } else {
          process.stdout.write(' ');
        }
        installArgs = ['ci', '--globalconfig', config.getGlobalConfigPath(), '--userconfig', config.getUserConfigPath(), ...this.getNpmBuildFlags()];
        if (options.argv.verbose) {",38,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/ci.js,file,41,41,2020-05-18T14:51:33-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,192041,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/ci.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\ci.js,file,18,11,41,41,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
779,Static Analysis,2020-05-18T14:51:00-04:00,81265,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,NuGet/XmlUtility/LoadSafe,logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.98149246,1
780,Static Analysis,2020-05-18T14:51:00-04:00,81296,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/WindowsFormsWebAuthenticationDialog/ShowBrowser,logical,,,2020-05-18T14:52:00-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,202222,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/WindowsFormsWebAuthenticationDialog/ShowBrowser,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/WindowsFormsWebAuthenticationDialog/ShowBrowser,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
781,Static Analysis,2020-05-18T14:51:00-04:00,81350,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/IO/RewindableStream/set_Position,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201132,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/IO/RewindableStream/set_Position,SharpCompress/IO/RewindableStream/set_Position,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
782,Static Analysis,2020-05-18T14:51:00-04:00,81436,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Squirrel/Bsdiff/WrappingStream/Read,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201280,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Squirrel/Bsdiff/WrappingStream/Read,Squirrel/Bsdiff/WrappingStream/Read,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
783,Static Analysis,2020-05-18T14:51:00-04:00,81447,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-388: 7PK - Errors,http://cwevis.org/browse/388,388,SharpCompress/Archives/AbstractArchive/SharpCompress/Archives/IArchiveExtractionListener/FireEntryExtractionEnd,logical,,,2020-05-18T14:51:56-04:00,Static Analysis,f73cef352a0b2bf1d0cc5310f027978a051db5e56968ba97879cbcb8e22239bf,199973,medium,,,CWE-754: Improper Check for Unusual or Exceptional Conditions,http://cwevis.org/browse/754,754,"Every delegate passed to native code must include an exception block which spans the entire method and has a catch all block. Surround the entire method body with a try/catch block. An exception occurred while verifying this method. This failure can probably be ignored, it's most likely due to an uncommon code sequence in the method the rule didn't understand. Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index",plain-text,SharpCompress/Archives/AbstractArchive/SharpCompress/Archives/IArchiveExtractionListener/FireEntryExtractionEnd,SharpCompress/Archives/AbstractArchive/SharpCompress/Archives/IArchiveExtractionListener/FireEntryExtractionEnd,logical,,,,,,DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRule,Gendarme,GEND-DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRule,Delegates Passed To Native Code Must Include Exception Handling ,"Every delegate which is passed to native code must include an exception
block which spans the entire method and has a catch all handler.

**Bad** example:


```csharp
public void NativeCallback ()
{
    Console.WriteLine (""{0}"", 1);
}
```
**Good** example:


```csharp
public void NativeCallback ()
{
    try {
        Console.WriteLine (""{0}"", 1);
    }
    catch {
    }
}
```",markdown,rule-e3f0972459f483bc18a68eed953b03a6c7e7fb7e495bc2047dd97eaba40f966b,Error Handling,,,,,escalated,0.88051474,1
784,Static Analysis,2020-05-18T14:51:00-04:00,81582,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-189: Numeric Errors,http://cwevis.org/browse/189,189,Microsoft/Alm/Win32/Kernel32/ReadProcessMemory,logical,,,2020-05-18T14:52:00-04:00,Static Analysis,4d86688a36c57aff063fea32e661fedc9c17688ff5645712ccc6a17ac9392617,202380,medium,,,CWE-197: Numeric Truncation Error,http://cwevis.org/browse/197,197,"This method casts a [U]IntPtr to a 32-bit value which won't work on 64-bit architectures. You should always use 64 bits integers, signed or unsigned, when doing pointer math. Call to 'IntPtr.ToInt32()'.",plain-text,Microsoft/Alm/Win32/Kernel32/ReadProcessMemory,Microsoft/Alm/Win32/Kernel32/ReadProcessMemory,logical,,,,,,DoNotAssumeIntPtrSizeRule,Gendarme,GEND-DoNotAssumeIntPtrSizeRule,Do Not Assume Int Ptr Size ,"This rule checks for code which casts an **IntPtr** or **UIntPtr** into
a 32-bit (or smaller) value. It will also check if memory read with the
**Marshal.ReadInt32**and **Marshal.ReadInt64** methods is being cast
into an **IntPtr** or **UIntPtr**. **IntPtr** is generally used to
reference a memory location and downcasting them to 32-bits will make
the code fail on 64-bit CPUs.

**Bad** example (cast):


```csharp
int ptr = dest.ToInt32 ();
for (int i = 0; i < 16; i++) {
    Marshal.StructureToPtr (this, (IntPtr)ptr, false);
    ptr += 4;
}
```
**Bad** example (Marshal.Read\*):


```csharp
// that won't work on 64 bits platforms
IntPtr p = (IntPtr) Marshal.ReadInt32 (p);
```
**Good** example (cast):


```csharp
long ptr = dest.ToInt64 ();
for (int i = 0; i < 16; i++) {
    Marshal.StructureToPtr (this, (IntPtr) ptr, false);
    ptr += IntPtr.Size;
}
```
**Good** example (Marshal.Read\*):


```csharp
IntPtr p = (IntPtr) Marshal.ReadIntPtr (p);
```",markdown,rule-87c4a91bc4c9e20c70f0637bd67a4d03975f25b3ec675b9cc13d0f04540c76a6,Numeric Error,,,,,escalated,0.96271294,1
785,Static Analysis,2020-05-18T14:51:00-04:00,81588,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Archives/ArchiveFactory/Open,logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.98149246,1
786,Static Analysis,2020-05-18T14:51:00-04:00,81629,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/Alm/Cli/Program/Clear,logical,,,2020-05-18T14:52:14-04:00,Static Analysis,9d4d0dd753ee6745414a354655547d7752c27107ac72758d72ca674f677a4473,202957,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,This disposable local is not guaranteed to be disposed of before the method returns. Use a 'using' statement or surround the local's usage with a try/finally block. Local of type 'Task' is not disposed of (is this a fluent-like API ?).,plain-text,Microsoft/Alm/Cli/Program/Clear,Microsoft/Alm/Cli/Program/Clear,logical,,,,,,EnsureLocalDisposalRule,Gendarme,GEND-EnsureLocalDisposalRule,Ensure Local Disposal ,"This rule checks that disposable locals are always disposed of before
the method returns. Use a 'using' statement (or a try/finally block) to
guarantee local disposal even in the event an unhandled exception
occurs.

**Bad** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    DecodeHeader (stream);
    if (!DecodedHeader.HasContent) {
        return;
    }
    DecodeContent (stream);
    stream.Dispose ();
}
```
**Good** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        DecodeHeader (stream);
        if (!DecodedHeader.HasContent) {
            return;
        }
        DecodeContent (stream);
    }
}
```
**Bad** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    Decode (stream);
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
    stream.Dispose ();
}
```
**Good** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        Decode (stream);
    }
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.9824454,1
787,Static Analysis,2020-05-18T14:51:00-04:00,81661,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Readers/AbstractReader/OpenEntryStream,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201120,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Readers/AbstractReader/OpenEntryStream,SharpCompress/Readers/AbstractReader/OpenEntryStream,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
788,Static Analysis,2020-05-18T14:51:00-04:00,81816,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Mono/Cecil/ModuleWriter/WriteModuleTo,logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.98149246,1
789,Static Analysis,2020-05-18T14:51:00-04:00,81865,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Compressors/LZMA/LZipStream/Read,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201152,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Compressors/LZMA/LZipStream/Read,SharpCompress/Compressors/LZMA/LZipStream/Read,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
790,Static Analysis,2020-05-18T14:51:00-04:00,81909,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-227: 7PK - API Abuse,http://cwevis.org/browse/227,227,SharpCompress/Common/ArchiveException/(self),logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-dc56fd6c6aaaf7aef3e91a691e1f8bd8f7311763a2d3286fce16c6c5cf52b5e2,API Abuse,"The software uses an API in a manner contrary to its intended use.

An API is a contract between a caller and a callee. The most common forms of API misuse occurs when the caller does not honor its end of this contract. For example, if a program does not call chdir() after calling chroot(), it violates the contract that specifies how to change the active root directory in a secure fashion. Another good example of library abuse is expecting the callee to return trustworthy DNS information to the caller. In this case, the caller misuses the callee API by making certain assumptions about its behavior (that the return value can be used for authentication purposes). One can also violate the caller-callee contract from the other side. For example, if a coder subclasses SecureRandom and returns a non-random value, the contract is violated.",markdown,,,escalated,0.94525355,1
791,Static Analysis,2020-05-18T14:51:00-04:00,82071,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Squirrel/SingleGlobalInstance/(self),logical,,,2020-05-18T14:51:56-04:00,Static Analysis,d480f4515175882feb5d70fe961abb1e58597f2d010a11afc60ba05b3bff4a5f,199995,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,This type contains disposable field(s) which aren't disposed. Ensure that every disposable field(s) is correctly disposed. Since handle is Disposable Dispose() should call handle.Dispose(),plain-text,Squirrel/SingleGlobalInstance/(self),Squirrel/SingleGlobalInstance/(self),logical,,,,,,DisposableFieldsShouldBeDisposedRule,Gendarme,GEND-DisposableFieldsShouldBeDisposedRule,Disposable Fields Should Be Disposed ,"The rule inspects all fields for disposable types and, if
**System.IDisposable** is implemented, checks that the type's
**Dispose** method does indeed call **Dispose** on all disposable
fields.

**Bad** example:


```csharp
class DoesNotDisposeMember : IDisposable {
    byte[] buffer;
    IDisposable field;

    public void Dispose ()
    {
        buffer = null;
        // field is not disposed
    }
}
```
**Good** example:


```csharp
class DisposePattern : IDisposable {
    byte[] buffer;
    IDisposable field;
    bool disposed;

    public void Dispose ()
    {
        Dispose (true);
    }

    private void Dispose (bool disposing)
    {
        if (!disposed) {
            if (disposing) {
                field.Dispose ();
            }
            buffer = null;
            disposed = true;
        }
    }
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.9787396,1
792,Static Analysis,2020-05-18T14:51:00-04:00,82082,2020-05-18T14:54:28-04:00,medium,false-positive,"path = require('path');

  CSON = require('season');

  yargs = require('yargs');",5,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/enable.js,file,8,8,2020-05-18T14:51:34-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192406,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/enable.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\enable.js,file,17,10,8,8,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
793,Static Analysis,2020-05-18T14:51:00-04:00,82083,2020-05-18T14:54:28-04:00,medium,false-positive,"config = require('./apm');

  Command = require('./command');

  module.exports = Enable = (function() {
    class Enable extends Command {",11,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/enable.js,file,14,14,2020-05-18T14:51:34-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192411,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/enable.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\enable.js,file,20,13,14,14,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
794,Static Analysis,2020-05-18T14:51:00-04:00,82086,2020-05-18T14:54:28-04:00,high,escalated,"result = _.difference(disabledPackages, packageNames);
        _.setValueForKeyPath(settings, keyPath, result);
        try {
          CSON.writeFileSync(configFilePath, settings);
        } catch (error1) {
          error = error1;
          callback(`Failed to save \`${configFilePath}\`: ${error.message}`);",54,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/lib/enable.js,file,57,57,2020-05-18T14:51:34-04:00,Static Analysis,ecd1b614179fad4c5807eb746c8d93996057dc747bbd482dce6aa7e91d17e648,192416,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Found fs.writeFileSync with non literal argument at index 0,plain-text,Atom x64/resources/app/apm/lib/enable.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\enable.js,file,29,11,57,57,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.9786352,1
795,Static Analysis,2020-05-18T14:51:00-04:00,82088,2020-05-18T14:54:28-04:00,medium,false-positive,"(function() {
  var CSON, Command, Enable, _, config, path, yargs;

  _ = require('underscore-plus');

  path = require('path');",1,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/enable.js,file,4,4,2020-05-18T14:51:34-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192404,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/enable.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\enable.js,file,14,7,4,4,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
796,Static Analysis,2020-05-18T14:51:00-04:00,82090,2020-05-18T14:54:28-04:00,high,escalated,"return;
        }
        try {
          settings = CSON.readFileSync(configFilePath);
        } catch (error1) {
          error = error1;
          callback(`Failed to load \`${configFilePath}\`: ${error.message}`);",33,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/lib/enable.js,file,36,36,2020-05-18T14:51:34-04:00,Static Analysis,374ad040fff48d9edaa97052bf28a674b1f4e79af66a0448f1ab1699003790cd,192414,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Found fs.readFileSync with non literal argument at index 0,plain-text,Atom x64/resources/app/apm/lib/enable.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\enable.js,file,39,22,36,36,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.9758102,1
797,Static Analysis,2020-05-18T14:51:00-04:00,82092,2020-05-18T14:54:28-04:00,medium,false-positive,"yargs = require('yargs');

  config = require('./apm');

  Command = require('./command');",9,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/enable.js,file,12,12,2020-05-18T14:51:34-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192410,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/enable.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\enable.js,file,19,12,12,12,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
798,Static Analysis,2020-05-18T14:51:00-04:00,82093,2020-05-18T14:54:28-04:00,medium,false-positive,"CSON = require('season');

  yargs = require('yargs');

  config = require('./apm');",7,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/enable.js,file,10,10,2020-05-18T14:51:34-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192408,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/enable.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\enable.js,file,18,11,10,10,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270798,0
799,Static Analysis,2020-05-18T14:51:00-04:00,82095,2020-05-18T14:54:28-04:00,medium,false-positive,"_ = require('underscore-plus');

  path = require('path');

  CSON = require('season');",3,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/enable.js,file,6,6,2020-05-18T14:51:34-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192405,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/enable.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\enable.js,file,17,10,6,6,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270798,0
800,Static Analysis,2020-05-18T14:51:00-04:00,82096,2020-05-18T14:54:28-04:00,medium,false-positive,"Command = require('./command');

  module.exports = Enable = (function() {
    class Enable extends Command {
      parseOptions(argv) {
        var options;",13,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/enable.js,file,16,16,2020-05-18T14:51:34-04:00,Static Analysis,62173c3357301b64bcb7cb49ad65b9eeb8aa24356212b93fe0fe0166d3218ce7,192412,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'module' is not defined.,plain-text,Atom x64/resources/app/apm/lib/enable.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\enable.js,file,9,3,16,16,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.068299174,0
801,Static Analysis,2020-05-18T14:51:00-04:00,82099,2020-05-18T14:54:28-04:00,high,escalated,"parseOptions(argv) {
        var options;
        options = yargs(argv).wrap(Math.min(100, yargs.terminalWidth()));
        options.usage(""\nUsage: apm enable [<package_name>]...\n\nEnables the named package(s)."");
        return options.alias('h', 'help').describe('help', 'Print this usage message');
      }",18,,,,CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'),http://cwevis.org/browse/79,79,Atom x64/resources/app/apm/lib/enable.js,file,21,21,2020-05-18T14:51:34-04:00,Static Analysis,b4414dd3b1087806bb332146e753f5917a3aec259e29c568ca289f9ab428d0d4,192413,high,,,CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS),http://cwevis.org/browse/80,80,HTML passed in to function 'options.usage',plain-text,Atom x64/resources/app/apm/lib/enable.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\enable.js,file,22,9,21,21,xss,no-mixed-html,ESLint,ESLINT-XSS-no-mixed-html,No mixed html,"Wanted a way to catch XSS issues in code before they end up in production.

## Rule Details

This rule aims to catch as many XSS issues by examining the code as possible.
The rule checks for mixed html/non-html content, unescaped input, etc.

The following patterns are considered warnings:

```js

// Mixed content
var x = '<div>' + input + '</div>';
$node.html( '<div>' + input + '</div>' );

// Unsafe container names.
var html = input;
var text = htmlInput;
displayValue( htmlInput );

// Checking certain expression parameters that might end up in the variables.
var htmlItems = [ input1, input2 ].join();
var textItems = [ '<div>', input, '</div>' ].join();
var tag = isNumbered ? '<ol>' : '<ul>';

// Checking function return values.
var createHtml = function( item ) { return item.name; }
var createBox = function( item ) { return '<div>' + encode( item ) + '</div>' }

```

The following patterns are not warnings:

```js

// Proper encoding
var html = '<div>' + encode( input ) + '</div>';
$node.html( '<div>' + encode( input ) + '</div>' );

// Proper container names
var html = '<img src=""happy.png"">';
var text = textbox.value;

```

## When Not To Use It

If you are creating a Node.js application that doesn't output any HTML, you can
safely disable this rule.

## Further Reading

- [XSS Prevention CHeat Sheet - OWASP](https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet)",markdown,rule-396ebe8bb0c3dc5d4eb2b5368a97688fdb0f2587416453645c3d06db2b216479,Cross-site Scripting (XSS),"Cross-site scripting (XSS) vulnerabilities occur when:
1. Untrusted data enters a web application, typically from a web request.
2. The web application dynamically generates a web page that contains this untrusted data.
3. During page generation, the application does not prevent the data from containing content that is executable by a web browser, such as JavaScript, HTML tags, HTML attributes, mouse events, Flash, ActiveX, etc.
4. A victim visits the generated web page through a web browser, which contains malicious script that was injected using the untrusted data.
5. Since the script comes from a web page that was sent by the web server, the victim's web browser executes the malicious script in the context of the web server's domain.
6. This effectively violates the intention of the web browser's same-origin policy, which states that scripts in one domain should not be able to access resources or run code in a different domain.
There are three main kinds of XSS:

*Reflected XSS (or Non-Persistent)*

The server reads data directly from the HTTP request and reflects it back in the HTTP response. Reflected XSS exploits occur when an attacker causes a victim to supply dangerous content to a vulnerable web application, which is then reflected back to the victim and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to the victim. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces a victim to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the victim, the content is executed by the victim's browser.

*Stored XSS (or Persistent)*

The application stores dangerous data in a database, message forum, visitor log, or other trusted data store. At a later time, the dangerous data is subsequently read back into the application and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. For example, the attacker might inject XSS into a log message, which might not be handled properly when an administrator views the logs.

*DOM-Based XSS*

In DOM-based XSS, the client performs the injection of XSS into the page; in the other types, the server performs the injection. DOM-based XSS generally involves server-controlled, trusted script that is sent to the client, such as Javascript that performs sanity checks on a form before the user submits it. If the server-supplied script processes user-supplied data and then injects it back into the web page (such as with dynamic HTML), then DOM-based XSS is possible.

Once the malicious script is injected, the attacker can perform a variety of malicious activities. The attacker could transfer private information, such as cookies that may include session information, from the victim's machine to the attacker. The attacker could send malicious requests to a web site on behalf of the victim, which could be especially dangerous to the site if the victim has administrator privileges to manage that site. Phishing attacks could be used to emulate trusted web sites and trick the victim into entering a password, allowing the attacker to compromise the victim's account on that web site. Finally, the script could exploit a vulnerability in the web browser itself possibly taking over the victim's machine, sometimes referred to as ""drive-by hacking.""

In many cases, the attack can be launched without the victim even being aware of it. Even with careful users, attackers frequently use a variety of methods to encode the malicious portion of the attack, such as URL encoding or Unicode, so the request looks less suspicious.

**Guidance**

To remedy XSS vulnerabilities, it is important to never use untrusted or unfiltered data within the code of a HTML page.

Untrusted data can originate not only form the client but potentially a third party or previously uploaded file etc.

Filtering of untrusted data typically involves converting special characters to their HTML entity encoded counterparts (however, other methods do exist, see references).

These special characters include:

* `&`
* `<`
* `>`
* `""`
* `'`
* `/`

An example of HTML entity encoding is converting `<` to `&lt;`.

Although it is possible to filter untrusted input, there are five locations within an HTML page where untrusted input (even if it has been filtered) should never be placed:

1. Directly in a script.
2. Inside an HTML comment.
3. In an attribute name.
4. In a tag name.
5. Directly in CSS.

Each of these locations have their own form of escaping and filtering.

Because many browsers attempt to implement XSS protection, any manual verification of this finding should be conducted using multiple different browsers and browser
versions.

**References**

- [WASC](http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting)
- [Secunia](http://secunia.com/advisories/9716/)
- [OWASP XSS Prevention Cheat Sheet](https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet)
- [OWASP DOM Based XSS](https://www.owasp.org/index.php/DOM_Based_XSS)
- [OWASP DOM Based XSS Prevention Cheat Sheet](https://www.owasp.org/index.php/DOM_based_XSS_Prevention_Cheat_Sheet)",markdown,,,escalated,0.8266207,1
802,Static Analysis,2020-05-18T14:51:00-04:00,82140,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-189: Numeric Errors,http://cwevis.org/browse/189,189,SharpCompress/Compressors/Rar/VM/RarVM/ExecuteStandardFilter,logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-87c4a91bc4c9e20c70f0637bd67a4d03975f25b3ec675b9cc13d0f04540c76a6,Numeric Error,,,,,escalated,0.96533114,1
803,Static Analysis,2020-05-18T14:51:00-04:00,82186,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Compressors/PPMd/PpmdStream/Write,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201147,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Compressors/PPMd/PpmdStream/Write,SharpCompress/Compressors/PPMd/PpmdStream/Write,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
804,Static Analysis,2020-05-18T14:51:00-04:00,82223,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-189: Numeric Errors,http://cwevis.org/browse/189,189,SharpCompress/Compressors/PPMd/H/PPMContext/decodeSymbol1,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,03ba04f65bdee74e716d09d64feb1f004a116c5543f675d9955d1297acbf5baf,201070,medium,,,CWE-190: Integer Overflow or Wraparound,http://cwevis.org/browse/190,190,This method casts the result of an integer multiplication into a larger integer. This may result in an overflow before the cast can be done. Cast the operands instead of the result.,plain-text,SharpCompress/Compressors/PPMd/H/PPMContext/decodeSymbol1,SharpCompress/Compressors/PPMd/H/PPMContext/decodeSymbol1,logical,,,,,,ReviewCastOnIntegerMultiplicationRule,Gendarme,GEND-ReviewCastOnIntegerMultiplicationRule,Review Cast On Integer Multiplication ,"This rule checks for integral multiply operations where the result is
cast to a larger integral type. It's safer instead to cast an operand to
the larger type to minimize the chance of overflow.

**Bad** example:


```csharp
public long Bad (int a, int b)
{
    // e.g. Bad (Int32.MaxInt, Int32.MaxInt) == 1
    return a * b;
}
```
**Good** example:


```csharp
public long Good (int a, int b)
{
    // e.g. Good (Int32.MaxInt, Int32.MaxInt) == 4611686014132420609
    return (long) a * b;
}
```",markdown,rule-87c4a91bc4c9e20c70f0637bd67a4d03975f25b3ec675b9cc13d0f04540c76a6,Numeric Error,,,,,escalated,0.9599974,1
805,Static Analysis,2020-05-18T14:51:00-04:00,82270,2020-05-18T14:54:28-04:00,medium,false-positive,"(function() {
  var _, addGitBashToEnv, addPortableGitToEnv, config, fs, npm, path, spawn;

  ({spawn} = require('child_process'));

  path = require('path');",1,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/git.js,file,4,4,2020-05-18T14:51:34-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192590,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/git.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\git.js,file,21,14,4,4,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
806,Static Analysis,2020-05-18T14:51:00-04:00,82271,2020-05-18T14:54:28-04:00,medium,false-positive,"npm = require('npm');

  config = require('./apm');

  fs = require('./fs');",9,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/git.js,file,12,12,2020-05-18T14:51:34-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192594,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/git.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\git.js,file,19,12,12,12,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
807,Static Analysis,2020-05-18T14:51:00-04:00,82272,2020-05-18T14:54:28-04:00,high,false-positive,"return;
    }
    for (i = 0, len = children.length; i < len; i++) {
      child = children[i];
      if (!(child.indexOf('PortableGit_') === 0)) {
        continue;
      }",27,Generic Object Injection Sink,admin,2020-05-27T15:32:33-04:00,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/lib/git.js,file,30,30,2020-05-18T14:51:34-04:00,Static Analysis,6569b353992e88510a975ec3412e07f9c2539e0cf8eb813d02c1c97e2a312d82,192600,high,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Generic Object Injection Sink,plain-text,Atom x64/resources/app/apm/lib/git.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\git.js,file,26,15,30,30,security,detect-object-injection,ESLint,ESLINT-SECURITY-detect-object-injection,Detect object injection,"Detects `variable[key]` as a left- or right-hand assignment operand.

More information: [The Dangers of Square Bracket Notation](https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/the-dangers-of-square-bracket-notation.md)",markdown,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.9251437,1
808,Static Analysis,2020-05-18T14:51:00-04:00,82273,2020-05-18T14:54:28-04:00,medium,false-positive,"return addGitBashToEnv(env);
  };

  exports.getGitVersion = function(callback) {
    var npmOptions;
    npmOptions = {
      userconfig: config.getUserConfigPath(),",72,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/git.js,file,75,75,2020-05-18T14:51:35-04:00,Static Analysis,6c17de9eabdb8c0c9c4077534211faf0dd41f367fd771a905bcfbb889f0a8595,192616,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'exports' is not defined.,plain-text,Atom x64/resources/app/apm/lib/git.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\git.js,file,10,3,75,75,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.0762589,0
809,Static Analysis,2020-05-18T14:51:00-04:00,82274,2020-05-18T14:54:28-04:00,medium,false-positive,"return spawned.on('close', function(code) {
        var gitName, version, versionName;
        if (code === 0) {
          [gitName, versionName, version] = Buffer.concat(outputChunks).toString().split(' ');
          version = version != null ? version.trim() : void 0;
        }
        return callback(version);",94,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/git.js,file,97,97,2020-05-18T14:51:35-04:00,Static Analysis,1331ace3749ef21bd1b9d70965c34dc150b17e09dbbd23a4ee27f4a9df5c4ff4,192626,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'Buffer' is not defined.,plain-text,Atom x64/resources/app/apm/lib/git.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\git.js,file,51,45,97,97,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.10479733,0
810,Static Analysis,2020-05-18T14:51:00-04:00,82275,2020-05-18T14:54:28-04:00,medium,false-positive,"}
  };

  exports.addGitToEnv = function(env) {
    if (process.platform !== 'win32') {
      return;
    }",64,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/git.js,file,67,67,2020-05-18T14:51:34-04:00,Static Analysis,6c17de9eabdb8c0c9c4077534211faf0dd41f367fd771a905bcfbb889f0a8595,192609,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'exports' is not defined.,plain-text,Atom x64/resources/app/apm/lib/git.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\git.js,file,10,3,67,67,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.0762589,0
811,Static Analysis,2020-05-18T14:51:00-04:00,82281,2020-05-18T14:54:28-04:00,medium,false-positive,"};

  exports.addGitToEnv = function(env) {
    if (process.platform !== 'win32') {
      return;
    }
    addPortableGitToEnv(env);",65,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/git.js,file,68,68,2020-05-18T14:51:34-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,192610,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/git.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\git.js,file,16,9,68,68,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
812,Static Analysis,2020-05-18T14:51:00-04:00,82284,2020-05-18T14:54:28-04:00,medium,false-positive,"return npm.load(npmOptions, function() {
      var git, outputChunks, ref, spawned;
      git = (ref = npm.config.get('git')) != null ? ref : 'git';
      exports.addGitToEnv(process.env);
      spawned = spawn(git, ['--version']);
      outputChunks = [];
      spawned.stderr.on('data', function(chunk) {",81,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/git.js,file,84,84,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.17391245,0
813,Static Analysis,2020-05-18T14:51:00-04:00,82285,2020-05-18T14:54:28-04:00,high,escalated,"}
    githubPath = path.join(localAppData, 'GitHub');
    try {
      children = fs.readdirSync(githubPath);
    } catch (error1) {
      error = error1;
      return;",21,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/lib/git.js,file,24,24,2020-05-18T14:51:34-04:00,Static Analysis,cbb6e839417e7d17515dcb248b2294ad68b4b8c574da732c47e66bfae873164c,192598,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Found fs.readdirSync with non literal argument at index 0,plain-text,Atom x64/resources/app/apm/lib/git.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\git.js,file,32,18,24,24,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.978149,1
814,Static Analysis,2020-05-18T14:51:00-04:00,82286,2020-05-18T14:54:28-04:00,medium,false-positive,"({spawn} = require('child_process'));

  path = require('path');

  _ = require('underscore-plus');",3,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/git.js,file,6,6,2020-05-18T14:51:34-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192591,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/git.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\git.js,file,17,10,6,6,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
815,Static Analysis,2020-05-18T14:51:00-04:00,82287,2020-05-18T14:54:28-04:00,medium,false-positive,"_ = require('underscore-plus');

  npm = require('npm');

  config = require('./apm');",7,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/git.js,file,10,10,2020-05-18T14:51:34-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192593,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/git.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\git.js,file,16,9,10,10,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
816,Static Analysis,2020-05-18T14:51:00-04:00,82288,2020-05-18T14:54:28-04:00,medium,false-positive,"config = require('./apm');

  fs = require('./fs');

  addPortableGitToEnv = function(env) {
    var binPath, child, children, cmdPath, error, githubPath, i, len, localAppData;",11,'require' is not defined,admin,2020-05-30T17:32:12-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/git.js,file,14,14,2020-05-18T14:51:34-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192595,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/git.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\git.js,file,15,8,14,14,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
817,Static Analysis,2020-05-18T14:51:00-04:00,82289,2020-05-18T14:54:28-04:00,medium,false-positive,"path = require('path');

  _ = require('underscore-plus');

  npm = require('npm');",5,'require' is not defined,admin,2020-05-30T17:32:03-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/git.js,file,8,8,2020-05-18T14:51:34-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192592,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/git.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\git.js,file,14,7,8,8,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
818,Static Analysis,2020-05-18T14:51:00-04:00,82290,2020-05-18T14:54:28-04:00,high,escalated,"(function() {
  var _, addGitBashToEnv, addPortableGitToEnv, config, fs, npm, path, spawn;

  ({spawn} = require('child_process'));

  path = require('path');",1,"Found require(""child_process"")",admin,2020-05-27T15:32:00-04:00,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/lib/git.js,file,4,4,2020-05-18T14:51:34-04:00,Static Analysis,63cfeff1e19efa6702923410272f5381339ce1d5ae0e4401b9a7b3accccb14ee,192589,high,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,"Found require(""child_process"")",plain-text,Atom x64/resources/app/apm/lib/git.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\git.js,file,38,14,4,4,security,detect-child-process,ESLint,ESLINT-SECURITY-detect-child-process,Detect child process,"Detects instances of [`child_process`](https://nodejs.org/api/child_process.html) & non-literal [`exec()`](https://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback)

More information: [Avoiding Command Injection in Node.js](https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/avoid-command-injection-node.md)",markdown,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.93688923,1
819,Static Analysis,2020-05-18T14:51:00-04:00,82311,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Squirrel/Shell/ShellLink/Save,logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.98149246,1
820,Static Analysis,2020-05-18T14:51:00-04:00,82358,2020-05-18T14:54:28-04:00,high,escalated,,,,,,CWE-227: 7PK - API Abuse,http://cwevis.org/browse/227,227,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/Platform/SafeCertContextHandle/CertFreeCertificateContext,logical,,,2020-05-18T14:52:00-04:00,Static Analysis,dbd57bbd7b01d2cdc8d58222b94308e03da707a5c7a5e9eab6acb7a083c63ff7,202217,high,,,CWE-676: Use of Potentially Dangerous Function,http://cwevis.org/browse/676,676,This type or method is decorated with [SuppressUnmanagedCodeSecurity] which reduce the number of security checks done when unmanaged code is called. Ensure that use of this attribute does not compromise the security of the application.,plain-text,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/Platform/SafeCertContextHandle/CertFreeCertificateContext,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/Platform/SafeCertContextHandle/CertFreeCertificateContext,logical,,,,,,ReviewSuppressUnmanagedCodeSecurityUsageRule,Gendarme,GEND-ReviewSuppressUnmanagedCodeSecurityUsageRule,Review Suppress Unmanaged Code Security Usage ,"This rule fires if a type or method is decorated with the
**[SuppressUnmanagedCodeSecurity]**attribute. This attribute reduces the
security checks done when executing unmanaged code and its usage should
be reviewed to confirm that no exploitable security holes are present.

Example:


```csharp
[SuppressUnmanagedCodeSecurity]
public class Safe {
    [DllImport (""User32.dll"")]
    static extern Boolean MessageBeep (UInt32 beepType);
}
```",markdown,rule-dc56fd6c6aaaf7aef3e91a691e1f8bd8f7311763a2d3286fce16c6c5cf52b5e2,API Abuse,"The software uses an API in a manner contrary to its intended use.

An API is a contract between a caller and a callee. The most common forms of API misuse occurs when the caller does not honor its end of this contract. For example, if a program does not call chdir() after calling chroot(), it violates the contract that specifies how to change the active root directory in a secure fashion. Another good example of library abuse is expecting the callee to return trustworthy DNS information to the caller. In this case, the caller misuses the callee API by making certain assumptions about its behavior (that the return value can be used for authentication purposes). One can also violate the caller-callee contract from the other side. For example, if a coder subclasses SecureRandom and returns a non-random value, the contract is violated.",markdown,,,escalated,0.9466878,1
821,Static Analysis,2020-05-18T14:51:00-04:00,82418,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Common/SevenZip/SevenZipFilePart/GetCompressedStream,logical,,,2020-05-18T14:51:56-04:00,Static Analysis,75d7fbc5e63cd65cbf82fa8406c2803dedf9e35f1f97ad3aa206eb0234dfc39e,200170,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,This disposable local is not guaranteed to be disposed of before the method returns. Use a 'using' statement or surround the local's usage with a try/finally block. Local of type 'Stream' is not disposed of (at least not locally).,plain-text,SharpCompress/Common/SevenZip/SevenZipFilePart/GetCompressedStream,SharpCompress/Common/SevenZip/SevenZipFilePart/GetCompressedStream,logical,,,,,,EnsureLocalDisposalRule,Gendarme,GEND-EnsureLocalDisposalRule,Ensure Local Disposal ,"This rule checks that disposable locals are always disposed of before
the method returns. Use a 'using' statement (or a try/finally block) to
guarantee local disposal even in the event an unhandled exception
occurs.

**Bad** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    DecodeHeader (stream);
    if (!DecodedHeader.HasContent) {
        return;
    }
    DecodeContent (stream);
    stream.Dispose ();
}
```
**Good** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        DecodeHeader (stream);
        if (!DecodedHeader.HasContent) {
            return;
        }
        DecodeContent (stream);
    }
}
```
**Bad** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    Decode (stream);
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
    stream.Dispose ();
}
```
**Good** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        Decode (stream);
    }
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.9816607,1
822,Static Analysis,2020-05-18T14:51:00-04:00,82449,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/IO/ReadOnlySubStream/Read,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201128,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/IO/ReadOnlySubStream/Read,SharpCompress/IO/ReadOnlySubStream/Read,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
823,Static Analysis,2020-05-18T14:51:00-04:00,82450,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-189: Numeric Errors,http://cwevis.org/browse/189,189,SharpCompress/Compressors/PPMd/I1/PpmState/op_Addition,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,03ba04f65bdee74e716d09d64feb1f004a116c5543f675d9955d1297acbf5baf,201068,medium,,,CWE-190: Integer Overflow or Wraparound,http://cwevis.org/browse/190,190,This method casts the result of an integer multiplication into a larger integer. This may result in an overflow before the cast can be done. Cast the operands instead of the result.,plain-text,SharpCompress/Compressors/PPMd/I1/PpmState/op_Addition,SharpCompress/Compressors/PPMd/I1/PpmState/op_Addition,logical,,,,,,ReviewCastOnIntegerMultiplicationRule,Gendarme,GEND-ReviewCastOnIntegerMultiplicationRule,Review Cast On Integer Multiplication ,"This rule checks for integral multiply operations where the result is
cast to a larger integral type. It's safer instead to cast an operand to
the larger type to minimize the chance of overflow.

**Bad** example:


```csharp
public long Bad (int a, int b)
{
    // e.g. Bad (Int32.MaxInt, Int32.MaxInt) == 1
    return a * b;
}
```
**Good** example:


```csharp
public long Good (int a, int b)
{
    // e.g. Good (Int32.MaxInt, Int32.MaxInt) == 4611686014132420609
    return (long) a * b;
}
```",markdown,rule-87c4a91bc4c9e20c70f0637bd67a4d03975f25b3ec675b9cc13d0f04540c76a6,Numeric Error,,,,,escalated,0.9599974,1
824,Static Analysis,2020-05-18T14:51:00-04:00,82453,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/Platform/SilentWindowsFormsAuthenticationDialog/CloseBrowser,logical,,,2020-05-18T14:52:00-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,202229,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/Platform/SilentWindowsFormsAuthenticationDialog/CloseBrowser,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/Platform/SilentWindowsFormsAuthenticationDialog/CloseBrowser,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
825,Static Analysis,2020-05-18T14:51:00-04:00,82465,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-227: 7PK - API Abuse,http://cwevis.org/browse/227,227,SharpCompress/Common/ExtractionException/(self),logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-dc56fd6c6aaaf7aef3e91a691e1f8bd8f7311763a2d3286fce16c6c5cf52b5e2,API Abuse,"The software uses an API in a manner contrary to its intended use.

An API is a contract between a caller and a callee. The most common forms of API misuse occurs when the caller does not honor its end of this contract. For example, if a program does not call chdir() after calling chroot(), it violates the contract that specifies how to change the active root directory in a secure fashion. Another good example of library abuse is expecting the callee to return trustworthy DNS information to the caller. In this case, the caller misuses the callee API by making certain assumptions about its behavior (that the return value can be used for authentication purposes). One can also violate the caller-callee contract from the other side. For example, if a coder subclasses SecureRandom and returns a non-random value, the contract is violated.",markdown,,,escalated,0.94525355,1
826,Static Analysis,2020-05-18T14:51:00-04:00,82506,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-227: 7PK - API Abuse,http://cwevis.org/browse/227,227,SharpCompress/Compressors/LZMA/DataErrorException/(self),logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-dc56fd6c6aaaf7aef3e91a691e1f8bd8f7311763a2d3286fce16c6c5cf52b5e2,API Abuse,"The software uses an API in a manner contrary to its intended use.

An API is a contract between a caller and a callee. The most common forms of API misuse occurs when the caller does not honor its end of this contract. For example, if a program does not call chdir() after calling chroot(), it violates the contract that specifies how to change the active root directory in a secure fashion. Another good example of library abuse is expecting the callee to return trustworthy DNS information to the caller. In this case, the caller misuses the callee API by making certain assumptions about its behavior (that the return value can be used for authentication purposes). One can also violate the caller-callee contract from the other side. For example, if a coder subclasses SecureRandom and returns a non-random value, the contract is violated.",markdown,,,escalated,0.94525355,1
827,Static Analysis,2020-05-18T14:51:00-04:00,82564,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Compressors/Xz/XZFooter/FromStream,logical,,,2020-05-18T14:51:56-04:00,Static Analysis,f1a784bcc8db4a1699133da6f083651de3ffe2d8bfed7ec03494af61ca139db5,200163,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,This disposable local is not guaranteed to be disposed of before the method returns. Use a 'using' statement or surround the local's usage with a try/finally block. Local of type 'NonDisposingStream' is not disposed of (at least not locally).,plain-text,SharpCompress/Compressors/Xz/XZFooter/FromStream,SharpCompress/Compressors/Xz/XZFooter/FromStream,logical,,,,,,EnsureLocalDisposalRule,Gendarme,GEND-EnsureLocalDisposalRule,Ensure Local Disposal ,"This rule checks that disposable locals are always disposed of before
the method returns. Use a 'using' statement (or a try/finally block) to
guarantee local disposal even in the event an unhandled exception
occurs.

**Bad** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    DecodeHeader (stream);
    if (!DecodedHeader.HasContent) {
        return;
    }
    DecodeContent (stream);
    stream.Dispose ();
}
```
**Good** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        DecodeHeader (stream);
        if (!DecodedHeader.HasContent) {
            return;
        }
        DecodeContent (stream);
    }
}
```
**Bad** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    Decode (stream);
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
    stream.Dispose ();
}
```
**Good** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        Decode (stream);
    }
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.9820098,1
828,Static Analysis,2020-05-18T14:51:00-04:00,82597,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Compressors/Filters/Filter/Read,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201162,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Compressors/Filters/Filter/Read,SharpCompress/Compressors/Filters/Filter/Read,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
829,Static Analysis,2020-05-18T14:51:00-04:00,82701,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Readers/AbstractReader/Cancel,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201117,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Readers/AbstractReader/Cancel,SharpCompress/Readers/AbstractReader/Cancel,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
830,Static Analysis,2020-05-18T14:51:00-04:00,82741,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/Web/XmlTransform/XmlAttributePreservingWriter/WriteBase64,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201213,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Microsoft/Web/XmlTransform/XmlAttributePreservingWriter/WriteBase64,Microsoft/Web/XmlTransform/XmlAttributePreservingWriter/WriteBase64,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
831,Static Analysis,2020-05-18T14:51:00-04:00,82865,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/IO/ReadOnlyAppendingStream/Read,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201121,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/IO/ReadOnlyAppendingStream/Read,SharpCompress/IO/ReadOnlyAppendingStream/Read,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
832,Static Analysis,2020-05-18T14:51:00-04:00,82868,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Compressors/LZMA/LzmaStream/Write,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201155,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Compressors/LZMA/LzmaStream/Write,SharpCompress/Compressors/LZMA/LzmaStream/Write,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
833,Static Analysis,2020-05-18T14:51:00-04:00,82898,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-388: 7PK - Errors,http://cwevis.org/browse/388,388,Microsoft/Alm/Authentication/NetworkResponseMessage/Dispose,logical,,,2020-05-18T14:52:00-04:00,Static Analysis,f73cef352a0b2bf1d0cc5310f027978a051db5e56968ba97879cbcb8e22239bf,202379,medium,,,CWE-754: Improper Check for Unusual or Exceptional Conditions,http://cwevis.org/browse/754,754,"Every delegate passed to native code must include an exception block which spans the entire method and has a catch all block. Surround the entire method body with a try/catch block. An exception occurred while verifying this method. This failure can probably be ignored, it's most likely due to an uncommon code sequence in the method the rule didn't understand. Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index",plain-text,Microsoft/Alm/Authentication/NetworkResponseMessage/Dispose,Microsoft/Alm/Authentication/NetworkResponseMessage/Dispose,logical,,,,,,DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRule,Gendarme,GEND-DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRule,Delegates Passed To Native Code Must Include Exception Handling ,"Every delegate which is passed to native code must include an exception
block which spans the entire method and has a catch all handler.

**Bad** example:


```csharp
public void NativeCallback ()
{
    Console.WriteLine (""{0}"", 1);
}
```
**Good** example:


```csharp
public void NativeCallback ()
{
    try {
        Console.WriteLine (""{0}"", 1);
    }
    catch {
    }
}
```",markdown,rule-e3f0972459f483bc18a68eed953b03a6c7e7fb7e495bc2047dd97eaba40f966b,Error Handling,,,,,escalated,0.88051474,1
834,Static Analysis,2020-05-18T14:51:00-04:00,82926,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,NuGet/RequestHelper/GetResponse,logical,,,2020-05-18T14:51:56-04:00,Static Analysis,649093b7e609de2a707b150e06e3fe97e6f9298e987e9529e952f8a13c2c8747,200216,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,This disposable local is not guaranteed to be disposed of before the method returns. Use a 'using' statement or surround the local's usage with a try/finally block. Local of type 'WebResponse' is not disposed of (at least not locally).,plain-text,NuGet/RequestHelper/GetResponse,NuGet/RequestHelper/GetResponse,logical,,,,,,EnsureLocalDisposalRule,Gendarme,GEND-EnsureLocalDisposalRule,Ensure Local Disposal ,"This rule checks that disposable locals are always disposed of before
the method returns. Use a 'using' statement (or a try/finally block) to
guarantee local disposal even in the event an unhandled exception
occurs.

**Bad** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    DecodeHeader (stream);
    if (!DecodedHeader.HasContent) {
        return;
    }
    DecodeContent (stream);
    stream.Dispose ();
}
```
**Good** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        DecodeHeader (stream);
        if (!DecodedHeader.HasContent) {
            return;
        }
        DecodeContent (stream);
    }
}
```
**Bad** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    Decode (stream);
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
    stream.Dispose ();
}
```
**Good** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        Decode (stream);
    }
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.9813726,1
835,Static Analysis,2020-05-18T14:51:00-04:00,82929,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-189: Numeric Errors,http://cwevis.org/browse/189,189,SharpCompress/Compressors/PPMd/I1/Model/Rescale,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,03ba04f65bdee74e716d09d64feb1f004a116c5543f675d9955d1297acbf5baf,201064,medium,,,CWE-190: Integer Overflow or Wraparound,http://cwevis.org/browse/190,190,This method casts the result of an integer multiplication into a larger integer. This may result in an overflow before the cast can be done. Cast the operands instead of the result.,plain-text,SharpCompress/Compressors/PPMd/I1/Model/Rescale,SharpCompress/Compressors/PPMd/I1/Model/Rescale,logical,,,,,,ReviewCastOnIntegerMultiplicationRule,Gendarme,GEND-ReviewCastOnIntegerMultiplicationRule,Review Cast On Integer Multiplication ,"This rule checks for integral multiply operations where the result is
cast to a larger integral type. It's safer instead to cast an operand to
the larger type to minimize the chance of overflow.

**Bad** example:


```csharp
public long Bad (int a, int b)
{
    // e.g. Bad (Int32.MaxInt, Int32.MaxInt) == 1
    return a * b;
}
```
**Good** example:


```csharp
public long Good (int a, int b)
{
    // e.g. Good (Int32.MaxInt, Int32.MaxInt) == 4611686014132420609
    return (long) a * b;
}
```",markdown,rule-87c4a91bc4c9e20c70f0637bd67a4d03975f25b3ec675b9cc13d0f04540c76a6,Numeric Error,,,,,escalated,0.9599974,1
836,Static Analysis,2020-05-18T14:51:00-04:00,82954,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-388: 7PK - Errors,http://cwevis.org/browse/388,388,Microsoft/Alm/Cli/OperationArguments/get_QueryUri,logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-e3f0972459f483bc18a68eed953b03a6c7e7fb7e495bc2047dd97eaba40f966b,Error Handling,,,,,escalated,0.8818622,1
837,Static Analysis,2020-05-18T14:51:00-04:00,83001,2020-05-18T14:54:28-04:00,medium,false-positive,"return;
          }
          return commands.push((callback) => {
            process.stdout.write(`Rebuilding ${packageName} module cache `);
            return this.rebuild(packageDirectory, (error) => {
              if (error != null) {
                this.logFailure();",70,'process' is not defined,admin,2020-05-30T17:31:12-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/rebuild-module-cache.js,file,73,73,2020-05-18T14:51:38-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,194213,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/rebuild-module-cache.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\rebuild-module-cache.js,file,20,13,73,73,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
838,Static Analysis,2020-05-18T14:51:00-04:00,83002,2020-05-18T14:54:28-04:00,medium,false-positive,"yargs = require('yargs');

  Command = require('./command');

  config = require('./apm');",7,'require' is not defined,admin,2020-05-30T17:30:56-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/rebuild-module-cache.js,file,10,10,2020-05-18T14:51:38-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,194153,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/rebuild-module-cache.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\rebuild-module-cache.js,file,20,13,10,10,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
839,Static Analysis,2020-05-18T14:51:00-04:00,83004,2020-05-18T14:54:28-04:00,high,escalated,"var error;
          try {
            if (this.moduleCache == null) {
              this.moduleCache = require(path.join(resourcePath, 'src', 'module-cache'));
            }
            this.moduleCache.create(packageDirectory);
          } catch (error1) {",45,Found non-literal argument in require,admin,2020-05-27T15:31:03-04:00,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/lib/rebuild-module-cache.js,file,48,48,2020-05-18T14:51:38-04:00,Static Analysis,fd4ac87b1b2792fefa27e1f6acf43697d4e345cb11d008b0fe44dc1c9b95d9c2,194177,high,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Found non-literal argument in require,plain-text,Atom x64/resources/app/apm/lib/rebuild-module-cache.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\rebuild-module-cache.js,file,89,34,48,48,security,detect-non-literal-require,ESLint,ESLINT-SECURITY-detect-non-literal-require,Detect non literal require,"Detects `require(variable)`, which might allow an attacker to load and run arbitrary code, or access arbitrary files on disk.

More information: http://www.bennadel.com/blog/2169-where-does-node-js-and-require-look-for-modules.htm",markdown,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.94545025,1
840,Static Analysis,2020-05-18T14:51:00-04:00,83005,2020-05-18T14:54:28-04:00,medium,false-positive,"fs = require('./fs');

  module.exports = RebuildModuleCache = (function() {
    class RebuildModuleCache extends Command {
      constructor() {
        super();",13,'module' is not defined,admin,2020-05-30T17:30:44-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/rebuild-module-cache.js,file,16,16,2020-05-18T14:51:38-04:00,Static Analysis,62173c3357301b64bcb7cb49ad65b9eeb8aa24356212b93fe0fe0166d3218ce7,194164,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'module' is not defined.,plain-text,Atom x64/resources/app/apm/lib/rebuild-module-cache.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\rebuild-module-cache.js,file,9,3,16,16,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.068299174,0
841,Static Analysis,2020-05-18T14:51:00-04:00,83006,2020-05-18T14:54:28-04:00,medium,false-positive,"getResourcePath(callback) {
        if (this.resourcePath) {
          return process.nextTick(() => {
            return callback(this.resourcePath);
          });
        } else {",29,'process' is not defined,admin,2020-05-30T17:30:29-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/rebuild-module-cache.js,file,32,32,2020-05-18T14:51:38-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,194172,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/rebuild-module-cache.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\rebuild-module-cache.js,file,25,18,32,32,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
842,Static Analysis,2020-05-18T14:51:00-04:00,83007,2020-05-18T14:54:28-04:00,medium,false-positive,"path = require('path');

  async = require('async');

  yargs = require('yargs');",3,'require' is not defined,admin,2020-05-30T17:30:15-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/rebuild-module-cache.js,file,6,6,2020-05-18T14:51:38-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,194151,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/rebuild-module-cache.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\rebuild-module-cache.js,file,18,11,6,6,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
843,Static Analysis,2020-05-18T14:51:00-04:00,83008,2020-05-18T14:54:28-04:00,medium,false-positive,"(function() {
  var Command, RebuildModuleCache, async, config, fs, path, yargs;

  path = require('path');

  async = require('async');",1,'require' is not defined,admin,2020-05-30T17:30:05-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/rebuild-module-cache.js,file,4,4,2020-05-18T14:51:38-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,194148,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/rebuild-module-cache.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\rebuild-module-cache.js,file,17,10,4,4,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
844,Static Analysis,2020-05-18T14:51:00-04:00,83009,2020-05-18T14:54:28-04:00,medium,false-positive,"async = require('async');

  yargs = require('yargs');

  Command = require('./command');",5,'require' is not defined,admin,2020-05-30T17:29:51-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/rebuild-module-cache.js,file,8,8,2020-05-18T14:51:38-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,194152,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/rebuild-module-cache.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\rebuild-module-cache.js,file,18,11,8,8,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
845,Static Analysis,2020-05-18T14:51:00-04:00,83013,2020-05-18T14:54:28-04:00,medium,false-positive,"Command = require('./command');

  config = require('./apm');

  fs = require('./fs');",9,'require' is not defined,admin,2020-05-30T17:29:41-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/rebuild-module-cache.js,file,12,12,2020-05-18T14:51:38-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,194157,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/rebuild-module-cache.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\rebuild-module-cache.js,file,19,12,12,12,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
846,Static Analysis,2020-05-18T14:51:00-04:00,83014,2020-05-18T14:54:28-04:00,medium,false-positive,"var error;
          try {
            if (this.moduleCache == null) {
              this.moduleCache = require(path.join(resourcePath, 'src', 'module-cache'));
            }
            this.moduleCache.create(packageDirectory);
          } catch (error1) {",45,'require' is not defined,admin,2020-05-30T17:29:22-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/rebuild-module-cache.js,file,48,48,2020-05-18T14:51:38-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,194179,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/rebuild-module-cache.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\rebuild-module-cache.js,file,41,34,48,48,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
847,Static Analysis,2020-05-18T14:51:00-04:00,83017,2020-05-18T14:54:28-04:00,medium,false-positive,"config = require('./apm');

  fs = require('./fs');

  module.exports = RebuildModuleCache = (function() {
    class RebuildModuleCache extends Command {",11,'require' is not defined,admin,2020-05-30T17:29:07-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/rebuild-module-cache.js,file,14,14,2020-05-18T14:51:38-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,194161,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/rebuild-module-cache.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\rebuild-module-cache.js,file,15,8,14,14,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
848,Static Analysis,2020-05-18T14:51:00-04:00,83099,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-227: 7PK - API Abuse,http://cwevis.org/browse/227,227,SharpCompress/Compressors/Xz/XZIndexMarkerReachedException/(self),logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-dc56fd6c6aaaf7aef3e91a691e1f8bd8f7311763a2d3286fce16c6c5cf52b5e2,API Abuse,"The software uses an API in a manner contrary to its intended use.

An API is a contract between a caller and a callee. The most common forms of API misuse occurs when the caller does not honor its end of this contract. For example, if a program does not call chdir() after calling chroot(), it violates the contract that specifies how to change the active root directory in a secure fashion. Another good example of library abuse is expecting the callee to return trustworthy DNS information to the caller. In this case, the caller misuses the callee API by making certain assumptions about its behavior (that the return value can be used for authentication purposes). One can also violate the caller-callee contract from the other side. For example, if a coder subclasses SecureRandom and returns a non-random value, the contract is violated.",markdown,,,escalated,0.94525355,1
849,Static Analysis,2020-05-18T14:51:00-04:00,83273,2020-05-18T14:54:28-04:00,high,escalated,,,,,,CWE-695: Use of Low-Level Functionality,http://cwevis.org/browse/695,695,Squirrel/Shell/ShellLink/PROPERTYKEY/(self),logical,,,2020-05-18T14:51:57-04:00,Static Analysis,3ac9036736202c636e5a647bb8073bf5337a353e654d9216f8af1cf9293e2f3b,200970,high,,,CWE-695: Use of Low-Level Functionality,http://cwevis.org/browse/695,695,The type uses System.IntPtr or System.UIntPtr instead of System.Runtime.InteropServices.SafeHandle. Consider changing the code to use SafeHandle.,plain-text,Squirrel/Shell/ShellLink/PROPERTYKEY/(self),Squirrel/Shell/ShellLink/PROPERTYKEY/(self),logical,,,,,,PreferSafeHandleRule,Gendarme,GEND-PreferSafeHandleRule,Prefer Safe Handle ,"In general it is best to interop with native code using
**System.Runtime.InteropServices.SafeHandle** instead of
**System.IntPtr** or **System.UIntPtr** because:

SafeHandles are type safe.
SafeHandles are guaranteed to be disposed of during exceptional
conditions like a thread aborting unexpectedly or a stack overflow.
SafeHandles are not vulnerable to reycle attacks.
You don't need to write a finalizer which can be tricky to do because
they execute within their own thread, may execute on partially
constructed objects, and normally tear down the application if you allow
an exception to escape from them.


 **Bad** example:


```csharp
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable.
public sealed class Database {
    ~Database ()
    {
        // This will execute even if the ctor throws so it is important to check
        // to see if the fields are initialized.
        if (m_database != IntPtr.Zero) {
            NativeMethods.sqlite3_close (m_database);
        }
    }

    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        int err = NativeMethods.sqlite3_open_v2 (path, out m_database, flags, IntPtr.Zero);
        // handle errors
    }

    // exec and query methods would go here

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (IntPtr db);

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private IntPtr m_database;
}
```
**Good** example:


```csharp
using System.Runtime.ConstrainedExecution;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable, but you do not need to implement a finalizer because
// SafeHandle will take care of the cleanup.
internal sealed class Database {
    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        m_database = new SqlitePtr (path, flags);
    }

    // exec and query methods would go here

    // This corresponds to a native sqlite3*.
    [SecurityPermission (SecurityAction.InheritanceDemand, UnmanagedCode = true)]
    [SecurityPermission (SecurityAction.Demand, UnmanagedCode = true)]
    private sealed class SqlitePtr : SafeHandle {
        public SqlitePtr (string path, NativeMethods.OpenFlags flags) : base (IntPtr.Zero, true)
        {
            int err = NativeMethods.sqlite3_open_v2 (path, out handle, flags, IntPtr.Zero);
            // handle errors
        }

        public override bool IsInvalid {
            get {
                return (handle == IntPtr.Zero);
            }
        }

        // This will not be called if the handle is invalid. Note that this method should not throw.
        [ReliabilityContract (Consistency.WillNotCorruptState, Cer.MayFail)]
        protected override bool ReleaseHandle ()
        {
            NativeMethods.sqlite3_close (this);
            return true;
        }
    }

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (SqlitePtr db);

        // Open must take an IntPtr but all other methods take a type safe SqlitePtr.
        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private SqlitePtr m_database;
}
```",markdown,GEND-PreferSafeHandleRule,Prefer Safe Handle ,"In general it is best to interop with native code using
**System.Runtime.InteropServices.SafeHandle** instead of
**System.IntPtr** or **System.UIntPtr** because:

SafeHandles are type safe.
SafeHandles are guaranteed to be disposed of during exceptional
conditions like a thread aborting unexpectedly or a stack overflow.
SafeHandles are not vulnerable to reycle attacks.
You don't need to write a finalizer which can be tricky to do because
they execute within their own thread, may execute on partially
constructed objects, and normally tear down the application if you allow
an exception to escape from them.


 **Bad** example:


```csharp
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable.
public sealed class Database {
    ~Database ()
    {
        // This will execute even if the ctor throws so it is important to check
        // to see if the fields are initialized.
        if (m_database != IntPtr.Zero) {
            NativeMethods.sqlite3_close (m_database);
        }
    }

    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        int err = NativeMethods.sqlite3_open_v2 (path, out m_database, flags, IntPtr.Zero);
        // handle errors
    }

    // exec and query methods would go here

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (IntPtr db);

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private IntPtr m_database;
}
```
**Good** example:


```csharp
using System.Runtime.ConstrainedExecution;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable, but you do not need to implement a finalizer because
// SafeHandle will take care of the cleanup.
internal sealed class Database {
    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        m_database = new SqlitePtr (path, flags);
    }

    // exec and query methods would go here

    // This corresponds to a native sqlite3*.
    [SecurityPermission (SecurityAction.InheritanceDemand, UnmanagedCode = true)]
    [SecurityPermission (SecurityAction.Demand, UnmanagedCode = true)]
    private sealed class SqlitePtr : SafeHandle {
        public SqlitePtr (string path, NativeMethods.OpenFlags flags) : base (IntPtr.Zero, true)
        {
            int err = NativeMethods.sqlite3_open_v2 (path, out handle, flags, IntPtr.Zero);
            // handle errors
        }

        public override bool IsInvalid {
            get {
                return (handle == IntPtr.Zero);
            }
        }

        // This will not be called if the handle is invalid. Note that this method should not throw.
        [ReliabilityContract (Consistency.WillNotCorruptState, Cer.MayFail)]
        protected override bool ReleaseHandle ()
        {
            NativeMethods.sqlite3_close (this);
            return true;
        }
    }

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (SqlitePtr db);

        // Open must take an IntPtr but all other methods take a type safe SqlitePtr.
        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private SqlitePtr m_database;
}
```",markdown,,,escalated,0.8318374,1
850,Static Analysis,2020-05-18T14:51:00-04:00,83346,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Readers/Tar/TarReader/Open,logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.98149246,1
851,Static Analysis,2020-05-18T14:51:00-04:00,83449,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,WpfAnimatedGif/ImageBehavior/AnimatedSourceChanged,logical,,,2020-05-18T14:51:56-04:00,Static Analysis,997c279f57bcb9b153a0038afb8fb93e61c1da06fdd1367d9b8ed81797c4c0df,200146,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,This disposable local is not guaranteed to be disposed of before the method returns. Use a 'using' statement or surround the local's usage with a try/finally block. Local of type 'ImageAnimationController' is not guaranteed to be disposed of.,plain-text,WpfAnimatedGif/ImageBehavior/AnimatedSourceChanged,WpfAnimatedGif/ImageBehavior/AnimatedSourceChanged,logical,,,,,,EnsureLocalDisposalRule,Gendarme,GEND-EnsureLocalDisposalRule,Ensure Local Disposal ,"This rule checks that disposable locals are always disposed of before
the method returns. Use a 'using' statement (or a try/finally block) to
guarantee local disposal even in the event an unhandled exception
occurs.

**Bad** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    DecodeHeader (stream);
    if (!DecodedHeader.HasContent) {
        return;
    }
    DecodeContent (stream);
    stream.Dispose ();
}
```
**Good** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        DecodeHeader (stream);
        if (!DecodedHeader.HasContent) {
            return;
        }
        DecodeContent (stream);
    }
}
```
**Bad** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    Decode (stream);
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
    stream.Dispose ();
}
```
**Good** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        Decode (stream);
    }
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.979658,1
852,Static Analysis,2020-05-18T14:51:00-04:00,83464,2020-05-18T14:54:28-04:00,high,escalated,,,,,,CWE-227: 7PK - API Abuse,http://cwevis.org/browse/227,227,Microsoft/IdentityModel/Clients/ActiveDirectory/Native/SafeBCryptKeyHandle/BCryptDestroyKey,logical,,,2020-05-18T14:52:00-04:00,Static Analysis,dbd57bbd7b01d2cdc8d58222b94308e03da707a5c7a5e9eab6acb7a083c63ff7,202210,high,,,CWE-676: Use of Potentially Dangerous Function,http://cwevis.org/browse/676,676,This type or method is decorated with [SuppressUnmanagedCodeSecurity] which reduce the number of security checks done when unmanaged code is called. Ensure that use of this attribute does not compromise the security of the application.,plain-text,Microsoft/IdentityModel/Clients/ActiveDirectory/Native/SafeBCryptKeyHandle/BCryptDestroyKey,Microsoft/IdentityModel/Clients/ActiveDirectory/Native/SafeBCryptKeyHandle/BCryptDestroyKey,logical,,,,,,ReviewSuppressUnmanagedCodeSecurityUsageRule,Gendarme,GEND-ReviewSuppressUnmanagedCodeSecurityUsageRule,Review Suppress Unmanaged Code Security Usage ,"This rule fires if a type or method is decorated with the
**[SuppressUnmanagedCodeSecurity]**attribute. This attribute reduces the
security checks done when executing unmanaged code and its usage should
be reviewed to confirm that no exploitable security holes are present.

Example:


```csharp
[SuppressUnmanagedCodeSecurity]
public class Safe {
    [DllImport (""User32.dll"")]
    static extern Boolean MessageBeep (UInt32 beepType);
}
```",markdown,rule-dc56fd6c6aaaf7aef3e91a691e1f8bd8f7311763a2d3286fce16c6c5cf52b5e2,API Abuse,"The software uses an API in a manner contrary to its intended use.

An API is a contract between a caller and a callee. The most common forms of API misuse occurs when the caller does not honor its end of this contract. For example, if a program does not call chdir() after calling chroot(), it violates the contract that specifies how to change the active root directory in a secure fashion. Another good example of library abuse is expecting the callee to return trustworthy DNS information to the caller. In this case, the caller misuses the callee API by making certain assumptions about its behavior (that the return value can be used for authentication purposes). One can also violate the caller-callee contract from the other side. For example, if a coder subclasses SecureRandom and returns a non-random value, the contract is violated.",markdown,,,escalated,0.9466878,1
853,Static Analysis,2020-05-18T14:51:00-04:00,83468,2020-05-18T14:54:28-04:00,high,escalated,,,,,,CWE-227: 7PK - API Abuse,http://cwevis.org/browse/227,227,Microsoft/IdentityModel/Clients/ActiveDirectory/Native/SafeBCryptAlgorithmHandle/BCryptCloseAlgorithmProvider,logical,,,2020-05-18T14:52:00-04:00,Static Analysis,dbd57bbd7b01d2cdc8d58222b94308e03da707a5c7a5e9eab6acb7a083c63ff7,202208,high,,,CWE-676: Use of Potentially Dangerous Function,http://cwevis.org/browse/676,676,This type or method is decorated with [SuppressUnmanagedCodeSecurity] which reduce the number of security checks done when unmanaged code is called. Ensure that use of this attribute does not compromise the security of the application.,plain-text,Microsoft/IdentityModel/Clients/ActiveDirectory/Native/SafeBCryptAlgorithmHandle/BCryptCloseAlgorithmProvider,Microsoft/IdentityModel/Clients/ActiveDirectory/Native/SafeBCryptAlgorithmHandle/BCryptCloseAlgorithmProvider,logical,,,,,,ReviewSuppressUnmanagedCodeSecurityUsageRule,Gendarme,GEND-ReviewSuppressUnmanagedCodeSecurityUsageRule,Review Suppress Unmanaged Code Security Usage ,"This rule fires if a type or method is decorated with the
**[SuppressUnmanagedCodeSecurity]**attribute. This attribute reduces the
security checks done when executing unmanaged code and its usage should
be reviewed to confirm that no exploitable security holes are present.

Example:


```csharp
[SuppressUnmanagedCodeSecurity]
public class Safe {
    [DllImport (""User32.dll"")]
    static extern Boolean MessageBeep (UInt32 beepType);
}
```",markdown,rule-dc56fd6c6aaaf7aef3e91a691e1f8bd8f7311763a2d3286fce16c6c5cf52b5e2,API Abuse,"The software uses an API in a manner contrary to its intended use.

An API is a contract between a caller and a callee. The most common forms of API misuse occurs when the caller does not honor its end of this contract. For example, if a program does not call chdir() after calling chroot(), it violates the contract that specifies how to change the active root directory in a secure fashion. Another good example of library abuse is expecting the callee to return trustworthy DNS information to the caller. In this case, the caller misuses the callee API by making certain assumptions about its behavior (that the return value can be used for authentication purposes). One can also violate the caller-callee contract from the other side. For example, if a coder subclasses SecureRandom and returns a non-random value, the contract is violated.",markdown,,,escalated,0.9466878,1
854,Static Analysis,2020-05-18T14:51:00-04:00,83655,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/IO/ListeningStream/Read,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201125,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/IO/ListeningStream/Read,SharpCompress/IO/ListeningStream/Read,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
855,Static Analysis,2020-05-18T14:51:00-04:00,83725,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Writers/Tar/TarWriter/Write,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201115,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Writers/Tar/TarWriter/Write,SharpCompress/Writers/Tar/TarWriter/Write,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
856,Static Analysis,2020-05-18T14:51:00-04:00,83760,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,WpfAnimatedGif/ImageAnimationController/Play,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201113,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,WpfAnimatedGif/ImageAnimationController/Play,WpfAnimatedGif/ImageAnimationController/Play,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
857,Static Analysis,2020-05-18T14:51:00-04:00,83761,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Atlassian/Shared/Helpers/TaskExtensions/AsTask,logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.98149246,1
858,Static Analysis,2020-05-18T14:51:00-04:00,83763,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Mono/Cecil/AssemblyNameReference/HashPublicKey,logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.98149246,1
859,Static Analysis,2020-05-18T14:51:00-04:00,83767,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/Web/XmlTransform/XmlAttributePreservingWriter/WriteRaw,logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.98149246,1
860,Static Analysis,2020-05-18T14:51:00-04:00,83788,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-388: 7PK - Errors,http://cwevis.org/browse/388,388,GitHub/Shared/ViewModels/ViewModel/RaisePropertyChangedEvent,logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-e3f0972459f483bc18a68eed953b03a6c7e7fb7e495bc2047dd97eaba40f966b,Error Handling,,,,,escalated,0.8818622,1
861,Static Analysis,2020-05-18T14:51:00-04:00,83803,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-227: 7PK - API Abuse,http://cwevis.org/browse/227,227,SharpCompress/Common/CryptographicException/(self),logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-dc56fd6c6aaaf7aef3e91a691e1f8bd8f7311763a2d3286fce16c6c5cf52b5e2,API Abuse,"The software uses an API in a manner contrary to its intended use.

An API is a contract between a caller and a callee. The most common forms of API misuse occurs when the caller does not honor its end of this contract. For example, if a program does not call chdir() after calling chroot(), it violates the contract that specifies how to change the active root directory in a secure fashion. Another good example of library abuse is expecting the callee to return trustworthy DNS information to the caller. In this case, the caller misuses the callee API by making certain assumptions about its behavior (that the return value can be used for authentication purposes). One can also violate the caller-callee contract from the other side. For example, if a coder subclasses SecureRandom and returns a non-random value, the contract is violated.",markdown,,,escalated,0.94525355,1
862,Static Analysis,2020-05-18T14:51:00-04:00,83893,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Readers/AbstractReader/Skip,logical,,,2020-05-18T14:51:56-04:00,Static Analysis,75d7fbc5e63cd65cbf82fa8406c2803dedf9e35f1f97ad3aa206eb0234dfc39e,200151,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,This disposable local is not guaranteed to be disposed of before the method returns. Use a 'using' statement or surround the local's usage with a try/finally block. Local of type 'Stream' is not disposed of (at least not locally).,plain-text,SharpCompress/Readers/AbstractReader/Skip,SharpCompress/Readers/AbstractReader/Skip,logical,,,,,,EnsureLocalDisposalRule,Gendarme,GEND-EnsureLocalDisposalRule,Ensure Local Disposal ,"This rule checks that disposable locals are always disposed of before
the method returns. Use a 'using' statement (or a try/finally block) to
guarantee local disposal even in the event an unhandled exception
occurs.

**Bad** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    DecodeHeader (stream);
    if (!DecodedHeader.HasContent) {
        return;
    }
    DecodeContent (stream);
    stream.Dispose ();
}
```
**Good** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        DecodeHeader (stream);
        if (!DecodedHeader.HasContent) {
            return;
        }
        DecodeContent (stream);
    }
}
```
**Bad** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    Decode (stream);
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
    stream.Dispose ();
}
```
**Good** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        Decode (stream);
    }
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.9816607,1
863,Static Analysis,2020-05-18T14:51:00-04:00,83899,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-388: 7PK - Errors,http://cwevis.org/browse/388,388,GitHub/Shared/Helpers/ActionCommand/set_IsEnabled,logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-e3f0972459f483bc18a68eed953b03a6c7e7fb7e495bc2047dd97eaba40f966b,Error Handling,,,,,escalated,0.8818622,1
864,Static Analysis,2020-05-18T14:51:00-04:00,83910,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Squirrel/UpdateManager/CurrentlyInstalledVersion,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201258,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Squirrel/UpdateManager/CurrentlyInstalledVersion,Squirrel/UpdateManager/CurrentlyInstalledVersion,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
865,Static Analysis,2020-05-18T14:51:00-04:00,83915,2020-05-18T14:54:28-04:00,high,escalated,,,,,,CWE-695: Use of Low-Level Functionality,http://cwevis.org/browse/695,695,Squirrel/Update/UnmanagedPointer/(self),logical,,,2020-05-18T14:51:57-04:00,Static Analysis,3ac9036736202c636e5a647bb8073bf5337a353e654d9216f8af1cf9293e2f3b,200964,high,,,CWE-695: Use of Low-Level Functionality,http://cwevis.org/browse/695,695,The type uses System.IntPtr or System.UIntPtr instead of System.Runtime.InteropServices.SafeHandle. Consider changing the code to use SafeHandle.,plain-text,Squirrel/Update/UnmanagedPointer/(self),Squirrel/Update/UnmanagedPointer/(self),logical,,,,,,PreferSafeHandleRule,Gendarme,GEND-PreferSafeHandleRule,Prefer Safe Handle ,"In general it is best to interop with native code using
**System.Runtime.InteropServices.SafeHandle** instead of
**System.IntPtr** or **System.UIntPtr** because:

SafeHandles are type safe.
SafeHandles are guaranteed to be disposed of during exceptional
conditions like a thread aborting unexpectedly or a stack overflow.
SafeHandles are not vulnerable to reycle attacks.
You don't need to write a finalizer which can be tricky to do because
they execute within their own thread, may execute on partially
constructed objects, and normally tear down the application if you allow
an exception to escape from them.


 **Bad** example:


```csharp
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable.
public sealed class Database {
    ~Database ()
    {
        // This will execute even if the ctor throws so it is important to check
        // to see if the fields are initialized.
        if (m_database != IntPtr.Zero) {
            NativeMethods.sqlite3_close (m_database);
        }
    }

    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        int err = NativeMethods.sqlite3_open_v2 (path, out m_database, flags, IntPtr.Zero);
        // handle errors
    }

    // exec and query methods would go here

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (IntPtr db);

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private IntPtr m_database;
}
```
**Good** example:


```csharp
using System.Runtime.ConstrainedExecution;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable, but you do not need to implement a finalizer because
// SafeHandle will take care of the cleanup.
internal sealed class Database {
    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        m_database = new SqlitePtr (path, flags);
    }

    // exec and query methods would go here

    // This corresponds to a native sqlite3*.
    [SecurityPermission (SecurityAction.InheritanceDemand, UnmanagedCode = true)]
    [SecurityPermission (SecurityAction.Demand, UnmanagedCode = true)]
    private sealed class SqlitePtr : SafeHandle {
        public SqlitePtr (string path, NativeMethods.OpenFlags flags) : base (IntPtr.Zero, true)
        {
            int err = NativeMethods.sqlite3_open_v2 (path, out handle, flags, IntPtr.Zero);
            // handle errors
        }

        public override bool IsInvalid {
            get {
                return (handle == IntPtr.Zero);
            }
        }

        // This will not be called if the handle is invalid. Note that this method should not throw.
        [ReliabilityContract (Consistency.WillNotCorruptState, Cer.MayFail)]
        protected override bool ReleaseHandle ()
        {
            NativeMethods.sqlite3_close (this);
            return true;
        }
    }

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (SqlitePtr db);

        // Open must take an IntPtr but all other methods take a type safe SqlitePtr.
        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private SqlitePtr m_database;
}
```",markdown,GEND-PreferSafeHandleRule,Prefer Safe Handle ,"In general it is best to interop with native code using
**System.Runtime.InteropServices.SafeHandle** instead of
**System.IntPtr** or **System.UIntPtr** because:

SafeHandles are type safe.
SafeHandles are guaranteed to be disposed of during exceptional
conditions like a thread aborting unexpectedly or a stack overflow.
SafeHandles are not vulnerable to reycle attacks.
You don't need to write a finalizer which can be tricky to do because
they execute within their own thread, may execute on partially
constructed objects, and normally tear down the application if you allow
an exception to escape from them.


 **Bad** example:


```csharp
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable.
public sealed class Database {
    ~Database ()
    {
        // This will execute even if the ctor throws so it is important to check
        // to see if the fields are initialized.
        if (m_database != IntPtr.Zero) {
            NativeMethods.sqlite3_close (m_database);
        }
    }

    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        int err = NativeMethods.sqlite3_open_v2 (path, out m_database, flags, IntPtr.Zero);
        // handle errors
    }

    // exec and query methods would go here

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (IntPtr db);

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private IntPtr m_database;
}
```
**Good** example:


```csharp
using System.Runtime.ConstrainedExecution;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable, but you do not need to implement a finalizer because
// SafeHandle will take care of the cleanup.
internal sealed class Database {
    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        m_database = new SqlitePtr (path, flags);
    }

    // exec and query methods would go here

    // This corresponds to a native sqlite3*.
    [SecurityPermission (SecurityAction.InheritanceDemand, UnmanagedCode = true)]
    [SecurityPermission (SecurityAction.Demand, UnmanagedCode = true)]
    private sealed class SqlitePtr : SafeHandle {
        public SqlitePtr (string path, NativeMethods.OpenFlags flags) : base (IntPtr.Zero, true)
        {
            int err = NativeMethods.sqlite3_open_v2 (path, out handle, flags, IntPtr.Zero);
            // handle errors
        }

        public override bool IsInvalid {
            get {
                return (handle == IntPtr.Zero);
            }
        }

        // This will not be called if the handle is invalid. Note that this method should not throw.
        [ReliabilityContract (Consistency.WillNotCorruptState, Cer.MayFail)]
        protected override bool ReleaseHandle ()
        {
            NativeMethods.sqlite3_close (this);
            return true;
        }
    }

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (SqlitePtr db);

        // Open must take an IntPtr but all other methods take a type safe SqlitePtr.
        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private SqlitePtr m_database;
}
```",markdown,,,escalated,0.8318374,1
866,Static Analysis,2020-05-18T14:51:00-04:00,83916,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Archives/GZip/GZipArchiveEntry/OpenEntryStream,logical,,,2020-05-18T14:51:56-04:00,Static Analysis,75d7fbc5e63cd65cbf82fa8406c2803dedf9e35f1f97ad3aa206eb0234dfc39e,200185,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,This disposable local is not guaranteed to be disposed of before the method returns. Use a 'using' statement or surround the local's usage with a try/finally block. Local of type 'Stream' is not disposed of (at least not locally).,plain-text,SharpCompress/Archives/GZip/GZipArchiveEntry/OpenEntryStream,SharpCompress/Archives/GZip/GZipArchiveEntry/OpenEntryStream,logical,,,,,,EnsureLocalDisposalRule,Gendarme,GEND-EnsureLocalDisposalRule,Ensure Local Disposal ,"This rule checks that disposable locals are always disposed of before
the method returns. Use a 'using' statement (or a try/finally block) to
guarantee local disposal even in the event an unhandled exception
occurs.

**Bad** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    DecodeHeader (stream);
    if (!DecodedHeader.HasContent) {
        return;
    }
    DecodeContent (stream);
    stream.Dispose ();
}
```
**Good** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        DecodeHeader (stream);
        if (!DecodedHeader.HasContent) {
            return;
        }
        DecodeContent (stream);
    }
}
```
**Bad** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    Decode (stream);
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
    stream.Dispose ();
}
```
**Good** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        Decode (stream);
    }
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.9816607,1
867,Static Analysis,2020-05-18T14:51:00-04:00,84087,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Common/SevenZip/CStreamSwitch/Set,logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.98149246,1
868,Static Analysis,2020-05-18T14:51:00-04:00,84090,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-465: Pointer Issues,http://cwevis.org/browse/465,465,Atlassian/Bitbucket/Authentication/TokenScope/op_BitwiseAnd,logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-0dd0e028a5ce327b29cd3ffa9ef62c97353c7155364a9a4b89933187ee675fef,Invalid Pointer,,,,,escalated,0.6708902,1
869,Static Analysis,2020-05-18T14:51:00-04:00,84218,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/Web/XmlTransform/XmlAttributePreservingWriter/WriteWhitespace,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201233,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Microsoft/Web/XmlTransform/XmlAttributePreservingWriter/WriteWhitespace,Microsoft/Web/XmlTransform/XmlAttributePreservingWriter/WriteWhitespace,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
870,Static Analysis,2020-05-18T14:51:00-04:00,84273,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-557: Concurrency Issues,http://cwevis.org/browse/557,557,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/Platform/CustomWebBrowser/OnNavigateError,logical,,,2020-05-18T14:51:59-04:00,Static Analysis,ab9e6b1edbd38b66a2611ec55100c9aab72f04a3aa910c40396cc2a546ceb0d4,202199,medium,,,CWE-367: Time-of-check Time-of-use (TOCTOU) Race Condition,http://cwevis.org/browse/367,367,The use of the event does not seems protected properly against NullReferenceException and/or race conditions. Fix the event use to make sure it won't be null or susceptible to a race condition. Possible race condition since field 'NavigateError' is accessed directly.,plain-text,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/Platform/CustomWebBrowser/OnNavigateError,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/Platform/CustomWebBrowser/OnNavigateError,logical,,,,,,ProtectCallToEventDelegatesRule,Gendarme,GEND-ProtectCallToEventDelegatesRule,Protect Call To Event Delegates ,"This rule checks that event invocations are safely implemented. In
particular, the event must be copied into a local to avoid race
conditions and it must be checked for null before it is used (events
will normally be null until a delegate is added to them).

**Bad** example (no check):


```csharp
public event EventHandler Loading;

protected void OnLoading (EventArgs e)
{
    // Loading field could be null, throwing a NullReferenceException
    Loading (this, e);
}
```
**Bad** example (race condition):


```csharp
public event EventHandler Loading;

protected void OnLoading (EventArgs e)
{
    // Loading could be non-null here
    if (Loading != null) {
        // but be null once we get here :(
        Loading (this, e);
    }
}
```
**Good** example:


```csharp
public event EventHandler Loading;
protected void OnLoading (EventArgs e)
{
    EventHandler handler = Loading;
    // handler is either null or non-null
    if (handler != null) {
        // and won't change (i.e. safe from a NullReferenceException)
        handler (this, e);
        // however it is still possible, like the original code, that
        // the Loading method will be removed before, or during its
        // execution. Your code should be safe against such occurance.
    }
}
```",markdown,rule-d1b92de2d2079261b3abb4d275473f8ffefb9c723f42c8c56f72d385fb3abc7c,Concurrency,,,,,escalated,0.7900496,1
871,Static Analysis,2020-05-18T14:51:00-04:00,84281,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,NuGet/RequestHelper/HttpWebResponseWrapper/(self),logical,,,2020-05-18T14:51:56-04:00,Static Analysis,6f1860321c694c4b890c350d71d7ee40b81027bb74667cfd1b1a9db96fdc550e,199996,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,This type contains disposable field(s) which aren't disposed. Ensure that every disposable field(s) is correctly disposed. Since _response is Disposable Dispose() should call _response.Dispose(),plain-text,NuGet/RequestHelper/HttpWebResponseWrapper/(self),NuGet/RequestHelper/HttpWebResponseWrapper/(self),logical,,,,,,DisposableFieldsShouldBeDisposedRule,Gendarme,GEND-DisposableFieldsShouldBeDisposedRule,Disposable Fields Should Be Disposed ,"The rule inspects all fields for disposable types and, if
**System.IDisposable** is implemented, checks that the type's
**Dispose** method does indeed call **Dispose** on all disposable
fields.

**Bad** example:


```csharp
class DoesNotDisposeMember : IDisposable {
    byte[] buffer;
    IDisposable field;

    public void Dispose ()
    {
        buffer = null;
        // field is not disposed
    }
}
```
**Good** example:


```csharp
class DisposePattern : IDisposable {
    byte[] buffer;
    IDisposable field;
    bool disposed;

    public void Dispose ()
    {
        Dispose (true);
    }

    private void Dispose (bool disposing)
    {
        if (!disposed) {
            if (disposing) {
                field.Dispose ();
            }
            buffer = null;
            disposed = true;
        }
    }
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97840893,1
872,Static Analysis,2020-05-18T14:51:00-04:00,84346,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Squirrel/DeltaPackageBuilder/applyDiffToFile,logical,,,2020-05-18T14:51:56-04:00,Static Analysis,3156f39cfcfc302b869a1bfd22f48f0777fcda8f557105e53ac54cc326df9314,200207,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,This disposable local is not guaranteed to be disposed of before the method returns. Use a 'using' statement or surround the local's usage with a try/finally block. Local of type 'IDisposable' is not disposed of (at least not locally).,plain-text,Squirrel/DeltaPackageBuilder/applyDiffToFile,Squirrel/DeltaPackageBuilder/applyDiffToFile,logical,,,,,,EnsureLocalDisposalRule,Gendarme,GEND-EnsureLocalDisposalRule,Ensure Local Disposal ,"This rule checks that disposable locals are always disposed of before
the method returns. Use a 'using' statement (or a try/finally block) to
guarantee local disposal even in the event an unhandled exception
occurs.

**Bad** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    DecodeHeader (stream);
    if (!DecodedHeader.HasContent) {
        return;
    }
    DecodeContent (stream);
    stream.Dispose ();
}
```
**Good** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        DecodeHeader (stream);
        if (!DecodedHeader.HasContent) {
            return;
        }
        DecodeContent (stream);
    }
}
```
**Bad** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    Decode (stream);
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
    stream.Dispose ();
}
```
**Good** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        Decode (stream);
    }
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.9809556,1
873,Static Analysis,2020-05-18T14:51:00-04:00,84417,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/Web/XmlTransform/XmlAttributePreservingWriter/WriteSurrogateCharEntity,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201232,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Microsoft/Web/XmlTransform/XmlAttributePreservingWriter/WriteSurrogateCharEntity,Microsoft/Web/XmlTransform/XmlAttributePreservingWriter/WriteSurrogateCharEntity,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
874,Static Analysis,2020-05-18T14:51:00-04:00,84423,2020-05-18T14:54:28-04:00,medium,false-positive,"tree = require('./tree');

  module.exports = Featured = (function() {
    class Featured extends Command {
      parseOptions(argv) {
        var options;",13,'module' is not defined,admin,2020-05-30T17:28:44-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/featured.js,file,16,16,2020-05-18T14:51:34-04:00,Static Analysis,62173c3357301b64bcb7cb49ad65b9eeb8aa24356212b93fe0fe0166d3218ce7,192434,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'module' is not defined.,plain-text,Atom x64/resources/app/apm/lib/featured.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\featured.js,file,9,3,16,16,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.068299174,0
875,Static Analysis,2020-05-18T14:51:00-04:00,84424,2020-05-18T14:54:28-04:00,medium,false-positive,"_ = require('underscore-plus');

  yargs = require('yargs');

  Command = require('./command');",3,'require' is not defined,admin,2020-05-30T17:28:22-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/featured.js,file,6,6,2020-05-18T14:51:34-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192427,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/featured.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\featured.js,file,18,11,6,6,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
876,Static Analysis,2020-05-18T14:51:00-04:00,84425,2020-05-18T14:54:28-04:00,medium,false-positive,"request = require('./request');

  tree = require('./tree');

  module.exports = Featured = (function() {
    class Featured extends Command {",11,'require' is not defined,admin,2020-05-30T17:28:10-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/featured.js,file,14,14,2020-05-18T14:51:34-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192432,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/featured.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\featured.js,file,17,10,14,14,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
877,Static Analysis,2020-05-18T14:51:00-04:00,84426,2020-05-18T14:54:28-04:00,medium,false-positive,"config = require('./apm');

  request = require('./request');

  tree = require('./tree');",9,'require' is not defined,admin,2020-05-30T17:27:12-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/featured.js,file,12,12,2020-05-18T14:51:34-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192430,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/featured.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\featured.js,file,20,13,12,12,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
878,Static Analysis,2020-05-18T14:51:00-04:00,84428,2020-05-18T14:54:28-04:00,medium,false-positive,"(function() {
  var Command, Featured, _, config, request, tree, yargs;

  _ = require('underscore-plus');

  yargs = require('yargs');",1,'require' is not defined,admin,2020-05-30T17:26:39-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/featured.js,file,4,4,2020-05-18T14:51:34-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192426,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/featured.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\featured.js,file,14,7,4,4,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
879,Static Analysis,2020-05-18T14:51:00-04:00,84433,2020-05-18T14:54:28-04:00,medium,false-positive,"yargs = require('yargs');

  Command = require('./command');

  config = require('./apm');",5,'require' is not defined,admin,2020-05-30T17:26:24-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/featured.js,file,8,8,2020-05-18T14:51:34-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192428,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/featured.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\featured.js,file,20,13,8,8,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
880,Static Analysis,2020-05-18T14:51:00-04:00,84439,2020-05-18T14:54:28-04:00,medium,false-positive,"Command = require('./command');

  config = require('./apm');

  request = require('./request');",7,'require' is not defined,admin,2020-05-30T17:26:14-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/featured.js,file,10,10,2020-05-18T14:51:34-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192429,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/featured.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\featured.js,file,19,12,10,10,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
881,Static Analysis,2020-05-18T14:51:00-04:00,84492,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-189: Numeric Errors,http://cwevis.org/browse/189,189,SharpCompress/Compressors/LZMA/RangeCoder/Encoder/Encode,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,03ba04f65bdee74e716d09d64feb1f004a116c5543f675d9955d1297acbf5baf,201071,medium,,,CWE-190: Integer Overflow or Wraparound,http://cwevis.org/browse/190,190,This method casts the result of an integer multiplication into a larger integer. This may result in an overflow before the cast can be done. Cast the operands instead of the result.,plain-text,SharpCompress/Compressors/LZMA/RangeCoder/Encoder/Encode,SharpCompress/Compressors/LZMA/RangeCoder/Encoder/Encode,logical,,,,,,ReviewCastOnIntegerMultiplicationRule,Gendarme,GEND-ReviewCastOnIntegerMultiplicationRule,Review Cast On Integer Multiplication ,"This rule checks for integral multiply operations where the result is
cast to a larger integral type. It's safer instead to cast an operand to
the larger type to minimize the chance of overflow.

**Bad** example:


```csharp
public long Bad (int a, int b)
{
    // e.g. Bad (Int32.MaxInt, Int32.MaxInt) == 1
    return a * b;
}
```
**Good** example:


```csharp
public long Good (int a, int b)
{
    // e.g. Good (Int32.MaxInt, Int32.MaxInt) == 4611686014132420609
    return (long) a * b;
}
```",markdown,rule-87c4a91bc4c9e20c70f0637bd67a4d03975f25b3ec675b9cc13d0f04540c76a6,Numeric Error,,,,,escalated,0.9599974,1
882,Static Analysis,2020-05-18T14:51:00-04:00,84515,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/Web/XmlTransform/XmlTransformation/RemoveTransformationService,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201241,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Microsoft/Web/XmlTransform/XmlTransformation/RemoveTransformationService,Microsoft/Web/XmlTransform/XmlTransformation/RemoveTransformationService,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
883,Static Analysis,2020-05-18T14:51:00-04:00,84560,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Compressors/BZip2/CBZip2OutputStream/WriteByte,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201176,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Compressors/BZip2/CBZip2OutputStream/WriteByte,SharpCompress/Compressors/BZip2/CBZip2OutputStream/WriteByte,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
884,Static Analysis,2020-05-18T14:51:00-04:00,84579,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Compressors/BZip2/BZip2Stream/Seek,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201172,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Compressors/BZip2/BZip2Stream/Seek,SharpCompress/Compressors/BZip2/BZip2Stream/Seek,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
885,Static Analysis,2020-05-18T14:51:00-04:00,84585,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Readers/AbstractReader/WriteEntryTo,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201119,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Readers/AbstractReader/WriteEntryTo,SharpCompress/Readers/AbstractReader/WriteEntryTo,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
886,Static Analysis,2020-05-18T14:51:00-04:00,84647,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/Alm/Cli/Program/DetectTraceEnvironmentKey,logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.98149246,1
887,Static Analysis,2020-05-18T14:51:00-04:00,85068,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Archives/AbstractWritableArchive/AddEntry,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201200,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Archives/AbstractWritableArchive/AddEntry,SharpCompress/Archives/AbstractWritableArchive/AddEntry,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
888,Static Analysis,2020-05-18T14:51:00-04:00,85078,2020-05-18T14:54:28-04:00,medium,false-positive,"yargs = require('yargs');

  config = require('./apm');

  Command = require('./command');",9,'require' is not defined,admin,2020-05-30T17:26:03-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/dedupe.js,file,12,12,2020-05-18T14:51:34-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192222,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/dedupe.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\dedupe.js,file,19,12,12,12,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
889,Static Analysis,2020-05-18T14:51:00-04:00,85079,2020-05-18T14:54:28-04:00,high,escalated,"if (options.argv.quiet) {
          dedupeArgs.push('--quiet');
        }
        if (vsArgs = this.getVisualStudioFlags()) {
          dedupeArgs.push(vsArgs);
        }
        ref = options.argv._;",49,,,,CWE-697: Incorrect Comparison,http://cwevis.org/browse/697,697,Atom x64/resources/app/apm/lib/dedupe.js,file,52,52,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-c271f2bb931810eef633f7c736d1dd934fbd6ed5f62ac8d8ea39ade811190622,Comparison,,,,,escalated,0.9110538,1
890,Static Analysis,2020-05-18T14:51:00-04:00,85081,2020-05-18T14:54:28-04:00,high,escalated,"parseOptions(argv) {
        var options;
        options = yargs(argv).wrap(Math.min(100, yargs.terminalWidth()));
        options.usage(""\nUsage: apm dedupe [<package_name>...]\n\nReduce duplication in the node_modules folder in the current directory.\n\nThis command is experimental."");
        return options.alias('h', 'help').describe('help', 'Print this usage message');
      }",28,,,,CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'),http://cwevis.org/browse/79,79,Atom x64/resources/app/apm/lib/dedupe.js,file,31,31,2020-05-18T14:51:34-04:00,Static Analysis,b4414dd3b1087806bb332146e753f5917a3aec259e29c568ca289f9ab428d0d4,192227,high,,,CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS),http://cwevis.org/browse/80,80,HTML passed in to function 'options.usage',plain-text,Atom x64/resources/app/apm/lib/dedupe.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\dedupe.js,file,22,9,31,31,xss,no-mixed-html,ESLint,ESLINT-XSS-no-mixed-html,No mixed html,"Wanted a way to catch XSS issues in code before they end up in production.

## Rule Details

This rule aims to catch as many XSS issues by examining the code as possible.
The rule checks for mixed html/non-html content, unescaped input, etc.

The following patterns are considered warnings:

```js

// Mixed content
var x = '<div>' + input + '</div>';
$node.html( '<div>' + input + '</div>' );

// Unsafe container names.
var html = input;
var text = htmlInput;
displayValue( htmlInput );

// Checking certain expression parameters that might end up in the variables.
var htmlItems = [ input1, input2 ].join();
var textItems = [ '<div>', input, '</div>' ].join();
var tag = isNumbered ? '<ol>' : '<ul>';

// Checking function return values.
var createHtml = function( item ) { return item.name; }
var createBox = function( item ) { return '<div>' + encode( item ) + '</div>' }

```

The following patterns are not warnings:

```js

// Proper encoding
var html = '<div>' + encode( input ) + '</div>';
$node.html( '<div>' + encode( input ) + '</div>' );

// Proper container names
var html = '<img src=""happy.png"">';
var text = textbox.value;

```

## When Not To Use It

If you are creating a Node.js application that doesn't output any HTML, you can
safely disable this rule.

## Further Reading

- [XSS Prevention CHeat Sheet - OWASP](https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet)",markdown,rule-396ebe8bb0c3dc5d4eb2b5368a97688fdb0f2587416453645c3d06db2b216479,Cross-site Scripting (XSS),"Cross-site scripting (XSS) vulnerabilities occur when:
1. Untrusted data enters a web application, typically from a web request.
2. The web application dynamically generates a web page that contains this untrusted data.
3. During page generation, the application does not prevent the data from containing content that is executable by a web browser, such as JavaScript, HTML tags, HTML attributes, mouse events, Flash, ActiveX, etc.
4. A victim visits the generated web page through a web browser, which contains malicious script that was injected using the untrusted data.
5. Since the script comes from a web page that was sent by the web server, the victim's web browser executes the malicious script in the context of the web server's domain.
6. This effectively violates the intention of the web browser's same-origin policy, which states that scripts in one domain should not be able to access resources or run code in a different domain.
There are three main kinds of XSS:

*Reflected XSS (or Non-Persistent)*

The server reads data directly from the HTTP request and reflects it back in the HTTP response. Reflected XSS exploits occur when an attacker causes a victim to supply dangerous content to a vulnerable web application, which is then reflected back to the victim and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to the victim. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces a victim to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the victim, the content is executed by the victim's browser.

*Stored XSS (or Persistent)*

The application stores dangerous data in a database, message forum, visitor log, or other trusted data store. At a later time, the dangerous data is subsequently read back into the application and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. For example, the attacker might inject XSS into a log message, which might not be handled properly when an administrator views the logs.

*DOM-Based XSS*

In DOM-based XSS, the client performs the injection of XSS into the page; in the other types, the server performs the injection. DOM-based XSS generally involves server-controlled, trusted script that is sent to the client, such as Javascript that performs sanity checks on a form before the user submits it. If the server-supplied script processes user-supplied data and then injects it back into the web page (such as with dynamic HTML), then DOM-based XSS is possible.

Once the malicious script is injected, the attacker can perform a variety of malicious activities. The attacker could transfer private information, such as cookies that may include session information, from the victim's machine to the attacker. The attacker could send malicious requests to a web site on behalf of the victim, which could be especially dangerous to the site if the victim has administrator privileges to manage that site. Phishing attacks could be used to emulate trusted web sites and trick the victim into entering a password, allowing the attacker to compromise the victim's account on that web site. Finally, the script could exploit a vulnerability in the web browser itself possibly taking over the victim's machine, sometimes referred to as ""drive-by hacking.""

In many cases, the attack can be launched without the victim even being aware of it. Even with careful users, attackers frequently use a variety of methods to encode the malicious portion of the attack, such as URL encoding or Unicode, so the request looks less suspicious.

**Guidance**

To remedy XSS vulnerabilities, it is important to never use untrusted or unfiltered data within the code of a HTML page.

Untrusted data can originate not only form the client but potentially a third party or previously uploaded file etc.

Filtering of untrusted data typically involves converting special characters to their HTML entity encoded counterparts (however, other methods do exist, see references).

These special characters include:

* `&`
* `<`
* `>`
* `""`
* `'`
* `/`

An example of HTML entity encoding is converting `<` to `&lt;`.

Although it is possible to filter untrusted input, there are five locations within an HTML page where untrusted input (even if it has been filtered) should never be placed:

1. Directly in a script.
2. Inside an HTML comment.
3. In an attribute name.
4. In a tag name.
5. Directly in CSS.

Each of these locations have their own form of escaping and filtering.

Because many browsers attempt to implement XSS protection, any manual verification of this finding should be conducted using multiple different browsers and browser
versions.

**References**

- [WASC](http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting)
- [Secunia](http://secunia.com/advisories/9716/)
- [OWASP XSS Prevention Cheat Sheet](https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet)
- [OWASP DOM Based XSS](https://www.owasp.org/index.php/DOM_Based_XSS)
- [OWASP DOM Based XSS Prevention Cheat Sheet](https://www.owasp.org/index.php/DOM_based_XSS_Prevention_Cheat_Sheet)",markdown,,,escalated,0.8266207,1
891,Static Analysis,2020-05-18T14:51:00-04:00,85083,2020-05-18T14:54:28-04:00,medium,false-positive,"fs = require('./fs');

  module.exports = Dedupe = (function() {
    class Dedupe extends Command {
      constructor() {
        super();",15,'module' is not defined,admin,2020-05-30T17:25:47-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/dedupe.js,file,18,18,2020-05-18T14:51:34-04:00,Static Analysis,62173c3357301b64bcb7cb49ad65b9eeb8aa24356212b93fe0fe0166d3218ce7,192225,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'module' is not defined.,plain-text,Atom x64/resources/app/apm/lib/dedupe.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\dedupe.js,file,9,3,18,18,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.068299174,0
892,Static Analysis,2020-05-18T14:51:00-04:00,85084,2020-05-18T14:54:28-04:00,medium,false-positive,"path = require('path');

  async = require('async');

  _ = require('underscore-plus');",3,'require' is not defined,admin,2020-05-30T17:25:33-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/dedupe.js,file,6,6,2020-05-18T14:51:34-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192219,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/dedupe.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\dedupe.js,file,18,11,6,6,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
893,Static Analysis,2020-05-18T14:51:00-04:00,85086,2020-05-18T14:54:28-04:00,high,false-positive,"}
        ref = options.argv._;
        for (i = 0, len = ref.length; i < len; i++) {
          packageName = ref[i];
          dedupeArgs.push(packageName);
        }
        fs.makeTreeSync(this.atomDirectory);",54,Generic Object Injection Sink,admin,2020-05-27T15:30:31-04:00,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/lib/dedupe.js,file,57,57,2020-05-18T14:51:34-04:00,Static Analysis,6569b353992e88510a975ec3412e07f9c2539e0cf8eb813d02c1c97e2a312d82,192238,high,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Generic Object Injection Sink,plain-text,Atom x64/resources/app/apm/lib/dedupe.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\dedupe.js,file,31,25,57,57,security,detect-object-injection,ESLint,ESLINT-SECURITY-detect-object-injection,Detect object injection,"Detects `variable[key]` as a left- or right-hand assignment operand.

More information: [The Dangers of Square Bracket Notation](https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/the-dangers-of-square-bracket-notation.md)",markdown,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.9251437,1
894,Static Analysis,2020-05-18T14:51:00-04:00,85087,2020-05-18T14:54:28-04:00,medium,false-positive,"Command = require('./command');

  fs = require('./fs');

  module.exports = Dedupe = (function() {
    class Dedupe extends Command {",13,'require' is not defined,admin,2020-05-30T17:25:23-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/dedupe.js,file,16,16,2020-05-18T14:51:34-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192224,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/dedupe.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\dedupe.js,file,15,8,16,16,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270798,0
895,Static Analysis,2020-05-18T14:51:00-04:00,85088,2020-05-18T14:54:28-04:00,medium,false-positive,"_ = require('underscore-plus');

  yargs = require('yargs');

  config = require('./apm');",7,'require' is not defined,admin,2020-05-30T17:25:11-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/dedupe.js,file,10,10,2020-05-18T14:51:34-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192221,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/dedupe.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\dedupe.js,file,18,11,10,10,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270798,0
896,Static Analysis,2020-05-18T14:51:00-04:00,85093,2020-05-18T14:54:28-04:00,medium,false-positive,"config = require('./apm');

  Command = require('./command');

  fs = require('./fs');",11,'require' is not defined,admin,2020-05-30T17:24:55-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/dedupe.js,file,14,14,2020-05-18T14:51:34-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192223,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/dedupe.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\dedupe.js,file,20,13,14,14,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
897,Static Analysis,2020-05-18T14:51:00-04:00,85096,2020-05-18T14:54:28-04:00,medium,false-positive,"this.atomDirectory = config.getAtomDirectory();
        this.atomPackagesDirectory = path.join(this.atomDirectory, 'packages');
        this.atomNodeDirectory = path.join(this.atomDirectory, '.node-gyp');
        this.atomNpmPath = require.resolve('npm/bin/npm-cli');
      }

      parseOptions(argv) {",22,'require' is not defined,admin,2020-05-30T17:24:44-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/dedupe.js,file,25,25,2020-05-18T14:51:34-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192226,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/dedupe.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\dedupe.js,file,35,28,25,25,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
898,Static Analysis,2020-05-18T14:51:00-04:00,85097,2020-05-18T14:54:28-04:00,medium,false-positive,"}

      dedupeModules(options, callback) {
        process.stdout.write('Deduping modules ');
        return this.forkDedupeCommand(options, (...args) => {
          return this.logCommandResults(callback, ...args);
        });",33,'process' is not defined,admin,2020-05-30T17:24:29-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/dedupe.js,file,36,36,2020-05-18T14:51:34-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,192228,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/dedupe.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\dedupe.js,file,16,9,36,36,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
899,Static Analysis,2020-05-18T14:51:00-04:00,85098,2020-05-18T14:54:28-04:00,medium,false-positive,"(function() {
  var Command, Dedupe, _, async, config, fs, path, yargs;

  path = require('path');

  async = require('async');",1,'require' is not defined,admin,2020-05-30T17:24:16-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/dedupe.js,file,4,4,2020-05-18T14:51:34-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192218,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/dedupe.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\dedupe.js,file,17,10,4,4,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
900,Static Analysis,2020-05-18T14:51:00-04:00,85101,2020-05-18T14:54:28-04:00,medium,false-positive,"async = require('async');

  _ = require('underscore-plus');

  yargs = require('yargs');",5,'require' is not defined,admin,2020-05-30T17:24:02-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/dedupe.js,file,8,8,2020-05-18T14:51:34-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192220,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/dedupe.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\dedupe.js,file,14,7,8,8,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
901,Static Analysis,2020-05-18T14:51:00-04:00,85104,2020-05-18T14:54:28-04:00,medium,false-positive,"dedupeArgs.push(packageName);
        }
        fs.makeTreeSync(this.atomDirectory);
        env = _.extend({}, process.env, {
          HOME: this.atomNodeDirectory,
          RUSTUP_HOME: config.getRustupHomeDirPath()
        });",58,'process' is not defined,admin,2020-05-30T17:23:49-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/dedupe.js,file,61,61,2020-05-18T14:51:34-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,192240,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/dedupe.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\dedupe.js,file,35,28,61,61,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
902,Static Analysis,2020-05-18T14:51:00-04:00,85106,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-755: Improper Handling of Exceptional Conditions,http://cwevis.org/browse/755,755,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/WindowsFormsWebAuthenticationDialogBase/CreateExceptionForAuthenticationUiFailed,logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,GEND-CheckNewExceptionWithoutThrowingRule,Check New Exception Without Throwing ,"This rule checks for exception objects which are created but not thrown,
not returned, and not passed to another method as an argument.

**Bad** example:


```csharp
void MissingThrow (object arg)
{
    if (arg == null) {
        new ArgumentNullException (""arg"");
    }
    DoWork (arg);
}
```
**Good** examples:


```csharp
void Throw (object arg)
{
    if (arg == null) {
        throw new ArgumentNullException (""arg"");
    }
    DoWork (arg);
}

Exception CreateException ()
{
    return new Exception ();
}
```",markdown,,,escalated,0.82145643,1
903,Static Analysis,2020-05-18T14:51:00-04:00,85141,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-189: Numeric Errors,http://cwevis.org/browse/189,189,SharpCompress/Compressors/PPMd/I1/Allocator/Initialize,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,03ba04f65bdee74e716d09d64feb1f004a116c5543f675d9955d1297acbf5baf,201059,medium,,,CWE-190: Integer Overflow or Wraparound,http://cwevis.org/browse/190,190,This method casts the result of an integer multiplication into a larger integer. This may result in an overflow before the cast can be done. Cast the operands instead of the result.,plain-text,SharpCompress/Compressors/PPMd/I1/Allocator/Initialize,SharpCompress/Compressors/PPMd/I1/Allocator/Initialize,logical,,,,,,ReviewCastOnIntegerMultiplicationRule,Gendarme,GEND-ReviewCastOnIntegerMultiplicationRule,Review Cast On Integer Multiplication ,"This rule checks for integral multiply operations where the result is
cast to a larger integral type. It's safer instead to cast an operand to
the larger type to minimize the chance of overflow.

**Bad** example:


```csharp
public long Bad (int a, int b)
{
    // e.g. Bad (Int32.MaxInt, Int32.MaxInt) == 1
    return a * b;
}
```
**Good** example:


```csharp
public long Good (int a, int b)
{
    // e.g. Good (Int32.MaxInt, Int32.MaxInt) == 4611686014132420609
    return (long) a * b;
}
```",markdown,rule-87c4a91bc4c9e20c70f0637bd67a4d03975f25b3ec675b9cc13d0f04540c76a6,Numeric Error,,,,,escalated,0.9599974,1
904,Static Analysis,2020-05-18T14:51:00-04:00,85185,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Squirrel/Bsdiff/WrappingStream/Flush,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201279,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Squirrel/Bsdiff/WrappingStream/Flush,Squirrel/Bsdiff/WrappingStream/Flush,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
905,Static Analysis,2020-05-18T14:51:00-04:00,85326,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,WpfAnimatedGif/ImageBehavior/ImageControlUnloaded,logical,,,2020-05-18T14:51:56-04:00,Static Analysis,997c279f57bcb9b153a0038afb8fb93e61c1da06fdd1367d9b8ed81797c4c0df,200147,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,This disposable local is not guaranteed to be disposed of before the method returns. Use a 'using' statement or surround the local's usage with a try/finally block. Local of type 'ImageAnimationController' is not guaranteed to be disposed of.,plain-text,WpfAnimatedGif/ImageBehavior/ImageControlUnloaded,WpfAnimatedGif/ImageBehavior/ImageControlUnloaded,logical,,,,,,EnsureLocalDisposalRule,Gendarme,GEND-EnsureLocalDisposalRule,Ensure Local Disposal ,"This rule checks that disposable locals are always disposed of before
the method returns. Use a 'using' statement (or a try/finally block) to
guarantee local disposal even in the event an unhandled exception
occurs.

**Bad** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    DecodeHeader (stream);
    if (!DecodedHeader.HasContent) {
        return;
    }
    DecodeContent (stream);
    stream.Dispose ();
}
```
**Good** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        DecodeHeader (stream);
        if (!DecodedHeader.HasContent) {
            return;
        }
        DecodeContent (stream);
    }
}
```
**Bad** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    Decode (stream);
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
    stream.Dispose ();
}
```
**Good** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        Decode (stream);
    }
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.979658,1
906,Static Analysis,2020-05-18T14:51:00-04:00,85396,2020-05-18T14:54:28-04:00,high,escalated,,,,,,CWE-693: Protection Mechanism Failure,http://cwevis.org/browse/693,693,Squirrel/Shell/FileIcon/SHGetFileInfo,logical,,,2020-05-18T14:51:57-04:00,Static Analysis,4a2a9ce71cb4fac565f39f438ef225eb5afcd377ff2c7bf0f357075f6e796587,200498,high,,,CWE-693: Protection Mechanism Failure,http://cwevis.org/browse/693,693,"Marshaling information for string types is missing and what is required may be different from what you expected the default to be. Add [DllImport CharSet=] to the method or [MarshalAs] on the parameter(s) Parameter 'pszPath', of type 'String', does not have [MarshalAs] attribute, yet no [DllImport CharSet=] is set for the method 'SHGetFileInfo'.",plain-text,Squirrel/Shell/FileIcon/SHGetFileInfo,Squirrel/Shell/FileIcon/SHGetFileInfo,logical,,,,,,MarshalStringsInPInvokeDeclarationsRule,Gendarme,GEND-MarshalStringsInPInvokeDeclarationsRule,Marshal Strings In PInvoke Declarations ,"This rule will fire if a P/Invoke method has System.String or
System.Text.StringBuilder arguments, and the DllImportAttribute does not
specify the **CharSet**, and the string arguments are not decorated with
**[MarshalAs]**. This is important because the defaults are different on
the various platforms. On Mono the default is to always use utf-8. On
.NET the default is to use the ANSI CharSet which is the native encoding
and will typically be some variant of ASCII or something like Shift-JIS.
On Compact .NET the default is utf-16.

**Bad** example:


```csharp
[DllImport (""coredll"")]
static extern int SHCreateShortcut (StringBuilder szShortcut, StringBuilder szTarget);
```
**Good** examples:


```csharp
[DllImport (""coredll"", CharSet = CharSet.Auto)]
static extern int SHCreateShortcut (StringBuilder szShortcut, StringBuilder szTarget);

[DllImport (""coredll"")]
static extern int SHCreateShortcut ([MarshalAs (UnmanagedType.LPTStr)] StringBuilder szShortcut,
[MarshalAs (UnmanagedType.LPTStr)] StringBuilder szTarget);
```",markdown,GEND-MarshalStringsInPInvokeDeclarationsRule,Marshal Strings In PInvoke Declarations ,"This rule will fire if a P/Invoke method has System.String or
System.Text.StringBuilder arguments, and the DllImportAttribute does not
specify the **CharSet**, and the string arguments are not decorated with
**[MarshalAs]**. This is important because the defaults are different on
the various platforms. On Mono the default is to always use utf-8. On
.NET the default is to use the ANSI CharSet which is the native encoding
and will typically be some variant of ASCII or something like Shift-JIS.
On Compact .NET the default is utf-16.

**Bad** example:


```csharp
[DllImport (""coredll"")]
static extern int SHCreateShortcut (StringBuilder szShortcut, StringBuilder szTarget);
```
**Good** examples:


```csharp
[DllImport (""coredll"", CharSet = CharSet.Auto)]
static extern int SHCreateShortcut (StringBuilder szShortcut, StringBuilder szTarget);

[DllImport (""coredll"")]
static extern int SHCreateShortcut ([MarshalAs (UnmanagedType.LPTStr)] StringBuilder szShortcut,
[MarshalAs (UnmanagedType.LPTStr)] StringBuilder szTarget);
```",markdown,,,escalated,0.59391695,1
907,Static Analysis,2020-05-18T14:51:00-04:00,85400,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/Web/XmlTransform/XmlAttributePreservingWriter/WriteString,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201231,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Microsoft/Web/XmlTransform/XmlAttributePreservingWriter/WriteString,Microsoft/Web/XmlTransform/XmlAttributePreservingWriter/WriteString,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
908,Static Analysis,2020-05-18T14:51:00-04:00,85515,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-465: Pointer Issues,http://cwevis.org/browse/465,465,GitHub/Shared/Helpers/AccessKeysManagerScoping/SetIsEnabled,logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-0dd0e028a5ce327b29cd3ffa9ef62c97353c7155364a9a4b89933187ee675fef,Invalid Pointer,,,,,escalated,0.6708902,1
909,Static Analysis,2020-05-18T14:51:00-04:00,85517,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/Web/XmlTransform/PositionTrackingTextReader/Peek,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201203,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Microsoft/Web/XmlTransform/PositionTrackingTextReader/Peek,Microsoft/Web/XmlTransform/PositionTrackingTextReader/Peek,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
910,Static Analysis,2020-05-18T14:51:00-04:00,85526,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Mono/Cecil/CryptoService/ComputeHash,logical,,,2020-05-18T14:51:56-04:00,Static Analysis,e3196df7426ae462a04d023c5a50435cf7ec5634b1f1d66c263ec532841e97ed,200237,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,This disposable local is not guaranteed to be disposed of before the method returns. Use a 'using' statement or surround the local's usage with a try/finally block. Local of type 'SHA1Managed' is not disposed of (at least not locally).,plain-text,Mono/Cecil/CryptoService/ComputeHash,Mono/Cecil/CryptoService/ComputeHash,logical,,,,,,EnsureLocalDisposalRule,Gendarme,GEND-EnsureLocalDisposalRule,Ensure Local Disposal ,"This rule checks that disposable locals are always disposed of before
the method returns. Use a 'using' statement (or a try/finally block) to
guarantee local disposal even in the event an unhandled exception
occurs.

**Bad** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    DecodeHeader (stream);
    if (!DecodedHeader.HasContent) {
        return;
    }
    DecodeContent (stream);
    stream.Dispose ();
}
```
**Good** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        DecodeHeader (stream);
        if (!DecodedHeader.HasContent) {
            return;
        }
        DecodeContent (stream);
    }
}
```
**Bad** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    Decode (stream);
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
    stream.Dispose ();
}
```
**Good** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        Decode (stream);
    }
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.9815898,1
911,Static Analysis,2020-05-18T14:51:00-04:00,85546,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/IO/RewindableStream/Rewind,logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.98149246,1
912,Static Analysis,2020-05-18T14:51:00-04:00,85626,2020-05-18T14:54:28-04:00,medium,false-positive,"_ = require('underscore-plus');

  module.exports = function(items, options = {}, callback) {
    var emptyMessage, i, index, item, itemLine, len, ref, results;
    if (_.isFunction(options)) {
      callback = options;",3,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/tree.js,file,6,6,2020-05-18T14:51:42-04:00,Static Analysis,62173c3357301b64bcb7cb49ad65b9eeb8aa24356212b93fe0fe0166d3218ce7,195040,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'module' is not defined.,plain-text,Atom x64/resources/app/apm/lib/tree.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\tree.js,file,9,3,6,6,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.068299174,0
913,Static Analysis,2020-05-18T14:51:00-04:00,85628,2020-05-18T14:54:28-04:00,high,false-positive,"} else {
      results = [];
      for (index = i = 0, len = items.length; i < len; index = ++i) {
        item = items[index];
        if (index === items.length - 1) {
          itemLine = '\u2514\u2500\u2500 ';
        } else {",20,Generic Object Injection Sink,admin,2020-05-27T15:30:17-04:00,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/lib/tree.js,file,23,23,2020-05-18T14:51:42-04:00,Static Analysis,6569b353992e88510a975ec3412e07f9c2539e0cf8eb813d02c1c97e2a312d82,195042,high,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Generic Object Injection Sink,plain-text,Atom x64/resources/app/apm/lib/tree.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\tree.js,file,28,16,23,23,security,detect-object-injection,ESLint,ESLINT-SECURITY-detect-object-injection,Detect object injection,"Detects `variable[key]` as a left- or right-hand assignment operand.

More information: [The Dangers of Square Bracket Notation](https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/the-dangers-of-square-bracket-notation.md)",markdown,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.9251437,1
914,Static Analysis,2020-05-18T14:51:00-04:00,85629,2020-05-18T14:54:28-04:00,medium,false-positive,"(function() {
  var _;

  _ = require('underscore-plus');

  module.exports = function(items, options = {}, callback) {
    var emptyMessage, i, index, item, itemLine, len, ref, results;",1,'require' is not defined,admin,2020-05-30T17:23:09-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/tree.js,file,4,4,2020-05-18T14:51:42-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,195039,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/tree.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\tree.js,file,14,7,4,4,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
915,Static Analysis,2020-05-18T14:51:00-04:00,85669,2020-05-18T14:54:28-04:00,high,escalated,,,,,,CWE-695: Use of Low-Level Functionality,http://cwevis.org/browse/695,695,Microsoft/IdentityModel/Clients/ActiveDirectory/Native/BCryptNative/BCRYPT_OAEP_PADDING_INFO/(self),logical,,,2020-05-18T14:51:59-04:00,Static Analysis,3ac9036736202c636e5a647bb8073bf5337a353e654d9216f8af1cf9293e2f3b,202157,high,,,CWE-695: Use of Low-Level Functionality,http://cwevis.org/browse/695,695,The type uses System.IntPtr or System.UIntPtr instead of System.Runtime.InteropServices.SafeHandle. Consider changing the code to use SafeHandle.,plain-text,Microsoft/IdentityModel/Clients/ActiveDirectory/Native/BCryptNative/BCRYPT_OAEP_PADDING_INFO/(self),Microsoft/IdentityModel/Clients/ActiveDirectory/Native/BCryptNative/BCRYPT_OAEP_PADDING_INFO/(self),logical,,,,,,PreferSafeHandleRule,Gendarme,GEND-PreferSafeHandleRule,Prefer Safe Handle ,"In general it is best to interop with native code using
**System.Runtime.InteropServices.SafeHandle** instead of
**System.IntPtr** or **System.UIntPtr** because:

SafeHandles are type safe.
SafeHandles are guaranteed to be disposed of during exceptional
conditions like a thread aborting unexpectedly or a stack overflow.
SafeHandles are not vulnerable to reycle attacks.
You don't need to write a finalizer which can be tricky to do because
they execute within their own thread, may execute on partially
constructed objects, and normally tear down the application if you allow
an exception to escape from them.


 **Bad** example:


```csharp
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable.
public sealed class Database {
    ~Database ()
    {
        // This will execute even if the ctor throws so it is important to check
        // to see if the fields are initialized.
        if (m_database != IntPtr.Zero) {
            NativeMethods.sqlite3_close (m_database);
        }
    }

    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        int err = NativeMethods.sqlite3_open_v2 (path, out m_database, flags, IntPtr.Zero);
        // handle errors
    }

    // exec and query methods would go here

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (IntPtr db);

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private IntPtr m_database;
}
```
**Good** example:


```csharp
using System.Runtime.ConstrainedExecution;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable, but you do not need to implement a finalizer because
// SafeHandle will take care of the cleanup.
internal sealed class Database {
    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        m_database = new SqlitePtr (path, flags);
    }

    // exec and query methods would go here

    // This corresponds to a native sqlite3*.
    [SecurityPermission (SecurityAction.InheritanceDemand, UnmanagedCode = true)]
    [SecurityPermission (SecurityAction.Demand, UnmanagedCode = true)]
    private sealed class SqlitePtr : SafeHandle {
        public SqlitePtr (string path, NativeMethods.OpenFlags flags) : base (IntPtr.Zero, true)
        {
            int err = NativeMethods.sqlite3_open_v2 (path, out handle, flags, IntPtr.Zero);
            // handle errors
        }

        public override bool IsInvalid {
            get {
                return (handle == IntPtr.Zero);
            }
        }

        // This will not be called if the handle is invalid. Note that this method should not throw.
        [ReliabilityContract (Consistency.WillNotCorruptState, Cer.MayFail)]
        protected override bool ReleaseHandle ()
        {
            NativeMethods.sqlite3_close (this);
            return true;
        }
    }

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (SqlitePtr db);

        // Open must take an IntPtr but all other methods take a type safe SqlitePtr.
        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private SqlitePtr m_database;
}
```",markdown,GEND-PreferSafeHandleRule,Prefer Safe Handle ,"In general it is best to interop with native code using
**System.Runtime.InteropServices.SafeHandle** instead of
**System.IntPtr** or **System.UIntPtr** because:

SafeHandles are type safe.
SafeHandles are guaranteed to be disposed of during exceptional
conditions like a thread aborting unexpectedly or a stack overflow.
SafeHandles are not vulnerable to reycle attacks.
You don't need to write a finalizer which can be tricky to do because
they execute within their own thread, may execute on partially
constructed objects, and normally tear down the application if you allow
an exception to escape from them.


 **Bad** example:


```csharp
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable.
public sealed class Database {
    ~Database ()
    {
        // This will execute even if the ctor throws so it is important to check
        // to see if the fields are initialized.
        if (m_database != IntPtr.Zero) {
            NativeMethods.sqlite3_close (m_database);
        }
    }

    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        int err = NativeMethods.sqlite3_open_v2 (path, out m_database, flags, IntPtr.Zero);
        // handle errors
    }

    // exec and query methods would go here

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (IntPtr db);

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private IntPtr m_database;
}
```
**Good** example:


```csharp
using System.Runtime.ConstrainedExecution;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable, but you do not need to implement a finalizer because
// SafeHandle will take care of the cleanup.
internal sealed class Database {
    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        m_database = new SqlitePtr (path, flags);
    }

    // exec and query methods would go here

    // This corresponds to a native sqlite3*.
    [SecurityPermission (SecurityAction.InheritanceDemand, UnmanagedCode = true)]
    [SecurityPermission (SecurityAction.Demand, UnmanagedCode = true)]
    private sealed class SqlitePtr : SafeHandle {
        public SqlitePtr (string path, NativeMethods.OpenFlags flags) : base (IntPtr.Zero, true)
        {
            int err = NativeMethods.sqlite3_open_v2 (path, out handle, flags, IntPtr.Zero);
            // handle errors
        }

        public override bool IsInvalid {
            get {
                return (handle == IntPtr.Zero);
            }
        }

        // This will not be called if the handle is invalid. Note that this method should not throw.
        [ReliabilityContract (Consistency.WillNotCorruptState, Cer.MayFail)]
        protected override bool ReleaseHandle ()
        {
            NativeMethods.sqlite3_close (this);
            return true;
        }
    }

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (SqlitePtr db);

        // Open must take an IntPtr but all other methods take a type safe SqlitePtr.
        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private SqlitePtr m_database;
}
```",markdown,,,escalated,0.8318374,1
916,Static Analysis,2020-05-18T14:51:00-04:00,85672,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-465: Pointer Issues,http://cwevis.org/browse/465,465,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/WindowsFormsWebAuthenticationDialogBase/WebBrowserNavigateErrorHandler,logical,,,2020-05-18T14:51:59-04:00,Static Analysis,a5fceea52596662e61c66f7abfad9036937d4f22e1a53681e48ab77fa50bb893,201965,medium,,,CWE-476: NULL Pointer Dereference,http://cwevis.org/browse/476,476,A visible method does not check its parameter(s) for null values. Since the caller is unknown you should always verify all of your parameters to protect yourself.,plain-text,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/WindowsFormsWebAuthenticationDialogBase/WebBrowserNavigateErrorHandler,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/WindowsFormsWebAuthenticationDialogBase/WebBrowserNavigateErrorHandler,logical,,,,,,CheckParametersNullityInVisibleMethodsRule,Gendarme,GEND-CheckParametersNullityInVisibleMethodsRule,Check Parameters Nullity In Visible Methods ,"This rule checks if all nullable parameters of visible methods are
compared with **null** before they get used. This reduce the likelyhood
of the runtime throwing a **NullReferenceException**.

**Bad** example:


```csharp
[DllImport (""message"")]
internal static extern byte [] Parse (string s, int length);

public bool TryParse (string s, out Message m)
{
    // is 's' is null then 's.Length' will throw a NullReferenceException
    // which a TryParse method should never do
    byte [] data = Parse (s, s.Length);
    if (data == null) {
        m = null;
        return false;
    }
    m = new Message (data);
    return true;
}
```
**Good** example:


```csharp
[DllImport (""message"")]
internal static extern byte [] Parse (string s, int length);

public bool TryParse (string s, out Message m)
{
    if (s == null) {
        m = null;
        return false;
    }
    byte [] data = Parse (s, s.Length);
    if (data == null) {
        m = null;
        return false;
    }
    m = new Message (data);
    return true;
}
```",markdown,rule-0dd0e028a5ce327b29cd3ffa9ef62c97353c7155364a9a4b89933187ee675fef,Invalid Pointer,,,,,escalated,0.56592375,1
917,Static Analysis,2020-05-18T14:51:00-04:00,85677,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Splat/ModernDependencyResolver/Register,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201244,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Splat/ModernDependencyResolver/Register,Splat/ModernDependencyResolver/Register,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
918,Static Analysis,2020-05-18T14:51:00-04:00,85698,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Common/Zip/SeekableZipHeaderFactory/GetLocalHeader,logical,,,2020-05-18T14:51:56-04:00,Static Analysis,f04c9d74a6fd90e4bf9aed1a759b57b45fb81263d6af878756a02e65f99a62e0,200166,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,This disposable local is not guaranteed to be disposed of before the method returns. Use a 'using' statement or surround the local's usage with a try/finally block. Local of type 'BinaryReader' is not disposed of (at least not locally).,plain-text,SharpCompress/Common/Zip/SeekableZipHeaderFactory/GetLocalHeader,SharpCompress/Common/Zip/SeekableZipHeaderFactory/GetLocalHeader,logical,,,,,,EnsureLocalDisposalRule,Gendarme,GEND-EnsureLocalDisposalRule,Ensure Local Disposal ,"This rule checks that disposable locals are always disposed of before
the method returns. Use a 'using' statement (or a try/finally block) to
guarantee local disposal even in the event an unhandled exception
occurs.

**Bad** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    DecodeHeader (stream);
    if (!DecodedHeader.HasContent) {
        return;
    }
    DecodeContent (stream);
    stream.Dispose ();
}
```
**Good** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        DecodeHeader (stream);
        if (!DecodedHeader.HasContent) {
            return;
        }
        DecodeContent (stream);
    }
}
```
**Bad** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    Decode (stream);
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
    stream.Dispose ();
}
```
**Good** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        Decode (stream);
    }
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.98204976,1
919,Static Analysis,2020-05-18T14:51:00-04:00,85754,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-227: 7PK - API Abuse,http://cwevis.org/browse/227,227,NuGet/NuGetVersionNotSatisfiedException/(self),logical,,,2020-05-18T14:51:57-04:00,Static Analysis,47a6df44d16eb182f816f23918542a817d2995bc2ddf0168976c20b9c8c63cb2,200692,medium,,,CWE-573: Improper Following of Specification by Caller,http://cwevis.org/browse/573,573,"The required constructor for ISerializable is not present in this type. Add a (private for sealed, protected otherwise) serialization constructor for this type. The required constructor for ISerializable is not present in this type.",plain-text,NuGet/NuGetVersionNotSatisfiedException/(self),NuGet/NuGetVersionNotSatisfiedException/(self),logical,,,,,,MissingSerializationConstructorRule,Gendarme,GEND-MissingSerializationConstructorRule,Missing Serialization Constructor ,"This rule checks for types that implement **System.ISerializable** but
don't provide a serialization constructor. The constructor is required
in order to make the type serializeable but cannot be enforced by the
interface. The serialization constructor should be **private** for
**sealed** types and **protected** for unsealed types.

**Bad** example:


```csharp
[Serializable]
public class Bad : ISerializable {
    public void GetObjectData (SerializationInfo info, StreamingContext context)
    {
    }
}
```
**Good** example (sealed):


```csharp
[Serializable]
public sealed class Good : ISerializable {
    private ClassWithConstructor (SerializationInfo info, StreamingContext context)
    {
    }

    public void GetObjectData (SerializationInfo info, StreamingContext context)
    {
    }
}
```
**Good** example:


```csharp
[Serializable]
public class Good : ISerializable {
    protected ClassWithConstructor (SerializationInfo info, StreamingContext context)
    {
    }

    public void GetObjectData (SerializationInfo info, StreamingContext context)
    {
    }
}
```",markdown,rule-dc56fd6c6aaaf7aef3e91a691e1f8bd8f7311763a2d3286fce16c6c5cf52b5e2,API Abuse,"The software uses an API in a manner contrary to its intended use.

An API is a contract between a caller and a callee. The most common forms of API misuse occurs when the caller does not honor its end of this contract. For example, if a program does not call chdir() after calling chroot(), it violates the contract that specifies how to change the active root directory in a secure fashion. Another good example of library abuse is expecting the callee to return trustworthy DNS information to the caller. In this case, the caller misuses the callee API by making certain assumptions about its behavior (that the return value can be used for authentication purposes). One can also violate the caller-callee contract from the other side. For example, if a coder subclasses SecureRandom and returns a non-random value, the contract is violated.",markdown,,,escalated,0.94911677,1
920,Static Analysis,2020-05-18T14:51:00-04:00,85798,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Compressors/BZip2/BZip2Stream/Finish,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201168,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Compressors/BZip2/BZip2Stream/Finish,SharpCompress/Compressors/BZip2/BZip2Stream/Finish,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
921,Static Analysis,2020-05-18T14:51:00-04:00,85799,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-388: 7PK - Errors,http://cwevis.org/browse/388,388,SharpCompress/Compressors/BZip2/BZip2Stream/Finish,logical,,,2020-05-18T14:51:56-04:00,Static Analysis,f73cef352a0b2bf1d0cc5310f027978a051db5e56968ba97879cbcb8e22239bf,199971,medium,,,CWE-754: Improper Check for Unusual or Exceptional Conditions,http://cwevis.org/browse/754,754,"Every delegate passed to native code must include an exception block which spans the entire method and has a catch all block. Surround the entire method body with a try/catch block. An exception occurred while verifying this method. This failure can probably be ignored, it's most likely due to an uncommon code sequence in the method the rule didn't understand. Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index",plain-text,SharpCompress/Compressors/BZip2/BZip2Stream/Finish,SharpCompress/Compressors/BZip2/BZip2Stream/Finish,logical,,,,,,DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRule,Gendarme,GEND-DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRule,Delegates Passed To Native Code Must Include Exception Handling ,"Every delegate which is passed to native code must include an exception
block which spans the entire method and has a catch all handler.

**Bad** example:


```csharp
public void NativeCallback ()
{
    Console.WriteLine (""{0}"", 1);
}
```
**Good** example:


```csharp
public void NativeCallback ()
{
    try {
        Console.WriteLine (""{0}"", 1);
    }
    catch {
    }
}
```",markdown,rule-e3f0972459f483bc18a68eed953b03a6c7e7fb7e495bc2047dd97eaba40f966b,Error Handling,,,,,escalated,0.88051474,1
922,Static Analysis,2020-05-18T14:51:00-04:00,85960,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Compressors/Xz/XZStream/Read,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201137,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Compressors/Xz/XZStream/Read,SharpCompress/Compressors/Xz/XZStream/Read,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
923,Static Analysis,2020-05-18T14:51:00-04:00,85961,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/IO/CountingWritableSubStream/Write,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201124,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/IO/CountingWritableSubStream/Write,SharpCompress/IO/CountingWritableSubStream/Write,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
924,Static Analysis,2020-05-18T14:51:00-04:00,86001,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Squirrel/ReleaseEntry/BuildReleasesFile,logical,,,2020-05-18T14:51:56-04:00,Static Analysis,3156f39cfcfc302b869a1bfd22f48f0777fcda8f557105e53ac54cc326df9314,200209,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,This disposable local is not guaranteed to be disposed of before the method returns. Use a 'using' statement or surround the local's usage with a try/finally block. Local of type 'IDisposable' is not disposed of (at least not locally).,plain-text,Squirrel/ReleaseEntry/BuildReleasesFile,Squirrel/ReleaseEntry/BuildReleasesFile,logical,,,,,,EnsureLocalDisposalRule,Gendarme,GEND-EnsureLocalDisposalRule,Ensure Local Disposal ,"This rule checks that disposable locals are always disposed of before
the method returns. Use a 'using' statement (or a try/finally block) to
guarantee local disposal even in the event an unhandled exception
occurs.

**Bad** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    DecodeHeader (stream);
    if (!DecodedHeader.HasContent) {
        return;
    }
    DecodeContent (stream);
    stream.Dispose ();
}
```
**Good** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        DecodeHeader (stream);
        if (!DecodedHeader.HasContent) {
            return;
        }
        DecodeContent (stream);
    }
}
```
**Bad** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    Decode (stream);
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
    stream.Dispose ();
}
```
**Good** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        Decode (stream);
    }
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.9809556,1
925,Static Analysis,2020-05-18T14:51:00-04:00,86028,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/IO/MarkingBinaryReader/ReadBytes,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201127,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/IO/MarkingBinaryReader/ReadBytes,SharpCompress/IO/MarkingBinaryReader/ReadBytes,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
926,Static Analysis,2020-05-18T14:51:00-04:00,86031,2020-05-18T14:54:28-04:00,medium,false-positive,"config = require('./apm');

  request = require('./request');

  tree = require('./tree');",9,'require' is not defined,admin,2020-05-30T17:22:43-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/search.js,file,12,12,2020-05-18T14:51:40-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,194521,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/search.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\search.js,file,20,13,12,12,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270798,0
927,Static Analysis,2020-05-18T14:51:00-04:00,86032,2020-05-18T14:54:28-04:00,medium,false-positive,"tree = require('./tree');

  ({isDeprecatedPackage} = require('./deprecated-packages'));

  module.exports = Search = (function() {
    class Search extends Command {",13,'require' is not defined,admin,2020-05-30T17:22:32-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/search.js,file,16,16,2020-05-18T14:51:40-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,194524,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/search.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\search.js,file,35,28,16,16,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270798,0
928,Static Analysis,2020-05-18T14:51:00-04:00,86035,2020-05-18T14:54:28-04:00,high,escalated,"parseOptions(argv) {
        var options;
        options = yargs(argv).wrap(Math.min(100, yargs.terminalWidth()));
        options.usage(""\nUsage: apm search <package_name>\n\nSearch for Atom packages/themes on the atom.io registry."");
        options.alias('h', 'help').describe('help', 'Print this usage message');
        options.boolean('json').describe('json', 'Output matching packages as JSON array');
        options.boolean('packages').describe('packages', 'Search only non-theme packages').alias('p', 'packages');",20,,,,CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'),http://cwevis.org/browse/79,79,Atom x64/resources/app/apm/lib/search.js,file,23,23,2020-05-18T14:51:40-04:00,Static Analysis,b4414dd3b1087806bb332146e753f5917a3aec259e29c568ca289f9ab428d0d4,194528,high,,,CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS),http://cwevis.org/browse/80,80,HTML passed in to function 'options.usage',plain-text,Atom x64/resources/app/apm/lib/search.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\search.js,file,22,9,23,23,xss,no-mixed-html,ESLint,ESLINT-XSS-no-mixed-html,No mixed html,"Wanted a way to catch XSS issues in code before they end up in production.

## Rule Details

This rule aims to catch as many XSS issues by examining the code as possible.
The rule checks for mixed html/non-html content, unescaped input, etc.

The following patterns are considered warnings:

```js

// Mixed content
var x = '<div>' + input + '</div>';
$node.html( '<div>' + input + '</div>' );

// Unsafe container names.
var html = input;
var text = htmlInput;
displayValue( htmlInput );

// Checking certain expression parameters that might end up in the variables.
var htmlItems = [ input1, input2 ].join();
var textItems = [ '<div>', input, '</div>' ].join();
var tag = isNumbered ? '<ol>' : '<ul>';

// Checking function return values.
var createHtml = function( item ) { return item.name; }
var createBox = function( item ) { return '<div>' + encode( item ) + '</div>' }

```

The following patterns are not warnings:

```js

// Proper encoding
var html = '<div>' + encode( input ) + '</div>';
$node.html( '<div>' + encode( input ) + '</div>' );

// Proper container names
var html = '<img src=""happy.png"">';
var text = textbox.value;

```

## When Not To Use It

If you are creating a Node.js application that doesn't output any HTML, you can
safely disable this rule.

## Further Reading

- [XSS Prevention CHeat Sheet - OWASP](https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet)",markdown,rule-396ebe8bb0c3dc5d4eb2b5368a97688fdb0f2587416453645c3d06db2b216479,Cross-site Scripting (XSS),"Cross-site scripting (XSS) vulnerabilities occur when:
1. Untrusted data enters a web application, typically from a web request.
2. The web application dynamically generates a web page that contains this untrusted data.
3. During page generation, the application does not prevent the data from containing content that is executable by a web browser, such as JavaScript, HTML tags, HTML attributes, mouse events, Flash, ActiveX, etc.
4. A victim visits the generated web page through a web browser, which contains malicious script that was injected using the untrusted data.
5. Since the script comes from a web page that was sent by the web server, the victim's web browser executes the malicious script in the context of the web server's domain.
6. This effectively violates the intention of the web browser's same-origin policy, which states that scripts in one domain should not be able to access resources or run code in a different domain.
There are three main kinds of XSS:

*Reflected XSS (or Non-Persistent)*

The server reads data directly from the HTTP request and reflects it back in the HTTP response. Reflected XSS exploits occur when an attacker causes a victim to supply dangerous content to a vulnerable web application, which is then reflected back to the victim and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to the victim. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces a victim to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the victim, the content is executed by the victim's browser.

*Stored XSS (or Persistent)*

The application stores dangerous data in a database, message forum, visitor log, or other trusted data store. At a later time, the dangerous data is subsequently read back into the application and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. For example, the attacker might inject XSS into a log message, which might not be handled properly when an administrator views the logs.

*DOM-Based XSS*

In DOM-based XSS, the client performs the injection of XSS into the page; in the other types, the server performs the injection. DOM-based XSS generally involves server-controlled, trusted script that is sent to the client, such as Javascript that performs sanity checks on a form before the user submits it. If the server-supplied script processes user-supplied data and then injects it back into the web page (such as with dynamic HTML), then DOM-based XSS is possible.

Once the malicious script is injected, the attacker can perform a variety of malicious activities. The attacker could transfer private information, such as cookies that may include session information, from the victim's machine to the attacker. The attacker could send malicious requests to a web site on behalf of the victim, which could be especially dangerous to the site if the victim has administrator privileges to manage that site. Phishing attacks could be used to emulate trusted web sites and trick the victim into entering a password, allowing the attacker to compromise the victim's account on that web site. Finally, the script could exploit a vulnerability in the web browser itself possibly taking over the victim's machine, sometimes referred to as ""drive-by hacking.""

In many cases, the attack can be launched without the victim even being aware of it. Even with careful users, attackers frequently use a variety of methods to encode the malicious portion of the attack, such as URL encoding or Unicode, so the request looks less suspicious.

**Guidance**

To remedy XSS vulnerabilities, it is important to never use untrusted or unfiltered data within the code of a HTML page.

Untrusted data can originate not only form the client but potentially a third party or previously uploaded file etc.

Filtering of untrusted data typically involves converting special characters to their HTML entity encoded counterparts (however, other methods do exist, see references).

These special characters include:

* `&`
* `<`
* `>`
* `""`
* `'`
* `/`

An example of HTML entity encoding is converting `<` to `&lt;`.

Although it is possible to filter untrusted input, there are five locations within an HTML page where untrusted input (even if it has been filtered) should never be placed:

1. Directly in a script.
2. Inside an HTML comment.
3. In an attribute name.
4. In a tag name.
5. Directly in CSS.

Each of these locations have their own form of escaping and filtering.

Because many browsers attempt to implement XSS protection, any manual verification of this finding should be conducted using multiple different browsers and browser
versions.

**References**

- [WASC](http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting)
- [Secunia](http://secunia.com/advisories/9716/)
- [OWASP XSS Prevention Cheat Sheet](https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet)
- [OWASP DOM Based XSS](https://www.owasp.org/index.php/DOM_Based_XSS)
- [OWASP DOM Based XSS Prevention Cheat Sheet](https://www.owasp.org/index.php/DOM_based_XSS_Prevention_Cheat_Sheet)",markdown,,,escalated,0.8266207,1
929,Static Analysis,2020-05-18T14:51:00-04:00,86039,2020-05-18T14:54:28-04:00,medium,false-positive,"(function() {
  var Command, Search, _, config, isDeprecatedPackage, request, tree, yargs;

  _ = require('underscore-plus');

  yargs = require('yargs');",1,'require' is not defined,admin,2020-05-30T17:22:21-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/search.js,file,4,4,2020-05-18T14:51:40-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,194515,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/search.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\search.js,file,14,7,4,4,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
930,Static Analysis,2020-05-18T14:51:00-04:00,86042,2020-05-18T14:54:28-04:00,medium,false-positive,"yargs = require('yargs');

  Command = require('./command');

  config = require('./apm');",5,'require' is not defined,admin,2020-05-30T17:22:06-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/search.js,file,8,8,2020-05-18T14:51:40-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,194517,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/search.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\search.js,file,20,13,8,8,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
931,Static Analysis,2020-05-18T14:51:00-04:00,86043,2020-05-18T14:54:28-04:00,medium,false-positive,"({isDeprecatedPackage} = require('./deprecated-packages'));

  module.exports = Search = (function() {
    class Search extends Command {
      parseOptions(argv) {
        var options;",15,'module' is not defined,admin,2020-05-30T17:21:53-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/search.js,file,18,18,2020-05-18T14:51:40-04:00,Static Analysis,62173c3357301b64bcb7cb49ad65b9eeb8aa24356212b93fe0fe0166d3218ce7,194525,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'module' is not defined.,plain-text,Atom x64/resources/app/apm/lib/search.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\search.js,file,9,3,18,18,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.068299174,0
932,Static Analysis,2020-05-18T14:51:00-04:00,86046,2020-05-18T14:54:28-04:00,medium,false-positive,"_ = require('underscore-plus');

  yargs = require('yargs');

  Command = require('./command');",3,'require' is not defined,admin,2020-05-30T17:21:25-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/search.js,file,6,6,2020-05-18T14:51:40-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,194516,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/search.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\search.js,file,18,11,6,6,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
933,Static Analysis,2020-05-18T14:51:00-04:00,86051,2020-05-18T14:54:28-04:00,medium,false-positive,"Command = require('./command');

  config = require('./apm');

  request = require('./request');",7,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/search.js,file,10,10,2020-05-18T14:51:40-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,194519,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/search.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\search.js,file,19,12,10,10,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
934,Static Analysis,2020-05-18T14:51:00-04:00,86052,2020-05-18T14:54:28-04:00,medium,false-positive,"request = require('./request');

  tree = require('./tree');

  ({isDeprecatedPackage} = require('./deprecated-packages'));",11,'require' is not defined,admin,2020-05-30T17:20:35-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/search.js,file,14,14,2020-05-18T14:51:40-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,194523,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/search.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\search.js,file,17,10,14,14,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
935,Static Analysis,2020-05-18T14:51:00-04:00,86054,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Compressors/LZMA/AesDecoderStream/Read,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201148,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Compressors/LZMA/AesDecoderStream/Read,SharpCompress/Compressors/LZMA/AesDecoderStream/Read,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
936,Static Analysis,2020-05-18T14:51:00-04:00,86060,2020-05-18T14:54:28-04:00,medium,false-positive,"Command = require('./command');

  fs = require('./fs');

  module.exports = Test = (function() {
    class Test extends Command {",9,'require' is not defined,admin,2020-05-30T17:20:23-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/test.js,file,12,12,2020-05-18T14:51:41-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,194847,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/test.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\test.js,file,15,8,12,12,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
937,Static Analysis,2020-05-18T14:51:00-04:00,86061,2020-05-18T14:54:28-04:00,medium,false-positive,"(function() {
  var Command, Test, fs, path, temp, yargs;

  path = require('path');

  yargs = require('yargs');",1,'require' is not defined,admin,2020-05-30T17:20:13-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/test.js,file,4,4,2020-05-18T14:51:41-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,194843,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/test.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\test.js,file,17,10,4,4,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
938,Static Analysis,2020-05-18T14:51:00-04:00,86062,2020-05-18T14:54:28-04:00,medium,false-positive,"yargs = require('yargs');

  temp = require('temp');

  Command = require('./command');",5,'require' is not defined,admin,2020-05-30T17:19:59-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/test.js,file,8,8,2020-05-18T14:51:41-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,194845,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/test.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\test.js,file,17,10,8,8,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
939,Static Analysis,2020-05-18T14:51:00-04:00,86064,2020-05-18T14:54:28-04:00,medium,false-positive,"path = require('path');

  yargs = require('yargs');

  temp = require('temp');",3,'require' is not defined,admin,2020-05-30T17:19:49-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/test.js,file,6,6,2020-05-18T14:51:41-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,194844,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/test.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\test.js,file,18,11,6,6,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
940,Static Analysis,2020-05-18T14:51:00-04:00,86065,2020-05-18T14:54:28-04:00,medium,false-positive,"temp = require('temp');

  Command = require('./command');

  fs = require('./fs');",7,'require' is not defined,admin,2020-05-30T17:19:40-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/test.js,file,10,10,2020-05-18T14:51:41-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,194846,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/test.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\test.js,file,20,13,10,10,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
941,Static Analysis,2020-05-18T14:51:00-04:00,86066,2020-05-18T14:54:28-04:00,high,escalated,"return this.spawn(atomCommand, testArgs, function(code) {
            var loggedOutput;
            try {
              loggedOutput = fs.readFileSync(logFilePath, 'utf8');
              if (loggedOutput) {
                process.stdout.write(`${loggedOutput}\n`);
              }",48,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/lib/test.js,file,51,51,2020-05-18T14:51:42-04:00,Static Analysis,374ad040fff48d9edaa97052bf28a674b1f4e79af66a0448f1ab1699003790cd,194875,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Found fs.readFileSync with non literal argument at index 0,plain-text,Atom x64/resources/app/apm/lib/test.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\test.js,file,45,30,51,51,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.9758102,1
942,Static Analysis,2020-05-18T14:51:00-04:00,86067,2020-05-18T14:54:28-04:00,high,escalated,"if (options.argv.path) {
          atomCommand = options.argv.path;
        }
        if (!fs.existsSync(atomCommand)) {
          atomCommand = 'atom';
          if (process.platform === 'win32') {
            atomCommand += '.cmd';",29,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/lib/test.js,file,32,32,2020-05-18T14:51:41-04:00,Static Analysis,a8eb318301dc105f6b242fce363923637060c403e8c9c7b93b984891497b7744,194857,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Found fs.existsSync with non literal argument at index 0,plain-text,Atom x64/resources/app/apm/lib/test.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\test.js,file,27,14,32,32,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.96763015,1
943,Static Analysis,2020-05-18T14:51:00-04:00,86068,2020-05-18T14:54:28-04:00,medium,false-positive,"var atomCommand, callback, env, logFile, logFilePath, packagePath, testArgs;
        ({callback} = options);
        options = this.parseOptions(options.commandArgs);
        ({env} = process);
        if (options.argv.path) {
          atomCommand = options.argv.path;
        }",25,'process' is not defined,admin,2020-05-30T17:19:18-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/test.js,file,28,28,2020-05-18T14:51:41-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,194855,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/test.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\test.js,file,25,18,28,28,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
944,Static Analysis,2020-05-18T14:51:00-04:00,86070,2020-05-18T14:54:28-04:00,medium,false-positive,"fs = require('./fs');

  module.exports = Test = (function() {
    class Test extends Command {
      parseOptions(argv) {
        var options;",11,'module' is not defined,admin,2020-05-30T17:19:02-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/test.js,file,14,14,2020-05-18T14:51:41-04:00,Static Analysis,62173c3357301b64bcb7cb49ad65b9eeb8aa24356212b93fe0fe0166d3218ce7,194849,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'module' is not defined.,plain-text,Atom x64/resources/app/apm/lib/test.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\test.js,file,9,3,14,14,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.068299174,0
945,Static Analysis,2020-05-18T14:51:00-04:00,86071,2020-05-18T14:54:28-04:00,medium,false-positive,"try {
              loggedOutput = fs.readFileSync(logFilePath, 'utf8');
              if (loggedOutput) {
                process.stdout.write(`${loggedOutput}\n`);
              }
            } catch (error) {}
            if (code === 0) {",50,'process' is not defined,admin,2020-05-30T17:18:49-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/test.js,file,53,53,2020-05-18T14:51:42-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,194876,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/test.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\test.js,file,24,17,53,53,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
946,Static Analysis,2020-05-18T14:51:00-04:00,86072,2020-05-18T14:54:28-04:00,medium,false-positive,"atomCommand += '.cmd';
          }
        }
        packagePath = process.cwd();
        testArgs = ['--dev', '--test', path.join(packagePath, 'spec')];
        if (process.platform === 'win32') {
          logFile = temp.openSync({",35,'process' is not defined,admin,2020-05-30T17:18:38-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/test.js,file,38,38,2020-05-18T14:51:41-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,194863,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/test.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\test.js,file,30,23,38,38,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
947,Static Analysis,2020-05-18T14:51:00-04:00,86073,2020-05-18T14:54:28-04:00,medium,false-positive,"}
        packagePath = process.cwd();
        testArgs = ['--dev', '--test', path.join(packagePath, 'spec')];
        if (process.platform === 'win32') {
          logFile = temp.openSync({
            suffix: '.log',
            prefix: `${path.basename(packagePath)}-`",37,'process' is not defined,admin,2020-05-30T17:18:25-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/test.js,file,40,40,2020-05-18T14:51:41-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,194864,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/test.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\test.js,file,20,13,40,40,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
948,Static Analysis,2020-05-18T14:51:00-04:00,86075,2020-05-18T14:54:28-04:00,medium,false-positive,"}
        if (!fs.existsSync(atomCommand)) {
          atomCommand = 'atom';
          if (process.platform === 'win32') {
            atomCommand += '.cmd';
          }
        }",31,'process' is not defined,admin,2020-05-30T17:18:11-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/test.js,file,34,34,2020-05-18T14:51:41-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,194860,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/test.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\test.js,file,22,15,34,34,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
949,Static Analysis,2020-05-18T14:51:00-04:00,86077,2020-05-18T14:54:28-04:00,high,escalated,"packagePath = process.cwd();
        testArgs = ['--dev', '--test', path.join(packagePath, 'spec')];
        if (process.platform === 'win32') {
          logFile = temp.openSync({
            suffix: '.log',
            prefix: `${path.basename(packagePath)}-`
          });",38,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/lib/test.js,file,41,41,2020-05-18T14:51:41-04:00,Static Analysis,7584a6af88b4e2c27ba622ac45a3f9892df31c39adb01ee04021855aa9acb2cc,194865,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Found fs.openSync with non literal argument at index 0,plain-text,Atom x64/resources/app/apm/lib/test.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\test.js,file,34,21,41,41,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.97189033,1
950,Static Analysis,2020-05-18T14:51:00-04:00,86078,2020-05-18T14:54:28-04:00,medium,false-positive,"streaming: true
          }, function(code) {
            if (code === 0) {
              process.stdout.write('Tests passed\n'.green);
              return callback();
            } else if (code != null ? code.message : void 0) {
              return callback(`Error spawning ${atomCommand}: ${code.message}`);",68,'process' is not defined,admin,2020-05-30T17:16:33-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/test.js,file,71,71,2020-05-18T14:51:42-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,194883,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/test.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\test.js,file,22,15,71,71,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
951,Static Analysis,2020-05-18T14:51:00-04:00,86079,2020-05-18T14:54:28-04:00,medium,false-positive,"}
            } catch (error) {}
            if (code === 0) {
              process.stdout.write('Tests passed\n'.green);
              return callback();
            } else if (code != null ? code.message : void 0) {
              return callback(`Error spawning Atom: ${code.message}`);",54,'process' is not defined,admin,2020-05-30T17:16:18-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/test.js,file,57,57,2020-05-18T14:51:42-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,194878,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/test.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\test.js,file,22,15,57,57,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
952,Static Analysis,2020-05-18T14:51:00-04:00,86116,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Compressors/LZMA/Utilites/CrcBuilderStream/Finish,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201156,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Compressors/LZMA/Utilites/CrcBuilderStream/Finish,SharpCompress/Compressors/LZMA/Utilites/CrcBuilderStream/Finish,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
953,Static Analysis,2020-05-18T14:51:00-04:00,86117,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/Web/XmlTransform/XmlElementContext/GetNamespaceManager,logical,,,2020-05-18T14:51:56-04:00,Static Analysis,aaaa55b988261c7c089c58a15199d965b60e120bc65373b1aacde2cbcb68d1f7,200189,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,This disposable local is not guaranteed to be disposed of before the method returns. Use a 'using' statement or surround the local's usage with a try/finally block. Local of type 'XmlNodeList' is not disposed of (at least not locally).,plain-text,Microsoft/Web/XmlTransform/XmlElementContext/GetNamespaceManager,Microsoft/Web/XmlTransform/XmlElementContext/GetNamespaceManager,logical,,,,,,EnsureLocalDisposalRule,Gendarme,GEND-EnsureLocalDisposalRule,Ensure Local Disposal ,"This rule checks that disposable locals are always disposed of before
the method returns. Use a 'using' statement (or a try/finally block) to
guarantee local disposal even in the event an unhandled exception
occurs.

**Bad** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    DecodeHeader (stream);
    if (!DecodedHeader.HasContent) {
        return;
    }
    DecodeContent (stream);
    stream.Dispose ();
}
```
**Good** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        DecodeHeader (stream);
        if (!DecodedHeader.HasContent) {
            return;
        }
        DecodeContent (stream);
    }
}
```
**Bad** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    Decode (stream);
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
    stream.Dispose ();
}
```
**Good** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        Decode (stream);
    }
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.9804121,1
954,Static Analysis,2020-05-18T14:51:00-04:00,86122,2020-05-18T14:54:28-04:00,high,escalated,,,,,,CWE-695: Use of Low-Level Functionality,http://cwevis.org/browse/695,695,Microsoft/Alm/Cli/Program/(self),logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,GEND-PreferSafeHandleRule,Prefer Safe Handle ,"In general it is best to interop with native code using
**System.Runtime.InteropServices.SafeHandle** instead of
**System.IntPtr** or **System.UIntPtr** because:

SafeHandles are type safe.
SafeHandles are guaranteed to be disposed of during exceptional
conditions like a thread aborting unexpectedly or a stack overflow.
SafeHandles are not vulnerable to reycle attacks.
You don't need to write a finalizer which can be tricky to do because
they execute within their own thread, may execute on partially
constructed objects, and normally tear down the application if you allow
an exception to escape from them.


 **Bad** example:


```csharp
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable.
public sealed class Database {
    ~Database ()
    {
        // This will execute even if the ctor throws so it is important to check
        // to see if the fields are initialized.
        if (m_database != IntPtr.Zero) {
            NativeMethods.sqlite3_close (m_database);
        }
    }

    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        int err = NativeMethods.sqlite3_open_v2 (path, out m_database, flags, IntPtr.Zero);
        // handle errors
    }

    // exec and query methods would go here

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (IntPtr db);

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private IntPtr m_database;
}
```
**Good** example:


```csharp
using System.Runtime.ConstrainedExecution;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable, but you do not need to implement a finalizer because
// SafeHandle will take care of the cleanup.
internal sealed class Database {
    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        m_database = new SqlitePtr (path, flags);
    }

    // exec and query methods would go here

    // This corresponds to a native sqlite3*.
    [SecurityPermission (SecurityAction.InheritanceDemand, UnmanagedCode = true)]
    [SecurityPermission (SecurityAction.Demand, UnmanagedCode = true)]
    private sealed class SqlitePtr : SafeHandle {
        public SqlitePtr (string path, NativeMethods.OpenFlags flags) : base (IntPtr.Zero, true)
        {
            int err = NativeMethods.sqlite3_open_v2 (path, out handle, flags, IntPtr.Zero);
            // handle errors
        }

        public override bool IsInvalid {
            get {
                return (handle == IntPtr.Zero);
            }
        }

        // This will not be called if the handle is invalid. Note that this method should not throw.
        [ReliabilityContract (Consistency.WillNotCorruptState, Cer.MayFail)]
        protected override bool ReleaseHandle ()
        {
            NativeMethods.sqlite3_close (this);
            return true;
        }
    }

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (SqlitePtr db);

        // Open must take an IntPtr but all other methods take a type safe SqlitePtr.
        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private SqlitePtr m_database;
}
```",markdown,,,escalated,0.7580282,1
955,Static Analysis,2020-05-18T14:51:00-04:00,86124,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Squirrel/Bsdiff/WrappingStream/ReadByte,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201281,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Squirrel/Bsdiff/WrappingStream/ReadByte,Squirrel/Bsdiff/WrappingStream/ReadByte,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
956,Static Analysis,2020-05-18T14:51:00-04:00,86127,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Common/Rar/Headers/RarHeaderFactory/CheckSFX,logical,,,2020-05-18T14:51:56-04:00,Static Analysis,ad2bfe9a410c9cbdb2418773d981300e5c36a614e4fcbb826a38d7bf8fa8f907,200171,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,This disposable local is not guaranteed to be disposed of before the method returns. Use a 'using' statement or surround the local's usage with a try/finally block. Local of type 'BinaryReader' is not guaranteed to be disposed of.,plain-text,SharpCompress/Common/Rar/Headers/RarHeaderFactory/CheckSFX,SharpCompress/Common/Rar/Headers/RarHeaderFactory/CheckSFX,logical,,,,,,EnsureLocalDisposalRule,Gendarme,GEND-EnsureLocalDisposalRule,Ensure Local Disposal ,"This rule checks that disposable locals are always disposed of before
the method returns. Use a 'using' statement (or a try/finally block) to
guarantee local disposal even in the event an unhandled exception
occurs.

**Bad** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    DecodeHeader (stream);
    if (!DecodedHeader.HasContent) {
        return;
    }
    DecodeContent (stream);
    stream.Dispose ();
}
```
**Good** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        DecodeHeader (stream);
        if (!DecodedHeader.HasContent) {
            return;
        }
        DecodeContent (stream);
    }
}
```
**Bad** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    Decode (stream);
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
    stream.Dispose ();
}
```
**Good** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        Decode (stream);
    }
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.98234355,1
957,Static Analysis,2020-05-18T14:51:00-04:00,86187,2020-05-18T14:54:28-04:00,medium,false-positive,"yargs = require('yargs');

  open = require('open');

  View = require('./view');",3,'require' is not defined,admin,2020-05-30T17:16:01-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/docs.js,file,6,6,2020-05-18T14:51:34-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192367,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/docs.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\docs.js,file,17,10,6,6,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
958,Static Analysis,2020-05-18T14:51:00-04:00,86189,2020-05-18T14:54:28-04:00,medium,false-positive,"config = require('./apm');

  module.exports = Docs = (function() {
    class Docs extends View {
      parseOptions(argv) {
        var options;",9,'module' is not defined,admin,2020-05-30T17:15:44-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/docs.js,file,12,12,2020-05-18T14:51:34-04:00,Static Analysis,62173c3357301b64bcb7cb49ad65b9eeb8aa24356212b93fe0fe0166d3218ce7,192370,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'module' is not defined.,plain-text,Atom x64/resources/app/apm/lib/docs.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\docs.js,file,9,3,12,12,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.06829916,0
959,Static Analysis,2020-05-18T14:51:00-04:00,86191,2020-05-18T14:54:28-04:00,high,escalated,"if (error != null) {
            return callback(error);
          }
          if (repository = this.getRepository(pack)) {
            if (options.argv.print) {
              console.log(repository);
            } else {",37,,,,CWE-697: Incorrect Comparison,http://cwevis.org/browse/697,697,Atom x64/resources/app/apm/lib/docs.js,file,40,40,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-c271f2bb931810eef633f7c736d1dd934fbd6ed5f62ac8d8ea39ade811190622,Comparison,,,,,escalated,0.9110538,1
960,Static Analysis,2020-05-18T14:51:00-04:00,86192,2020-05-18T14:54:28-04:00,medium,false-positive,"open = require('open');

  View = require('./view');

  config = require('./apm');",5,'require' is not defined,admin,2020-05-30T17:15:25-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/docs.js,file,8,8,2020-05-18T14:51:34-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192368,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/docs.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\docs.js,file,17,10,8,8,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
961,Static Analysis,2020-05-18T14:51:00-04:00,86193,2020-05-18T14:54:28-04:00,medium,false-positive,"View = require('./view');

  config = require('./apm');

  module.exports = Docs = (function() {
    class Docs extends View {",7,'require' is not defined,admin,2020-05-30T17:15:06-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/docs.js,file,10,10,2020-05-18T14:51:34-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192369,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/docs.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\docs.js,file,19,12,10,10,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
962,Static Analysis,2020-05-18T14:51:00-04:00,86197,2020-05-18T14:54:28-04:00,medium,false-positive,"(function() {
  var Docs, View, config, open, yargs;

  yargs = require('yargs');

  open = require('open');",1,'require' is not defined,admin,2020-05-30T17:14:48-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/docs.js,file,4,4,2020-05-18T14:51:34-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192366,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/docs.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\docs.js,file,18,11,4,4,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
963,Static Analysis,2020-05-18T14:51:00-04:00,86200,2020-05-18T14:54:28-04:00,high,escalated,"parseOptions(argv) {
        var options;
        options = yargs(argv).wrap(Math.min(100, yargs.terminalWidth()));
        options.usage(""\nUsage: apm docs [options] <package_name>\n\nOpen a package's homepage in the default browser."");
        options.alias('h', 'help').describe('help', 'Print this usage message');
        return options.boolean('p').alias('p', 'print').describe('print', 'Print the URL instead of opening it');
      }",14,,,,CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'),http://cwevis.org/browse/79,79,Atom x64/resources/app/apm/lib/docs.js,file,17,17,2020-05-18T14:51:34-04:00,Static Analysis,b4414dd3b1087806bb332146e753f5917a3aec259e29c568ca289f9ab428d0d4,192372,high,,,CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS),http://cwevis.org/browse/80,80,HTML passed in to function 'options.usage',plain-text,Atom x64/resources/app/apm/lib/docs.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\docs.js,file,22,9,17,17,xss,no-mixed-html,ESLint,ESLINT-XSS-no-mixed-html,No mixed html,"Wanted a way to catch XSS issues in code before they end up in production.

## Rule Details

This rule aims to catch as many XSS issues by examining the code as possible.
The rule checks for mixed html/non-html content, unescaped input, etc.

The following patterns are considered warnings:

```js

// Mixed content
var x = '<div>' + input + '</div>';
$node.html( '<div>' + input + '</div>' );

// Unsafe container names.
var html = input;
var text = htmlInput;
displayValue( htmlInput );

// Checking certain expression parameters that might end up in the variables.
var htmlItems = [ input1, input2 ].join();
var textItems = [ '<div>', input, '</div>' ].join();
var tag = isNumbered ? '<ol>' : '<ul>';

// Checking function return values.
var createHtml = function( item ) { return item.name; }
var createBox = function( item ) { return '<div>' + encode( item ) + '</div>' }

```

The following patterns are not warnings:

```js

// Proper encoding
var html = '<div>' + encode( input ) + '</div>';
$node.html( '<div>' + encode( input ) + '</div>' );

// Proper container names
var html = '<img src=""happy.png"">';
var text = textbox.value;

```

## When Not To Use It

If you are creating a Node.js application that doesn't output any HTML, you can
safely disable this rule.

## Further Reading

- [XSS Prevention CHeat Sheet - OWASP](https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet)",markdown,rule-396ebe8bb0c3dc5d4eb2b5368a97688fdb0f2587416453645c3d06db2b216479,Cross-site Scripting (XSS),"Cross-site scripting (XSS) vulnerabilities occur when:
1. Untrusted data enters a web application, typically from a web request.
2. The web application dynamically generates a web page that contains this untrusted data.
3. During page generation, the application does not prevent the data from containing content that is executable by a web browser, such as JavaScript, HTML tags, HTML attributes, mouse events, Flash, ActiveX, etc.
4. A victim visits the generated web page through a web browser, which contains malicious script that was injected using the untrusted data.
5. Since the script comes from a web page that was sent by the web server, the victim's web browser executes the malicious script in the context of the web server's domain.
6. This effectively violates the intention of the web browser's same-origin policy, which states that scripts in one domain should not be able to access resources or run code in a different domain.
There are three main kinds of XSS:

*Reflected XSS (or Non-Persistent)*

The server reads data directly from the HTTP request and reflects it back in the HTTP response. Reflected XSS exploits occur when an attacker causes a victim to supply dangerous content to a vulnerable web application, which is then reflected back to the victim and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to the victim. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces a victim to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the victim, the content is executed by the victim's browser.

*Stored XSS (or Persistent)*

The application stores dangerous data in a database, message forum, visitor log, or other trusted data store. At a later time, the dangerous data is subsequently read back into the application and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. For example, the attacker might inject XSS into a log message, which might not be handled properly when an administrator views the logs.

*DOM-Based XSS*

In DOM-based XSS, the client performs the injection of XSS into the page; in the other types, the server performs the injection. DOM-based XSS generally involves server-controlled, trusted script that is sent to the client, such as Javascript that performs sanity checks on a form before the user submits it. If the server-supplied script processes user-supplied data and then injects it back into the web page (such as with dynamic HTML), then DOM-based XSS is possible.

Once the malicious script is injected, the attacker can perform a variety of malicious activities. The attacker could transfer private information, such as cookies that may include session information, from the victim's machine to the attacker. The attacker could send malicious requests to a web site on behalf of the victim, which could be especially dangerous to the site if the victim has administrator privileges to manage that site. Phishing attacks could be used to emulate trusted web sites and trick the victim into entering a password, allowing the attacker to compromise the victim's account on that web site. Finally, the script could exploit a vulnerability in the web browser itself possibly taking over the victim's machine, sometimes referred to as ""drive-by hacking.""

In many cases, the attack can be launched without the victim even being aware of it. Even with careful users, attackers frequently use a variety of methods to encode the malicious portion of the attack, such as URL encoding or Unicode, so the request looks less suspicious.

**Guidance**

To remedy XSS vulnerabilities, it is important to never use untrusted or unfiltered data within the code of a HTML page.

Untrusted data can originate not only form the client but potentially a third party or previously uploaded file etc.

Filtering of untrusted data typically involves converting special characters to their HTML entity encoded counterparts (however, other methods do exist, see references).

These special characters include:

* `&`
* `<`
* `>`
* `""`
* `'`
* `/`

An example of HTML entity encoding is converting `<` to `&lt;`.

Although it is possible to filter untrusted input, there are five locations within an HTML page where untrusted input (even if it has been filtered) should never be placed:

1. Directly in a script.
2. Inside an HTML comment.
3. In an attribute name.
4. In a tag name.
5. Directly in CSS.

Each of these locations have their own form of escaping and filtering.

Because many browsers attempt to implement XSS protection, any manual verification of this finding should be conducted using multiple different browsers and browser
versions.

**References**

- [WASC](http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting)
- [Secunia](http://secunia.com/advisories/9716/)
- [OWASP XSS Prevention Cheat Sheet](https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet)
- [OWASP DOM Based XSS](https://www.owasp.org/index.php/DOM_Based_XSS)
- [OWASP DOM Based XSS Prevention Cheat Sheet](https://www.owasp.org/index.php/DOM_based_XSS_Prevention_Cheat_Sheet)",markdown,,,escalated,0.8266207,1
964,Static Analysis,2020-05-18T14:51:00-04:00,86214,2020-05-18T14:54:28-04:00,medium,false-positive,"fs = require('./fs');

  Install = require('./install');

  module.exports = Rebuild = (function() {
    class Rebuild extends Command {",13,'require' is not defined,admin,2020-05-30T17:14:23-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/rebuild.js,file,16,16,2020-05-18T14:51:38-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,194268,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/rebuild.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\rebuild.js,file,20,13,16,16,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
965,Static Analysis,2020-05-18T14:51:00-04:00,86215,2020-05-18T14:54:28-04:00,high,escalated,"rebuildArgs = ['--globalconfig', config.getGlobalConfigPath(), '--userconfig', config.getUserConfigPath(), 'rebuild'];
        rebuildArgs.push(...this.getNpmBuildFlags());
        rebuildArgs.push(...options.argv._);
        if (vsArgs = this.getVisualStudioFlags()) {
          rebuildArgs.push(vsArgs);
        }
        fs.makeTreeSync(this.atomDirectory);",37,,,,CWE-697: Incorrect Comparison,http://cwevis.org/browse/697,697,Atom x64/resources/app/apm/lib/rebuild.js,file,40,40,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-c271f2bb931810eef633f7c736d1dd934fbd6ed5f62ac8d8ea39ade811190622,Comparison,,,,,escalated,0.9110538,1
966,Static Analysis,2020-05-18T14:51:00-04:00,86216,2020-05-18T14:54:28-04:00,medium,false-positive,"super();
        this.atomDirectory = config.getAtomDirectory();
        this.atomNodeDirectory = path.join(this.atomDirectory, '.node-gyp');
        this.atomNpmPath = require.resolve('npm/bin/npm-cli');
      }

      parseOptions(argv) {",21,'require' is not defined,admin,2020-05-30T17:14:06-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/rebuild.js,file,24,24,2020-05-18T14:51:38-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,194285,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/rebuild.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\rebuild.js,file,35,28,24,24,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
967,Static Analysis,2020-05-18T14:51:00-04:00,86219,2020-05-18T14:54:28-04:00,medium,false-positive,"rebuildArgs.push(vsArgs);
        }
        fs.makeTreeSync(this.atomDirectory);
        env = _.extend({}, process.env, {
          HOME: this.atomNodeDirectory,
          RUSTUP_HOME: config.getRustupHomeDirPath()
        });",41,'process' is not defined,admin,2020-05-30T17:13:44-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/rebuild.js,file,44,44,2020-05-18T14:51:38-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,194304,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/rebuild.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\rebuild.js,file,35,28,44,44,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
968,Static Analysis,2020-05-18T14:51:00-04:00,86220,2020-05-18T14:54:28-04:00,medium,false-positive,"path = require('path');

  _ = require('underscore-plus');

  yargs = require('yargs');",3,'require' is not defined,admin,2020-05-30T17:13:18-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/rebuild.js,file,6,6,2020-05-18T14:51:38-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,194250,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/rebuild.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\rebuild.js,file,14,7,6,6,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
969,Static Analysis,2020-05-18T14:51:00-04:00,86222,2020-05-18T14:54:28-04:00,medium,false-positive,"Install = require('./install');

  module.exports = Rebuild = (function() {
    class Rebuild extends Command {
      constructor() {
        super();",15,'module' is not defined,admin,2020-05-30T17:12:58-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/rebuild.js,file,18,18,2020-05-18T14:51:38-04:00,Static Analysis,62173c3357301b64bcb7cb49ad65b9eeb8aa24356212b93fe0fe0166d3218ce7,194272,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'module' is not defined.,plain-text,Atom x64/resources/app/apm/lib/rebuild.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\rebuild.js,file,9,3,18,18,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.068299174,0
970,Static Analysis,2020-05-18T14:51:00-04:00,86223,2020-05-18T14:54:28-04:00,high,escalated,"parseOptions(argv) {
        var options;
        options = yargs(argv).wrap(Math.min(100, yargs.terminalWidth()));
        options.usage(""\nUsage: apm rebuild [<name> [<name> ...]]\n\nRebuild the given modules currently installed in the node_modules folder\nin the current working directory.\n\nAll the modules will be rebuilt if no module names are specified."");
        return options.alias('h', 'help').describe('help', 'Print this usage message');
      }",27,,,,CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'),http://cwevis.org/browse/79,79,Atom x64/resources/app/apm/lib/rebuild.js,file,30,30,2020-05-18T14:51:38-04:00,Static Analysis,b4414dd3b1087806bb332146e753f5917a3aec259e29c568ca289f9ab428d0d4,194296,high,,,CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS),http://cwevis.org/browse/80,80,HTML passed in to function 'options.usage',plain-text,Atom x64/resources/app/apm/lib/rebuild.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\rebuild.js,file,22,9,30,30,xss,no-mixed-html,ESLint,ESLINT-XSS-no-mixed-html,No mixed html,"Wanted a way to catch XSS issues in code before they end up in production.

## Rule Details

This rule aims to catch as many XSS issues by examining the code as possible.
The rule checks for mixed html/non-html content, unescaped input, etc.

The following patterns are considered warnings:

```js

// Mixed content
var x = '<div>' + input + '</div>';
$node.html( '<div>' + input + '</div>' );

// Unsafe container names.
var html = input;
var text = htmlInput;
displayValue( htmlInput );

// Checking certain expression parameters that might end up in the variables.
var htmlItems = [ input1, input2 ].join();
var textItems = [ '<div>', input, '</div>' ].join();
var tag = isNumbered ? '<ol>' : '<ul>';

// Checking function return values.
var createHtml = function( item ) { return item.name; }
var createBox = function( item ) { return '<div>' + encode( item ) + '</div>' }

```

The following patterns are not warnings:

```js

// Proper encoding
var html = '<div>' + encode( input ) + '</div>';
$node.html( '<div>' + encode( input ) + '</div>' );

// Proper container names
var html = '<img src=""happy.png"">';
var text = textbox.value;

```

## When Not To Use It

If you are creating a Node.js application that doesn't output any HTML, you can
safely disable this rule.

## Further Reading

- [XSS Prevention CHeat Sheet - OWASP](https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet)",markdown,rule-396ebe8bb0c3dc5d4eb2b5368a97688fdb0f2587416453645c3d06db2b216479,Cross-site Scripting (XSS),"Cross-site scripting (XSS) vulnerabilities occur when:
1. Untrusted data enters a web application, typically from a web request.
2. The web application dynamically generates a web page that contains this untrusted data.
3. During page generation, the application does not prevent the data from containing content that is executable by a web browser, such as JavaScript, HTML tags, HTML attributes, mouse events, Flash, ActiveX, etc.
4. A victim visits the generated web page through a web browser, which contains malicious script that was injected using the untrusted data.
5. Since the script comes from a web page that was sent by the web server, the victim's web browser executes the malicious script in the context of the web server's domain.
6. This effectively violates the intention of the web browser's same-origin policy, which states that scripts in one domain should not be able to access resources or run code in a different domain.
There are three main kinds of XSS:

*Reflected XSS (or Non-Persistent)*

The server reads data directly from the HTTP request and reflects it back in the HTTP response. Reflected XSS exploits occur when an attacker causes a victim to supply dangerous content to a vulnerable web application, which is then reflected back to the victim and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to the victim. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces a victim to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the victim, the content is executed by the victim's browser.

*Stored XSS (or Persistent)*

The application stores dangerous data in a database, message forum, visitor log, or other trusted data store. At a later time, the dangerous data is subsequently read back into the application and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. For example, the attacker might inject XSS into a log message, which might not be handled properly when an administrator views the logs.

*DOM-Based XSS*

In DOM-based XSS, the client performs the injection of XSS into the page; in the other types, the server performs the injection. DOM-based XSS generally involves server-controlled, trusted script that is sent to the client, such as Javascript that performs sanity checks on a form before the user submits it. If the server-supplied script processes user-supplied data and then injects it back into the web page (such as with dynamic HTML), then DOM-based XSS is possible.

Once the malicious script is injected, the attacker can perform a variety of malicious activities. The attacker could transfer private information, such as cookies that may include session information, from the victim's machine to the attacker. The attacker could send malicious requests to a web site on behalf of the victim, which could be especially dangerous to the site if the victim has administrator privileges to manage that site. Phishing attacks could be used to emulate trusted web sites and trick the victim into entering a password, allowing the attacker to compromise the victim's account on that web site. Finally, the script could exploit a vulnerability in the web browser itself possibly taking over the victim's machine, sometimes referred to as ""drive-by hacking.""

In many cases, the attack can be launched without the victim even being aware of it. Even with careful users, attackers frequently use a variety of methods to encode the malicious portion of the attack, such as URL encoding or Unicode, so the request looks less suspicious.

**Guidance**

To remedy XSS vulnerabilities, it is important to never use untrusted or unfiltered data within the code of a HTML page.

Untrusted data can originate not only form the client but potentially a third party or previously uploaded file etc.

Filtering of untrusted data typically involves converting special characters to their HTML entity encoded counterparts (however, other methods do exist, see references).

These special characters include:

* `&`
* `<`
* `>`
* `""`
* `'`
* `/`

An example of HTML entity encoding is converting `<` to `&lt;`.

Although it is possible to filter untrusted input, there are five locations within an HTML page where untrusted input (even if it has been filtered) should never be placed:

1. Directly in a script.
2. Inside an HTML comment.
3. In an attribute name.
4. In a tag name.
5. Directly in CSS.

Each of these locations have their own form of escaping and filtering.

Because many browsers attempt to implement XSS protection, any manual verification of this finding should be conducted using multiple different browsers and browser
versions.

**References**

- [WASC](http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting)
- [Secunia](http://secunia.com/advisories/9716/)
- [OWASP XSS Prevention Cheat Sheet](https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet)
- [OWASP DOM Based XSS](https://www.owasp.org/index.php/DOM_Based_XSS)
- [OWASP DOM Based XSS Prevention Cheat Sheet](https://www.owasp.org/index.php/DOM_based_XSS_Prevention_Cheat_Sheet)",markdown,,,escalated,0.8266207,1
971,Static Analysis,2020-05-18T14:51:00-04:00,86224,2020-05-18T14:54:28-04:00,medium,false-positive,"(function() {
  var Command, Install, Rebuild, _, config, fs, path, yargs;

  path = require('path');

  _ = require('underscore-plus');",1,'require' is not defined,admin,2020-05-30T17:12:10-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/rebuild.js,file,4,4,2020-05-18T14:51:38-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,194248,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/rebuild.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\rebuild.js,file,17,10,4,4,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
972,Static Analysis,2020-05-18T14:51:00-04:00,86226,2020-05-18T14:54:28-04:00,medium,false-positive,"_ = require('underscore-plus');

  yargs = require('yargs');

  config = require('./apm');",5,'require' is not defined,admin,2020-05-30T17:11:52-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/rebuild.js,file,8,8,2020-05-18T14:51:38-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,194252,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/rebuild.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\rebuild.js,file,18,11,8,8,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
973,Static Analysis,2020-05-18T14:51:00-04:00,86227,2020-05-18T14:54:28-04:00,medium,false-positive,"config = require('./apm');

  Command = require('./command');

  fs = require('./fs');",9,'require' is not defined,admin,2020-05-30T17:11:31-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/rebuild.js,file,12,12,2020-05-18T14:51:38-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,194260,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/rebuild.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\rebuild.js,file,20,13,12,12,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
974,Static Analysis,2020-05-18T14:51:00-04:00,86228,2020-05-18T14:54:28-04:00,medium,false-positive,"yargs = require('yargs');

  config = require('./apm');

  Command = require('./command');",7,'require' is not defined,admin,2020-05-30T17:11:14-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/rebuild.js,file,10,10,2020-05-18T14:51:38-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,194256,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/rebuild.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\rebuild.js,file,19,12,10,10,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
975,Static Analysis,2020-05-18T14:51:00-04:00,86229,2020-05-18T14:54:28-04:00,medium,false-positive,"Command = require('./command');

  fs = require('./fs');

  Install = require('./install');",11,'require' is not defined,admin,2020-05-30T17:10:59-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/rebuild.js,file,14,14,2020-05-18T14:51:38-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,194264,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/rebuild.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\rebuild.js,file,15,8,14,14,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
976,Static Analysis,2020-05-18T14:51:00-04:00,86231,2020-05-18T14:54:28-04:00,medium,false-positive,"forkNpmRebuild(options, callback) {
        var env, rebuildArgs, vsArgs;
        process.stdout.write('Rebuilding modules ');
        rebuildArgs = ['--globalconfig', config.getGlobalConfigPath(), '--userconfig', config.getUserConfigPath(), 'rebuild'];
        rebuildArgs.push(...this.getNpmBuildFlags());
        rebuildArgs.push(...options.argv._);",33,'process' is not defined,admin,2020-05-30T17:10:41-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/rebuild.js,file,36,36,2020-05-18T14:51:38-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,194301,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/rebuild.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\rebuild.js,file,16,9,36,36,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
977,Static Analysis,2020-05-18T14:51:00-04:00,86244,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Squirrel/UpdateManager/KillAllExecutablesBelongingToPackage,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201259,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Squirrel/UpdateManager/KillAllExecutablesBelongingToPackage,Squirrel/UpdateManager/KillAllExecutablesBelongingToPackage,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
978,Static Analysis,2020-05-18T14:51:00-04:00,86312,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/Native/RSACng/set_EncryptionPaddingMode,logical,,,2020-05-18T14:52:00-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,202224,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/Native/RSACng/set_EncryptionPaddingMode,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/Native/RSACng/set_EncryptionPaddingMode,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
979,Static Analysis,2020-05-18T14:51:00-04:00,87371,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Archives/Zip/ZipArchive/LoadVolumes,logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.98149246,1
980,Static Analysis,2020-05-18T14:51:00-04:00,87373,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/Native/RSACng/set_SignatureHashAlgorithm,logical,,,2020-05-18T14:52:00-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,202225,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/Native/RSACng/set_SignatureHashAlgorithm,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/Native/RSACng/set_SignatureHashAlgorithm,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
981,Static Analysis,2020-05-18T14:51:00-04:00,87407,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Readers/Rar/MultiVolumeRarReader/MultiVolumeStreamEnumerator/(self),logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.98149246,1
982,Static Analysis,2020-05-18T14:51:00-04:00,87433,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/Web/XmlTransform/XmlAttributePreservingWriter/XmlAttributePreservingWriter,logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.98149246,1
983,Static Analysis,2020-05-18T14:51:00-04:00,87437,2020-05-18T14:54:28-04:00,high,escalated,,,,,,CWE-695: Use of Low-Level Functionality,http://cwevis.org/browse/695,695,Atlassian/Bitbucket/Authentication/AuthenticationPrompts/(self),logical,,,2020-05-18T14:51:51-04:00,Static Analysis,3ac9036736202c636e5a647bb8073bf5337a353e654d9216f8af1cf9293e2f3b,197909,high,,,CWE-695: Use of Low-Level Functionality,http://cwevis.org/browse/695,695,The type uses System.IntPtr or System.UIntPtr instead of System.Runtime.InteropServices.SafeHandle. Consider changing the code to use SafeHandle.,plain-text,Atlassian/Bitbucket/Authentication/AuthenticationPrompts/(self),Atlassian/Bitbucket/Authentication/AuthenticationPrompts/(self),logical,,,,,,PreferSafeHandleRule,Gendarme,GEND-PreferSafeHandleRule,Prefer Safe Handle ,"In general it is best to interop with native code using
**System.Runtime.InteropServices.SafeHandle** instead of
**System.IntPtr** or **System.UIntPtr** because:

SafeHandles are type safe.
SafeHandles are guaranteed to be disposed of during exceptional
conditions like a thread aborting unexpectedly or a stack overflow.
SafeHandles are not vulnerable to reycle attacks.
You don't need to write a finalizer which can be tricky to do because
they execute within their own thread, may execute on partially
constructed objects, and normally tear down the application if you allow
an exception to escape from them.


 **Bad** example:


```csharp
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable.
public sealed class Database {
    ~Database ()
    {
        // This will execute even if the ctor throws so it is important to check
        // to see if the fields are initialized.
        if (m_database != IntPtr.Zero) {
            NativeMethods.sqlite3_close (m_database);
        }
    }

    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        int err = NativeMethods.sqlite3_open_v2 (path, out m_database, flags, IntPtr.Zero);
        // handle errors
    }

    // exec and query methods would go here

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (IntPtr db);

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private IntPtr m_database;
}
```
**Good** example:


```csharp
using System.Runtime.ConstrainedExecution;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable, but you do not need to implement a finalizer because
// SafeHandle will take care of the cleanup.
internal sealed class Database {
    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        m_database = new SqlitePtr (path, flags);
    }

    // exec and query methods would go here

    // This corresponds to a native sqlite3*.
    [SecurityPermission (SecurityAction.InheritanceDemand, UnmanagedCode = true)]
    [SecurityPermission (SecurityAction.Demand, UnmanagedCode = true)]
    private sealed class SqlitePtr : SafeHandle {
        public SqlitePtr (string path, NativeMethods.OpenFlags flags) : base (IntPtr.Zero, true)
        {
            int err = NativeMethods.sqlite3_open_v2 (path, out handle, flags, IntPtr.Zero);
            // handle errors
        }

        public override bool IsInvalid {
            get {
                return (handle == IntPtr.Zero);
            }
        }

        // This will not be called if the handle is invalid. Note that this method should not throw.
        [ReliabilityContract (Consistency.WillNotCorruptState, Cer.MayFail)]
        protected override bool ReleaseHandle ()
        {
            NativeMethods.sqlite3_close (this);
            return true;
        }
    }

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (SqlitePtr db);

        // Open must take an IntPtr but all other methods take a type safe SqlitePtr.
        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private SqlitePtr m_database;
}
```",markdown,GEND-PreferSafeHandleRule,Prefer Safe Handle ,"In general it is best to interop with native code using
**System.Runtime.InteropServices.SafeHandle** instead of
**System.IntPtr** or **System.UIntPtr** because:

SafeHandles are type safe.
SafeHandles are guaranteed to be disposed of during exceptional
conditions like a thread aborting unexpectedly or a stack overflow.
SafeHandles are not vulnerable to reycle attacks.
You don't need to write a finalizer which can be tricky to do because
they execute within their own thread, may execute on partially
constructed objects, and normally tear down the application if you allow
an exception to escape from them.


 **Bad** example:


```csharp
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable.
public sealed class Database {
    ~Database ()
    {
        // This will execute even if the ctor throws so it is important to check
        // to see if the fields are initialized.
        if (m_database != IntPtr.Zero) {
            NativeMethods.sqlite3_close (m_database);
        }
    }

    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        int err = NativeMethods.sqlite3_open_v2 (path, out m_database, flags, IntPtr.Zero);
        // handle errors
    }

    // exec and query methods would go here

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (IntPtr db);

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private IntPtr m_database;
}
```
**Good** example:


```csharp
using System.Runtime.ConstrainedExecution;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable, but you do not need to implement a finalizer because
// SafeHandle will take care of the cleanup.
internal sealed class Database {
    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        m_database = new SqlitePtr (path, flags);
    }

    // exec and query methods would go here

    // This corresponds to a native sqlite3*.
    [SecurityPermission (SecurityAction.InheritanceDemand, UnmanagedCode = true)]
    [SecurityPermission (SecurityAction.Demand, UnmanagedCode = true)]
    private sealed class SqlitePtr : SafeHandle {
        public SqlitePtr (string path, NativeMethods.OpenFlags flags) : base (IntPtr.Zero, true)
        {
            int err = NativeMethods.sqlite3_open_v2 (path, out handle, flags, IntPtr.Zero);
            // handle errors
        }

        public override bool IsInvalid {
            get {
                return (handle == IntPtr.Zero);
            }
        }

        // This will not be called if the handle is invalid. Note that this method should not throw.
        [ReliabilityContract (Consistency.WillNotCorruptState, Cer.MayFail)]
        protected override bool ReleaseHandle ()
        {
            NativeMethods.sqlite3_close (this);
            return true;
        }
    }

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (SqlitePtr db);

        // Open must take an IntPtr but all other methods take a type safe SqlitePtr.
        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private SqlitePtr m_database;
}
```",markdown,,,escalated,0.8318374,1
984,Static Analysis,2020-05-18T14:51:00-04:00,87581,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,WpfAnimatedGif/ImageAnimationController/GotoFrame,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201111,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,WpfAnimatedGif/ImageAnimationController/GotoFrame,WpfAnimatedGif/ImageAnimationController/GotoFrame,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
985,Static Analysis,2020-05-18T14:51:00-04:00,87602,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Squirrel/Shell/ShellLink/SetToastActivatorCLSID,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201270,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Squirrel/Shell/ShellLink/SetToastActivatorCLSID,Squirrel/Shell/ShellLink/SetToastActivatorCLSID,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
986,Static Analysis,2020-05-18T14:51:00-04:00,87611,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Squirrel/DeltaPackageBuilder/createDeltaForSingleFile,logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.98149246,1
987,Static Analysis,2020-05-18T14:51:00-04:00,87631,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Splat/ModernDependencyResolver/GetService,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201245,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Splat/ModernDependencyResolver/GetService,Splat/ModernDependencyResolver/GetService,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
988,Static Analysis,2020-05-18T14:51:00-04:00,87640,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Compressors/Deflate/ZlibBaseStream/SetLength,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201166,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Compressors/Deflate/ZlibBaseStream/SetLength,SharpCompress/Compressors/Deflate/ZlibBaseStream/SetLength,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
989,Static Analysis,2020-05-18T14:51:00-04:00,87643,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-227: 7PK - API Abuse,http://cwevis.org/browse/227,227,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/HttpRequestWrapperException/(self),logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-dc56fd6c6aaaf7aef3e91a691e1f8bd8f7311763a2d3286fce16c6c5cf52b5e2,API Abuse,"The software uses an API in a manner contrary to its intended use.

An API is a contract between a caller and a callee. The most common forms of API misuse occurs when the caller does not honor its end of this contract. For example, if a program does not call chdir() after calling chroot(), it violates the contract that specifies how to change the active root directory in a secure fashion. Another good example of library abuse is expecting the callee to return trustworthy DNS information to the caller. In this case, the caller misuses the callee API by making certain assumptions about its behavior (that the return value can be used for authentication purposes). One can also violate the caller-callee contract from the other side. For example, if a coder subclasses SecureRandom and returns a non-random value, the contract is violated.",markdown,,,escalated,0.94525355,1
990,Static Analysis,2020-05-18T14:51:00-04:00,87649,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/Web/XmlTransform/XmlAttributePreservingWriter/WriteProcessingInstruction,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201224,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Microsoft/Web/XmlTransform/XmlAttributePreservingWriter/WriteProcessingInstruction,Microsoft/Web/XmlTransform/XmlAttributePreservingWriter/WriteProcessingInstruction,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
991,Static Analysis,2020-05-18T14:51:00-04:00,87654,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Squirrel/DeltaPackageBuilder/CreateDeltaPackage,logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.98149246,1
992,Static Analysis,2020-05-18T14:51:00-04:00,87699,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Splat/FuncDependencyResolver/Register,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201250,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Splat/FuncDependencyResolver/Register,Splat/FuncDependencyResolver/Register,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
993,Static Analysis,2020-05-18T14:51:00-04:00,87713,2020-05-18T14:54:28-04:00,high,escalated,,,,,,CWE-693: Protection Mechanism Failure,http://cwevis.org/browse/693,693,Squirrel/NativeMethods/VerQueryValue,logical,,,2020-05-18T14:51:57-04:00,Static Analysis,e740d7b9baaa5e1831566082a04db19c71d568eb8b6d007d284897106e5069c5,200494,high,,,CWE-693: Protection Mechanism Failure,http://cwevis.org/browse/693,693,"Marshaling information for string types is missing and what is required may be different from what you expected the default to be. Add [DllImport CharSet=] to the method or [MarshalAs] on the parameter(s) Parameter 'pSubBlock', of type 'String', does not have [MarshalAs] attribute, yet no [DllImport CharSet=] is set for the method 'VerQueryValue'.",plain-text,Squirrel/NativeMethods/VerQueryValue,Squirrel/NativeMethods/VerQueryValue,logical,,,,,,MarshalStringsInPInvokeDeclarationsRule,Gendarme,GEND-MarshalStringsInPInvokeDeclarationsRule,Marshal Strings In PInvoke Declarations ,"This rule will fire if a P/Invoke method has System.String or
System.Text.StringBuilder arguments, and the DllImportAttribute does not
specify the **CharSet**, and the string arguments are not decorated with
**[MarshalAs]**. This is important because the defaults are different on
the various platforms. On Mono the default is to always use utf-8. On
.NET the default is to use the ANSI CharSet which is the native encoding
and will typically be some variant of ASCII or something like Shift-JIS.
On Compact .NET the default is utf-16.

**Bad** example:


```csharp
[DllImport (""coredll"")]
static extern int SHCreateShortcut (StringBuilder szShortcut, StringBuilder szTarget);
```
**Good** examples:


```csharp
[DllImport (""coredll"", CharSet = CharSet.Auto)]
static extern int SHCreateShortcut (StringBuilder szShortcut, StringBuilder szTarget);

[DllImport (""coredll"")]
static extern int SHCreateShortcut ([MarshalAs (UnmanagedType.LPTStr)] StringBuilder szShortcut,
[MarshalAs (UnmanagedType.LPTStr)] StringBuilder szTarget);
```",markdown,GEND-MarshalStringsInPInvokeDeclarationsRule,Marshal Strings In PInvoke Declarations ,"This rule will fire if a P/Invoke method has System.String or
System.Text.StringBuilder arguments, and the DllImportAttribute does not
specify the **CharSet**, and the string arguments are not decorated with
**[MarshalAs]**. This is important because the defaults are different on
the various platforms. On Mono the default is to always use utf-8. On
.NET the default is to use the ANSI CharSet which is the native encoding
and will typically be some variant of ASCII or something like Shift-JIS.
On Compact .NET the default is utf-16.

**Bad** example:


```csharp
[DllImport (""coredll"")]
static extern int SHCreateShortcut (StringBuilder szShortcut, StringBuilder szTarget);
```
**Good** examples:


```csharp
[DllImport (""coredll"", CharSet = CharSet.Auto)]
static extern int SHCreateShortcut (StringBuilder szShortcut, StringBuilder szTarget);

[DllImport (""coredll"")]
static extern int SHCreateShortcut ([MarshalAs (UnmanagedType.LPTStr)] StringBuilder szShortcut,
[MarshalAs (UnmanagedType.LPTStr)] StringBuilder szTarget);
```",markdown,,,escalated,0.59239584,1
994,Static Analysis,2020-05-18T14:51:00-04:00,87716,2020-05-18T14:54:28-04:00,high,escalated,"nodeBinFolder = path.resolve(__dirname, '..', 'bin');
      pathKey = config.isWin32() ? 'Path' : 'PATH';
      if (env[pathKey]) {
        return env[pathKey] = `${nodeBinFolder}${path.delimiter}${env[pathKey]}`;
      } else {
        return env[pathKey] = nodeBinFolder;
      }",177,Generic Object Injection Sink,admin,2020-05-27T15:29:55-04:00,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/lib/command.js,file,180,180,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.93355244,1
995,Static Analysis,2020-05-18T14:51:00-04:00,87717,2020-05-18T14:54:28-04:00,medium,false-positive,"git = require('./git');

  module.exports = Command = class Command {
    constructor() {
      this.logCommandResults = this.logCommandResults.bind(this);
      this.logCommandResultsIfFail = this.logCommandResultsIfFail.bind(this);",13,'module' is not defined,admin,2020-05-30T17:10:16-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/command.js,file,16,16,2020-05-18T14:51:34-04:00,Static Analysis,62173c3357301b64bcb7cb49ad65b9eeb8aa24356212b93fe0fe0166d3218ce7,192167,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'module' is not defined.,plain-text,Atom x64/resources/app/apm/lib/command.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\command.js,file,9,3,16,16,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.068299174,0
996,Static Analysis,2020-05-18T14:51:00-04:00,87718,2020-05-18T14:54:28-04:00,medium,false-positive,"}

    logSuccess() {
      if (process.platform === 'win32') {
        return process.stdout.write('done\n'.green);
      } else {
        return process.stdout.write('\u2713\n'.green);",69,'process' is not defined,admin,2020-05-30T17:09:47-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/command.js,file,72,72,2020-05-18T14:51:34-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,192184,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/command.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\command.js,file,18,11,72,72,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
997,Static Analysis,2020-05-18T14:51:00-04:00,87721,2020-05-18T14:54:28-04:00,medium,false-positive,"_ = require('underscore-plus');

  semver = require('semver');

  config = require('./apm');",7,'require' is not defined,admin,2020-05-30T17:08:50-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/command.js,file,10,10,2020-05-18T14:51:34-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192164,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/command.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\command.js,file,19,12,10,10,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
998,Static Analysis,2020-05-18T14:51:00-04:00,87722,2020-05-18T14:54:28-04:00,medium,false-positive,"logSuccess() {
      if (process.platform === 'win32') {
        return process.stdout.write('done\n'.green);
      } else {
        return process.stdout.write('\u2713\n'.green);
      }",70,'process' is not defined,admin,2020-05-30T17:08:32-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/command.js,file,73,73,2020-05-18T14:51:34-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,192185,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/command.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\command.js,file,23,16,73,73,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
999,Static Analysis,2020-05-18T14:51:00-04:00,87724,2020-05-18T14:54:28-04:00,medium,false-positive,"if (process.platform === 'win32') {
        return process.stdout.write('done\n'.green);
      } else {
        return process.stdout.write('\u2713\n'.green);
      }
    }",72,'process' is not defined,admin,2020-05-30T17:08:15-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/command.js,file,75,75,2020-05-18T14:51:34-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,192186,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/command.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\command.js,file,23,16,75,75,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
1000,Static Analysis,2020-05-18T14:51:00-04:00,87725,2020-05-18T14:54:28-04:00,medium,false-positive,"this.installedAtomVersion = version;
          }
        } catch (error) {}
        this.electronVersion = (ref1 = process.env.ATOM_ELECTRON_VERSION) != null ? ref1 : electronVersion;
        if (this.electronVersion == null) {
          throw new Error('Could not determine Electron version');
        }",122,'process' is not defined,admin,2020-05-30T17:07:20-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/command.js,file,125,125,2020-05-18T14:51:34-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,192193,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/command.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\command.js,file,47,40,125,125,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
1001,Static Analysis,2020-05-18T14:51:00-04:00,87726,2020-05-18T14:54:28-04:00,medium,false-positive,"outputChunks = [];
      spawned.stdout.on('data', function(chunk) {
        if (options != null ? options.streaming : void 0) {
          return process.stdout.write(chunk);
        } else {
          return outputChunks.push(chunk);
        }",30,'process' is not defined,admin,2020-05-30T17:07:05-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/command.js,file,33,33,2020-05-18T14:51:34-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,192177,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/command.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\command.js,file,25,18,33,33,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
1002,Static Analysis,2020-05-18T14:51:00-04:00,87728,2020-05-18T14:54:28-04:00,medium,false-positive,"}

    logFailure() {
      if (process.platform === 'win32') {
        return process.stdout.write('failed\n'.red);
      } else {
        return process.stdout.write('\u2717\n'.red);",77,'process' is not defined,admin,2020-05-30T17:06:46-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/command.js,file,80,80,2020-05-18T14:51:34-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,192187,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/command.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\command.js,file,18,11,80,80,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
1003,Static Analysis,2020-05-18T14:51:00-04:00,87730,2020-05-18T14:54:28-04:00,medium,false-positive,"(function() {
  var Command, _, child_process, config, git, path, semver;

  child_process = require('child_process');

  path = require('path');",1,'require' is not defined,admin,2020-05-30T17:06:28-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/command.js,file,4,4,2020-05-18T14:51:34-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192160,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/command.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\command.js,file,26,19,4,4,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
1004,Static Analysis,2020-05-18T14:51:00-04:00,87732,2020-05-18T14:54:28-04:00,high,escalated,"(function() {
  var Command, _, child_process, config, git, path, semver;

  child_process = require('child_process');

  path = require('path');",1,,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/lib/command.js,file,4,4,2020-05-18T14:51:34-04:00,Static Analysis,63cfeff1e19efa6702923410272f5381339ce1d5ae0e4401b9a7b3accccb14ee,192159,high,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,"Found require(""child_process"")",plain-text,Atom x64/resources/app/apm/lib/command.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\command.js,file,43,19,4,4,security,detect-child-process,ESLint,ESLINT-SECURITY-detect-child-process,Detect child process,"Detects instances of [`child_process`](https://nodejs.org/api/child_process.html) & non-literal [`exec()`](https://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback)

More information: [Avoiding Command Injection in Node.js](https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/avoid-command-injection-node.md)",markdown,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.93688923,1
1005,Static Analysis,2020-05-18T14:51:00-04:00,87733,2020-05-18T14:54:28-04:00,medium,false-positive,"fork(script, args, ...remaining) {
      args.unshift(script);
      return this.spawn(process.execPath, args, ...remaining);
    }

    packageNamesFromArgv(argv) {",54,'process' is not defined,admin,2020-05-30T17:06:01-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/command.js,file,57,57,2020-05-18T14:51:34-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,192183,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/command.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\command.js,file,32,25,57,57,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
1006,Static Analysis,2020-05-18T14:51:00-04:00,87734,2020-05-18T14:54:28-04:00,medium,false-positive,"logFailure() {
      if (process.platform === 'win32') {
        return process.stdout.write('failed\n'.red);
      } else {
        return process.stdout.write('\u2717\n'.red);
      }",78,'process' is not defined,admin,2020-05-30T17:05:36-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/command.js,file,81,81,2020-05-18T14:51:34-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,192188,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/command.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\command.js,file,23,16,81,81,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
1007,Static Analysis,2020-05-18T14:51:00-04:00,87735,2020-05-18T14:54:28-04:00,medium,false-positive,"config = require('./apm');

  git = require('./git');

  module.exports = Command = class Command {
    constructor() {",11,'require' is not defined,admin,2020-05-30T17:05:17-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/command.js,file,14,14,2020-05-18T14:51:34-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192166,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/command.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\command.js,file,16,9,14,14,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
1008,Static Analysis,2020-05-18T14:51:00-04:00,87740,2020-05-18T14:54:28-04:00,high,escalated,"return this.getResourcePath((resourcePath) => {
        var electronVersion, ref, ref1, version;
        try {
          ({version, electronVersion} = (ref = require(path.join(resourcePath, 'package.json'))) != null ? ref : {});
          version = this.normalizeVersion(version);
          if (semver.valid(version)) {
            this.installedAtomVersion = version;",116,Found non-literal argument in require,admin,2020-05-27T15:27:48-04:00,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/lib/command.js,file,119,119,2020-05-18T14:51:34-04:00,Static Analysis,fd4ac87b1b2792fefa27e1f6acf43697d4e345cb11d008b0fe44dc1c9b95d9c2,192190,high,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Found non-literal argument in require,plain-text,Atom x64/resources/app/apm/lib/command.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\command.js,file,96,48,119,119,security,detect-non-literal-require,ESLint,ESLINT-SECURITY-detect-non-literal-require,Detect non literal require,"Detects `require(variable)`, which might allow an attacker to load and run arbitrary code, or access arbitrary files on disk.

More information: http://www.bennadel.com/blog/2169-where-does-node-js-and-require-look-for-modules.htm",markdown,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.94545025,1
1009,Static Analysis,2020-05-18T14:51:00-04:00,87741,2020-05-18T14:54:28-04:00,medium,false-positive,"return this.getResourcePath((resourcePath) => {
        var electronVersion, ref, ref1, version;
        try {
          ({version, electronVersion} = (ref = require(path.join(resourcePath, 'package.json'))) != null ? ref : {});
          version = this.normalizeVersion(version);
          if (semver.valid(version)) {
            this.installedAtomVersion = version;",116,'require' is not defined,admin,2020-05-30T17:04:52-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/command.js,file,119,119,2020-05-18T14:51:34-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192191,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/command.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\command.js,file,55,48,119,119,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
1010,Static Analysis,2020-05-18T14:51:00-04:00,87742,2020-05-18T14:54:28-04:00,high,escalated,"getVisualStudioFlags() {
      var vsVersion;
      if (vsVersion = config.getInstalledVisualStudioFlag()) {
        return `--msvs_version=${vsVersion}`;
      }
    }",158,,,,CWE-697: Incorrect Comparison,http://cwevis.org/browse/697,697,Atom x64/resources/app/apm/lib/command.js,file,161,161,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-c271f2bb931810eef633f7c736d1dd934fbd6ed5f62ac8d8ea39ade811190622,Comparison,,,,,escalated,0.9110538,1
1011,Static Analysis,2020-05-18T14:51:00-04:00,87745,2020-05-18T14:54:28-04:00,medium,false-positive,"if (process.platform === 'win32') {
        return process.stdout.write('failed\n'.red);
      } else {
        return process.stdout.write('\u2717\n'.red);
      }
    }",80,'process' is not defined,admin,2020-05-30T14:26:31-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/command.js,file,83,83,2020-05-18T14:51:34-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,192189,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/command.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\command.js,file,23,16,83,83,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
1012,Static Analysis,2020-05-18T14:51:00-04:00,87747,2020-05-18T14:54:28-04:00,medium,false-positive,"onChildExit = function(errorOrExitCode) {
        spawned.removeListener('error', onChildExit);
        spawned.removeListener('close', onChildExit);
        return typeof callback === ""function"" ? callback(errorOrExitCode, Buffer.concat(errorChunks).toString(), Buffer.concat(outputChunks).toString()) : void 0;
      };
      spawned.on('error', onChildExit);
      spawned.on('close', onChildExit);",45,'Buffer' is not defined,admin,2020-05-30T14:25:49-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/command.js,file,48,48,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.17391245,0
1013,Static Analysis,2020-05-18T14:51:00-04:00,87756,2020-05-18T14:54:28-04:00,high,escalated,"if (env[pathKey]) {
        return env[pathKey] = `${nodeBinFolder}${path.delimiter}${env[pathKey]}`;
      } else {
        return env[pathKey] = nodeBinFolder;
      }
    }",179,Generic Object Injection Sink,admin,2020-05-27T15:24:19-04:00,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/lib/command.js,file,182,182,2020-05-18T14:51:34-04:00,Static Analysis,6569b353992e88510a975ec3412e07f9c2539e0cf8eb813d02c1c97e2a312d82,192201,high,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Generic Object Injection Sink,plain-text,Atom x64/resources/app/apm/lib/command.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\command.js,file,28,16,182,182,security,detect-object-injection,ESLint,ESLINT-SECURITY-detect-object-injection,Detect object injection,"Detects `variable[key]` as a left- or right-hand assignment operand.

More information: [The Dangers of Square Bracket Notation](https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/the-dangers-of-square-bracket-notation.md)",markdown,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.9251437,1
1014,Static Analysis,2020-05-18T14:51:00-04:00,87758,2020-05-18T14:54:28-04:00,medium,false-positive,"path = require('path');

  _ = require('underscore-plus');

  semver = require('semver');",5,'require' is not defined,admin,2020-05-30T14:25:15-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/command.js,file,8,8,2020-05-18T14:51:34-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192163,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/command.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\command.js,file,14,7,8,8,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
1015,Static Analysis,2020-05-18T14:51:00-04:00,87760,2020-05-18T14:54:28-04:00,medium,false-positive,"child_process = require('child_process');

  path = require('path');

  _ = require('underscore-plus');",3,'require' is not defined,admin,2020-05-30T14:21:48-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/command.js,file,6,6,2020-05-18T14:51:34-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192162,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/command.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\command.js,file,17,10,6,6,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
1016,Static Analysis,2020-05-18T14:51:00-04:00,87762,2020-05-18T14:54:28-04:00,high,escalated,"var nodeBinFolder, pathKey;
      nodeBinFolder = path.resolve(__dirname, '..', 'bin');
      pathKey = config.isWin32() ? 'Path' : 'PATH';
      if (env[pathKey]) {
        return env[pathKey] = `${nodeBinFolder}${path.delimiter}${env[pathKey]}`;
      } else {
        return env[pathKey] = nodeBinFolder;",176,Generic Object Injection Sink,admin,2020-05-27T15:23:48-04:00,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/lib/command.js,file,179,179,2020-05-18T14:51:34-04:00,Static Analysis,6569b353992e88510a975ec3412e07f9c2539e0cf8eb813d02c1c97e2a312d82,192198,high,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Generic Object Injection Sink,plain-text,Atom x64/resources/app/apm/lib/command.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\command.js,file,23,11,179,179,security,detect-object-injection,ESLint,ESLINT-SECURITY-detect-object-injection,Detect object injection,"Detects `variable[key]` as a left- or right-hand assignment operand.

More information: [The Dangers of Square Bracket Notation](https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/the-dangers-of-square-bracket-notation.md)",markdown,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.9251437,1
1017,Static Analysis,2020-05-18T14:51:00-04:00,87763,2020-05-18T14:54:28-04:00,medium,false-positive,"addNodeBinToEnv(env) {
      var nodeBinFolder, pathKey;
      nodeBinFolder = path.resolve(__dirname, '..', 'bin');
      pathKey = config.isWin32() ? 'Path' : 'PATH';
      if (env[pathKey]) {
        return env[pathKey] = `${nodeBinFolder}${path.delimiter}${env[pathKey]}`;",174,'__dirname' is not defined,admin,2020-05-30T14:21:30-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/command.js,file,177,177,2020-05-18T14:51:34-04:00,Static Analysis,9ced861d153ab418069da667a5c9f5fefe90861e103a53df87d410e5550ee1e7,192197,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'__dirname' is not defined.,plain-text,Atom x64/resources/app/apm/lib/command.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\command.js,file,45,36,177,177,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.09524149,0
1018,Static Analysis,2020-05-18T14:51:00-04:00,87764,2020-05-18T14:54:28-04:00,medium,false-positive,"});
      spawned.stderr.on('data', function(chunk) {
        if (options != null ? options.streaming : void 0) {
          return process.stderr.write(chunk);
        } else {
          return errorChunks.push(chunk);
        }",37,'process' is not defined,admin,2020-05-30T14:20:45-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/command.js,file,40,40,2020-05-18T14:51:34-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,192178,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/command.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\command.js,file,25,18,40,40,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
1019,Static Analysis,2020-05-18T14:51:00-04:00,87766,2020-05-18T14:54:28-04:00,medium,false-positive,"getResourcePath(callback) {
      if (this.resourcePath) {
        return process.nextTick(() => {
          return callback(this.resourcePath);
        });
      } else {",132,'process' is not defined,admin,2020-05-30T14:20:24-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/command.js,file,135,135,2020-05-18T14:51:34-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,192194,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/command.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\command.js,file,23,16,135,135,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
1020,Static Analysis,2020-05-18T14:51:00-04:00,87772,2020-05-18T14:54:28-04:00,medium,false-positive,"semver = require('semver');

  config = require('./apm');

  git = require('./git');",9,'require' is not defined,admin,2020-05-30T14:20:04-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/command.js,file,12,12,2020-05-18T14:51:34-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192165,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/command.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\command.js,file,19,12,12,12,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
1021,Static Analysis,2020-05-18T14:51:00-04:00,87791,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/Web/XmlTransform/InsertBase/get_SiblingElement,logical,,,2020-05-18T14:51:56-04:00,Static Analysis,aaaa55b988261c7c089c58a15199d965b60e120bc65373b1aacde2cbcb68d1f7,200199,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,This disposable local is not guaranteed to be disposed of before the method returns. Use a 'using' statement or surround the local's usage with a try/finally block. Local of type 'XmlNodeList' is not disposed of (at least not locally).,plain-text,Microsoft/Web/XmlTransform/InsertBase/get_SiblingElement,Microsoft/Web/XmlTransform/InsertBase/get_SiblingElement,logical,,,,,,EnsureLocalDisposalRule,Gendarme,GEND-EnsureLocalDisposalRule,Ensure Local Disposal ,"This rule checks that disposable locals are always disposed of before
the method returns. Use a 'using' statement (or a try/finally block) to
guarantee local disposal even in the event an unhandled exception
occurs.

**Bad** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    DecodeHeader (stream);
    if (!DecodedHeader.HasContent) {
        return;
    }
    DecodeContent (stream);
    stream.Dispose ();
}
```
**Good** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        DecodeHeader (stream);
        if (!DecodedHeader.HasContent) {
            return;
        }
        DecodeContent (stream);
    }
}
```
**Bad** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    Decode (stream);
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
    stream.Dispose ();
}
```
**Good** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        Decode (stream);
    }
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.9804121,1
1022,Static Analysis,2020-05-18T14:51:00-04:00,87792,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Squirrel/UpdateManager/CreateShortcutsForExecutable,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201255,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Squirrel/UpdateManager/CreateShortcutsForExecutable,Squirrel/UpdateManager/CreateShortcutsForExecutable,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
1023,Static Analysis,2020-05-18T14:51:00-04:00,87793,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Common/Tar/TarReadOnlySubStream/Read,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201185,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Common/Tar/TarReadOnlySubStream/Read,SharpCompress/Common/Tar/TarReadOnlySubStream/Read,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
1024,Static Analysis,2020-05-18T14:51:00-04:00,87800,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/Web/XmlTransform/XmlAttributePreservingWriter/WriteStartElement,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201230,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Microsoft/Web/XmlTransform/XmlAttributePreservingWriter/WriteStartElement,Microsoft/Web/XmlTransform/XmlAttributePreservingWriter/WriteStartElement,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
1025,Static Analysis,2020-05-18T14:51:00-04:00,87836,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/Alm/Gui/UserPromptDialog/MoreInfoLabel_Click,logical,,,2020-05-18T14:52:13-04:00,Static Analysis,990659a019388e4890643c93cad3046863745119ab7b4b291e2e747b1b3d211d,202693,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,This disposable local is not guaranteed to be disposed of before the method returns. Use a 'using' statement or surround the local's usage with a try/finally block. Local of type 'Process' is not disposed of (is this a fluent-like API ?).,plain-text,Microsoft/Alm/Gui/UserPromptDialog/MoreInfoLabel_Click,Microsoft/Alm/Gui/UserPromptDialog/MoreInfoLabel_Click,logical,,,,,,EnsureLocalDisposalRule,Gendarme,GEND-EnsureLocalDisposalRule,Ensure Local Disposal ,"This rule checks that disposable locals are always disposed of before
the method returns. Use a 'using' statement (or a try/finally block) to
guarantee local disposal even in the event an unhandled exception
occurs.

**Bad** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    DecodeHeader (stream);
    if (!DecodedHeader.HasContent) {
        return;
    }
    DecodeContent (stream);
    stream.Dispose ();
}
```
**Good** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        DecodeHeader (stream);
        if (!DecodedHeader.HasContent) {
            return;
        }
        DecodeContent (stream);
    }
}
```
**Bad** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    Decode (stream);
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
    stream.Dispose ();
}
```
**Good** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        Decode (stream);
    }
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.9805271,1
1026,Static Analysis,2020-05-18T14:51:00-04:00,87939,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-227: 7PK - API Abuse,http://cwevis.org/browse/227,227,Microsoft/Web/XmlTransform/XmlNodeException/(self),logical,,,2020-05-18T14:51:57-04:00,Static Analysis,47a6df44d16eb182f816f23918542a817d2995bc2ddf0168976c20b9c8c63cb2,200689,medium,,,CWE-573: Improper Following of Specification by Caller,http://cwevis.org/browse/573,573,"The required constructor for ISerializable is not present in this type. Add a (private for sealed, protected otherwise) serialization constructor for this type. The required constructor for ISerializable is not present in this type.",plain-text,Microsoft/Web/XmlTransform/XmlNodeException/(self),Microsoft/Web/XmlTransform/XmlNodeException/(self),logical,,,,,,MissingSerializationConstructorRule,Gendarme,GEND-MissingSerializationConstructorRule,Missing Serialization Constructor ,"This rule checks for types that implement **System.ISerializable** but
don't provide a serialization constructor. The constructor is required
in order to make the type serializeable but cannot be enforced by the
interface. The serialization constructor should be **private** for
**sealed** types and **protected** for unsealed types.

**Bad** example:


```csharp
[Serializable]
public class Bad : ISerializable {
    public void GetObjectData (SerializationInfo info, StreamingContext context)
    {
    }
}
```
**Good** example (sealed):


```csharp
[Serializable]
public sealed class Good : ISerializable {
    private ClassWithConstructor (SerializationInfo info, StreamingContext context)
    {
    }

    public void GetObjectData (SerializationInfo info, StreamingContext context)
    {
    }
}
```
**Good** example:


```csharp
[Serializable]
public class Good : ISerializable {
    protected ClassWithConstructor (SerializationInfo info, StreamingContext context)
    {
    }

    public void GetObjectData (SerializationInfo info, StreamingContext context)
    {
    }
}
```",markdown,rule-dc56fd6c6aaaf7aef3e91a691e1f8bd8f7311763a2d3286fce16c6c5cf52b5e2,API Abuse,"The software uses an API in a manner contrary to its intended use.

An API is a contract between a caller and a callee. The most common forms of API misuse occurs when the caller does not honor its end of this contract. For example, if a program does not call chdir() after calling chroot(), it violates the contract that specifies how to change the active root directory in a secure fashion. Another good example of library abuse is expecting the callee to return trustworthy DNS information to the caller. In this case, the caller misuses the callee API by making certain assumptions about its behavior (that the return value can be used for authentication purposes). One can also violate the caller-callee contract from the other side. For example, if a coder subclasses SecureRandom and returns a non-random value, the contract is violated.",markdown,,,escalated,0.94911677,1
1027,Static Analysis,2020-05-18T14:51:00-04:00,87964,2020-05-18T14:54:28-04:00,high,escalated,,,,,,CWE-695: Use of Low-Level Functionality,http://cwevis.org/browse/695,695,Squirrel/Shell/FileIcon/SHFILEINFO/(self),logical,,,2020-05-18T14:51:57-04:00,Static Analysis,3ac9036736202c636e5a647bb8073bf5337a353e654d9216f8af1cf9293e2f3b,200971,high,,,CWE-695: Use of Low-Level Functionality,http://cwevis.org/browse/695,695,The type uses System.IntPtr or System.UIntPtr instead of System.Runtime.InteropServices.SafeHandle. Consider changing the code to use SafeHandle.,plain-text,Squirrel/Shell/FileIcon/SHFILEINFO/(self),Squirrel/Shell/FileIcon/SHFILEINFO/(self),logical,,,,,,PreferSafeHandleRule,Gendarme,GEND-PreferSafeHandleRule,Prefer Safe Handle ,"In general it is best to interop with native code using
**System.Runtime.InteropServices.SafeHandle** instead of
**System.IntPtr** or **System.UIntPtr** because:

SafeHandles are type safe.
SafeHandles are guaranteed to be disposed of during exceptional
conditions like a thread aborting unexpectedly or a stack overflow.
SafeHandles are not vulnerable to reycle attacks.
You don't need to write a finalizer which can be tricky to do because
they execute within their own thread, may execute on partially
constructed objects, and normally tear down the application if you allow
an exception to escape from them.


 **Bad** example:


```csharp
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable.
public sealed class Database {
    ~Database ()
    {
        // This will execute even if the ctor throws so it is important to check
        // to see if the fields are initialized.
        if (m_database != IntPtr.Zero) {
            NativeMethods.sqlite3_close (m_database);
        }
    }

    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        int err = NativeMethods.sqlite3_open_v2 (path, out m_database, flags, IntPtr.Zero);
        // handle errors
    }

    // exec and query methods would go here

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (IntPtr db);

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private IntPtr m_database;
}
```
**Good** example:


```csharp
using System.Runtime.ConstrainedExecution;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable, but you do not need to implement a finalizer because
// SafeHandle will take care of the cleanup.
internal sealed class Database {
    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        m_database = new SqlitePtr (path, flags);
    }

    // exec and query methods would go here

    // This corresponds to a native sqlite3*.
    [SecurityPermission (SecurityAction.InheritanceDemand, UnmanagedCode = true)]
    [SecurityPermission (SecurityAction.Demand, UnmanagedCode = true)]
    private sealed class SqlitePtr : SafeHandle {
        public SqlitePtr (string path, NativeMethods.OpenFlags flags) : base (IntPtr.Zero, true)
        {
            int err = NativeMethods.sqlite3_open_v2 (path, out handle, flags, IntPtr.Zero);
            // handle errors
        }

        public override bool IsInvalid {
            get {
                return (handle == IntPtr.Zero);
            }
        }

        // This will not be called if the handle is invalid. Note that this method should not throw.
        [ReliabilityContract (Consistency.WillNotCorruptState, Cer.MayFail)]
        protected override bool ReleaseHandle ()
        {
            NativeMethods.sqlite3_close (this);
            return true;
        }
    }

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (SqlitePtr db);

        // Open must take an IntPtr but all other methods take a type safe SqlitePtr.
        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private SqlitePtr m_database;
}
```",markdown,GEND-PreferSafeHandleRule,Prefer Safe Handle ,"In general it is best to interop with native code using
**System.Runtime.InteropServices.SafeHandle** instead of
**System.IntPtr** or **System.UIntPtr** because:

SafeHandles are type safe.
SafeHandles are guaranteed to be disposed of during exceptional
conditions like a thread aborting unexpectedly or a stack overflow.
SafeHandles are not vulnerable to reycle attacks.
You don't need to write a finalizer which can be tricky to do because
they execute within their own thread, may execute on partially
constructed objects, and normally tear down the application if you allow
an exception to escape from them.


 **Bad** example:


```csharp
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable.
public sealed class Database {
    ~Database ()
    {
        // This will execute even if the ctor throws so it is important to check
        // to see if the fields are initialized.
        if (m_database != IntPtr.Zero) {
            NativeMethods.sqlite3_close (m_database);
        }
    }

    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        int err = NativeMethods.sqlite3_open_v2 (path, out m_database, flags, IntPtr.Zero);
        // handle errors
    }

    // exec and query methods would go here

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (IntPtr db);

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private IntPtr m_database;
}
```
**Good** example:


```csharp
using System.Runtime.ConstrainedExecution;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable, but you do not need to implement a finalizer because
// SafeHandle will take care of the cleanup.
internal sealed class Database {
    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        m_database = new SqlitePtr (path, flags);
    }

    // exec and query methods would go here

    // This corresponds to a native sqlite3*.
    [SecurityPermission (SecurityAction.InheritanceDemand, UnmanagedCode = true)]
    [SecurityPermission (SecurityAction.Demand, UnmanagedCode = true)]
    private sealed class SqlitePtr : SafeHandle {
        public SqlitePtr (string path, NativeMethods.OpenFlags flags) : base (IntPtr.Zero, true)
        {
            int err = NativeMethods.sqlite3_open_v2 (path, out handle, flags, IntPtr.Zero);
            // handle errors
        }

        public override bool IsInvalid {
            get {
                return (handle == IntPtr.Zero);
            }
        }

        // This will not be called if the handle is invalid. Note that this method should not throw.
        [ReliabilityContract (Consistency.WillNotCorruptState, Cer.MayFail)]
        protected override bool ReleaseHandle ()
        {
            NativeMethods.sqlite3_close (this);
            return true;
        }
    }

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (SqlitePtr db);

        // Open must take an IntPtr but all other methods take a type safe SqlitePtr.
        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private SqlitePtr m_database;
}
```",markdown,,,escalated,0.8318374,1
1028,Static Analysis,2020-05-18T14:51:00-04:00,88016,2020-05-18T14:54:28-04:00,high,escalated,,,,,,CWE-693: Protection Mechanism Failure,http://cwevis.org/browse/693,693,Squirrel/NativeMethods/GetFileVersionInfo,logical,,,2020-05-18T14:51:57-04:00,Static Analysis,66d89ee6fac69837ae1820cb708cd42ce3038d5784db1395f6b08f5de2aa5754,200492,high,,,CWE-693: Protection Mechanism Failure,http://cwevis.org/browse/693,693,"Marshaling information for string types is missing and what is required may be different from what you expected the default to be. Add [DllImport CharSet=] to the method or [MarshalAs] on the parameter(s) Parameter 'lpszFileName', of type 'String', does not have [MarshalAs] attribute, yet no [DllImport CharSet=] is set for the method 'GetFileVersionInfo'.",plain-text,Squirrel/NativeMethods/GetFileVersionInfo,Squirrel/NativeMethods/GetFileVersionInfo,logical,,,,,,MarshalStringsInPInvokeDeclarationsRule,Gendarme,GEND-MarshalStringsInPInvokeDeclarationsRule,Marshal Strings In PInvoke Declarations ,"This rule will fire if a P/Invoke method has System.String or
System.Text.StringBuilder arguments, and the DllImportAttribute does not
specify the **CharSet**, and the string arguments are not decorated with
**[MarshalAs]**. This is important because the defaults are different on
the various platforms. On Mono the default is to always use utf-8. On
.NET the default is to use the ANSI CharSet which is the native encoding
and will typically be some variant of ASCII or something like Shift-JIS.
On Compact .NET the default is utf-16.

**Bad** example:


```csharp
[DllImport (""coredll"")]
static extern int SHCreateShortcut (StringBuilder szShortcut, StringBuilder szTarget);
```
**Good** examples:


```csharp
[DllImport (""coredll"", CharSet = CharSet.Auto)]
static extern int SHCreateShortcut (StringBuilder szShortcut, StringBuilder szTarget);

[DllImport (""coredll"")]
static extern int SHCreateShortcut ([MarshalAs (UnmanagedType.LPTStr)] StringBuilder szShortcut,
[MarshalAs (UnmanagedType.LPTStr)] StringBuilder szTarget);
```",markdown,GEND-MarshalStringsInPInvokeDeclarationsRule,Marshal Strings In PInvoke Declarations ,"This rule will fire if a P/Invoke method has System.String or
System.Text.StringBuilder arguments, and the DllImportAttribute does not
specify the **CharSet**, and the string arguments are not decorated with
**[MarshalAs]**. This is important because the defaults are different on
the various platforms. On Mono the default is to always use utf-8. On
.NET the default is to use the ANSI CharSet which is the native encoding
and will typically be some variant of ASCII or something like Shift-JIS.
On Compact .NET the default is utf-16.

**Bad** example:


```csharp
[DllImport (""coredll"")]
static extern int SHCreateShortcut (StringBuilder szShortcut, StringBuilder szTarget);
```
**Good** examples:


```csharp
[DllImport (""coredll"", CharSet = CharSet.Auto)]
static extern int SHCreateShortcut (StringBuilder szShortcut, StringBuilder szTarget);

[DllImport (""coredll"")]
static extern int SHCreateShortcut ([MarshalAs (UnmanagedType.LPTStr)] StringBuilder szShortcut,
[MarshalAs (UnmanagedType.LPTStr)] StringBuilder szTarget);
```",markdown,,,escalated,0.5831863,1
1029,Static Analysis,2020-05-18T14:51:00-04:00,88043,2020-05-18T14:54:28-04:00,high,escalated,,,,,,CWE-693: Protection Mechanism Failure,http://cwevis.org/browse/693,693,Squirrel/Shell/FileIcon/FormatMessage,logical,,,2020-05-18T14:51:57-04:00,Static Analysis,b146c0333d3836a117a7b7a2db7cf7318f011a0621369b54f36cd4c0edd63fbb,200499,high,,,CWE-693: Protection Mechanism Failure,http://cwevis.org/browse/693,693,"Marshaling information for string types is missing and what is required may be different from what you expected the default to be. Add [DllImport CharSet=] to the method or [MarshalAs] on the parameter(s) Parameter 'lpBuffer', of type 'String', does not have [MarshalAs] attribute, yet no [DllImport CharSet=] is set for the method 'FormatMessage'.",plain-text,Squirrel/Shell/FileIcon/FormatMessage,Squirrel/Shell/FileIcon/FormatMessage,logical,,,,,,MarshalStringsInPInvokeDeclarationsRule,Gendarme,GEND-MarshalStringsInPInvokeDeclarationsRule,Marshal Strings In PInvoke Declarations ,"This rule will fire if a P/Invoke method has System.String or
System.Text.StringBuilder arguments, and the DllImportAttribute does not
specify the **CharSet**, and the string arguments are not decorated with
**[MarshalAs]**. This is important because the defaults are different on
the various platforms. On Mono the default is to always use utf-8. On
.NET the default is to use the ANSI CharSet which is the native encoding
and will typically be some variant of ASCII or something like Shift-JIS.
On Compact .NET the default is utf-16.

**Bad** example:


```csharp
[DllImport (""coredll"")]
static extern int SHCreateShortcut (StringBuilder szShortcut, StringBuilder szTarget);
```
**Good** examples:


```csharp
[DllImport (""coredll"", CharSet = CharSet.Auto)]
static extern int SHCreateShortcut (StringBuilder szShortcut, StringBuilder szTarget);

[DllImport (""coredll"")]
static extern int SHCreateShortcut ([MarshalAs (UnmanagedType.LPTStr)] StringBuilder szShortcut,
[MarshalAs (UnmanagedType.LPTStr)] StringBuilder szTarget);
```",markdown,GEND-MarshalStringsInPInvokeDeclarationsRule,Marshal Strings In PInvoke Declarations ,"This rule will fire if a P/Invoke method has System.String or
System.Text.StringBuilder arguments, and the DllImportAttribute does not
specify the **CharSet**, and the string arguments are not decorated with
**[MarshalAs]**. This is important because the defaults are different on
the various platforms. On Mono the default is to always use utf-8. On
.NET the default is to use the ANSI CharSet which is the native encoding
and will typically be some variant of ASCII or something like Shift-JIS.
On Compact .NET the default is utf-16.

**Bad** example:


```csharp
[DllImport (""coredll"")]
static extern int SHCreateShortcut (StringBuilder szShortcut, StringBuilder szTarget);
```
**Good** examples:


```csharp
[DllImport (""coredll"", CharSet = CharSet.Auto)]
static extern int SHCreateShortcut (StringBuilder szShortcut, StringBuilder szTarget);

[DllImport (""coredll"")]
static extern int SHCreateShortcut ([MarshalAs (UnmanagedType.LPTStr)] StringBuilder szShortcut,
[MarshalAs (UnmanagedType.LPTStr)] StringBuilder szTarget);
```",markdown,,,escalated,0.550572,1
1030,Static Analysis,2020-05-18T14:51:00-04:00,88058,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/Web/XmlTransform/XmlAttributePreservingWriter/WriteEndAttribute,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201219,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Microsoft/Web/XmlTransform/XmlAttributePreservingWriter/WriteEndAttribute,Microsoft/Web/XmlTransform/XmlAttributePreservingWriter/WriteEndAttribute,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
1031,Static Analysis,2020-05-18T14:51:00-04:00,88061,2020-05-18T14:54:28-04:00,high,false-positive,"uninstallsToRegister = [];
        uninstallError = null;
        for (i = 0, len = packageNames.length; i < len; i++) {
          packageName = packageNames[i];
          if (packageName === '.') {
            packageName = path.basename(process.cwd());
          }",76,Generic Object Injection Sink,admin,2020-05-27T15:21:31-04:00,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/lib/uninstall.js,file,79,79,2020-05-18T14:51:42-04:00,Static Analysis,6569b353992e88510a975ec3412e07f9c2539e0cf8eb813d02c1c97e2a312d82,195181,high,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Generic Object Injection Sink,plain-text,Atom x64/resources/app/apm/lib/uninstall.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\uninstall.js,file,40,25,79,79,security,detect-object-injection,ESLint,ESLINT-SECURITY-detect-object-injection,Detect object injection,"Detects `variable[key]` as a left- or right-hand assignment operand.

More information: [The Dangers of Square Bracket Notation](https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/the-dangers-of-square-bracket-notation.md)",markdown,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.9251437,1
1032,Static Analysis,2020-05-18T14:51:00-04:00,88063,2020-05-18T14:54:28-04:00,medium,false-positive,"for (i = 0, len = packageNames.length; i < len; i++) {
          packageName = packageNames[i];
          if (packageName === '.') {
            packageName = path.basename(process.cwd());
          }
          process.stdout.write(`Uninstalling ${packageName} `);
          try {",78,'process' is not defined,admin,2020-05-30T14:19:31-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/uninstall.js,file,81,81,2020-05-18T14:51:42-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,195184,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/uninstall.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\uninstall.js,file,48,41,81,81,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
1033,Static Analysis,2020-05-18T14:51:00-04:00,88065,2020-05-18T14:54:28-04:00,high,escalated,"}
            if (options.argv.hard || options.argv.dev) {
              packageDirectory = path.join(devPackagesDirectory, packageName);
              if (fs.existsSync(packageDirectory)) {
                fs.removeSync(packageDirectory);
              } else if (!options.argv.hard) {
                throw new Error(""Does not exist"");",97,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/lib/uninstall.js,file,100,100,2020-05-18T14:51:42-04:00,Static Analysis,a8eb318301dc105f6b242fce363923637060c403e8c9c7b93b984891497b7744,195214,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Found fs.existsSync with non literal argument at index 0,plain-text,Atom x64/resources/app/apm/lib/uninstall.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\uninstall.js,file,32,19,100,100,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.96763015,1
1034,Static Analysis,2020-05-18T14:51:00-04:00,88071,2020-05-18T14:54:28-04:00,medium,false-positive,"auth = require('./auth');

  Command = require('./command');

  config = require('./apm');",11,'require' is not defined,admin,2020-05-30T14:19:14-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/uninstall.js,file,14,14,2020-05-18T14:51:42-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,195063,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/uninstall.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\uninstall.js,file,20,13,14,14,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
1035,Static Analysis,2020-05-18T14:51:00-04:00,88073,2020-05-18T14:54:28-04:00,medium,false-positive,"fs = require('./fs');

  request = require('./request');

  module.exports = Uninstall = (function() {
    class Uninstall extends Command {",17,'require' is not defined,admin,2020-05-30T14:17:39-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/uninstall.js,file,20,20,2020-05-18T14:51:42-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,195073,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/uninstall.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\uninstall.js,file,20,13,20,20,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
1036,Static Analysis,2020-05-18T14:51:00-04:00,88074,2020-05-18T14:54:28-04:00,medium,false-positive,"(function() {
  var CSON, Command, Uninstall, async, auth, config, fs, path, request, yargs;

  path = require('path');

  async = require('async');",1,'require' is not defined,admin,2020-05-30T14:16:55-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/uninstall.js,file,4,4,2020-05-18T14:51:42-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,195049,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/uninstall.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\uninstall.js,file,17,10,4,4,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
1037,Static Analysis,2020-05-18T14:51:00-04:00,88081,2020-05-18T14:54:28-04:00,medium,false-positive,"path = require('path');

  async = require('async');

  CSON = require('season');",3,'require' is not defined.,admin,2020-05-24T12:22:15-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/uninstall.js,file,6,6,2020-05-18T14:51:42-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,195050,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/uninstall.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\uninstall.js,file,18,11,6,6,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
1038,Static Analysis,2020-05-18T14:51:00-04:00,88083,2020-05-18T14:54:28-04:00,high,escalated,"getPackageVersion(packageDirectory) {
        var error, ref;
        try {
          return (ref = CSON.readFileSync(path.join(packageDirectory, 'package.json'))) != null ? ref.version : void 0;
        } catch (error1) {
          error = error1;
          return null;",33,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/lib/uninstall.js,file,36,36,2020-05-18T14:51:42-04:00,Static Analysis,374ad040fff48d9edaa97052bf28a674b1f4e79af66a0448f1ab1699003790cd,195123,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Found fs.readFileSync with non literal argument at index 0,plain-text,Atom x64/resources/app/apm/lib/uninstall.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\uninstall.js,file,42,25,36,36,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.9758102,1
1039,Static Analysis,2020-05-18T14:51:00-04:00,88085,2020-05-18T14:54:28-04:00,medium,false-positive,"async = require('async');

  CSON = require('season');

  yargs = require('yargs');",5,'require' is not defined.,admin,2020-05-24T12:21:57-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/uninstall.js,file,8,8,2020-05-18T14:51:42-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,195054,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/uninstall.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\uninstall.js,file,17,10,8,8,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
1040,Static Analysis,2020-05-18T14:51:00-04:00,88087,2020-05-18T14:54:28-04:00,high,escalated,"parseOptions(argv) {
        var options;
        options = yargs(argv).wrap(Math.min(100, yargs.terminalWidth()));
        options.usage(""\nUsage: apm uninstall <package_name>...\n\nDelete the installed package(s) from the ~/.atom/packages directory."");
        options.alias('h', 'help').describe('help', 'Print this usage message');
        options.alias('d', 'dev').boolean('dev').describe('dev', 'Uninstall from ~/.atom/dev/packages');
        return options.boolean('hard').describe('hard', 'Uninstall from ~/.atom/packages and ~/.atom/dev/packages');",24,,,,CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'),http://cwevis.org/browse/79,79,Atom x64/resources/app/apm/lib/uninstall.js,file,27,27,2020-05-18T14:51:42-04:00,Static Analysis,b4414dd3b1087806bb332146e753f5917a3aec259e29c568ca289f9ab428d0d4,195092,high,,,CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS),http://cwevis.org/browse/80,80,HTML passed in to function 'options.usage',plain-text,Atom x64/resources/app/apm/lib/uninstall.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\uninstall.js,file,22,9,27,27,xss,no-mixed-html,ESLint,ESLINT-XSS-no-mixed-html,No mixed html,"Wanted a way to catch XSS issues in code before they end up in production.

## Rule Details

This rule aims to catch as many XSS issues by examining the code as possible.
The rule checks for mixed html/non-html content, unescaped input, etc.

The following patterns are considered warnings:

```js

// Mixed content
var x = '<div>' + input + '</div>';
$node.html( '<div>' + input + '</div>' );

// Unsafe container names.
var html = input;
var text = htmlInput;
displayValue( htmlInput );

// Checking certain expression parameters that might end up in the variables.
var htmlItems = [ input1, input2 ].join();
var textItems = [ '<div>', input, '</div>' ].join();
var tag = isNumbered ? '<ol>' : '<ul>';

// Checking function return values.
var createHtml = function( item ) { return item.name; }
var createBox = function( item ) { return '<div>' + encode( item ) + '</div>' }

```

The following patterns are not warnings:

```js

// Proper encoding
var html = '<div>' + encode( input ) + '</div>';
$node.html( '<div>' + encode( input ) + '</div>' );

// Proper container names
var html = '<img src=""happy.png"">';
var text = textbox.value;

```

## When Not To Use It

If you are creating a Node.js application that doesn't output any HTML, you can
safely disable this rule.

## Further Reading

- [XSS Prevention CHeat Sheet - OWASP](https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet)",markdown,rule-396ebe8bb0c3dc5d4eb2b5368a97688fdb0f2587416453645c3d06db2b216479,Cross-site Scripting (XSS),"Cross-site scripting (XSS) vulnerabilities occur when:
1. Untrusted data enters a web application, typically from a web request.
2. The web application dynamically generates a web page that contains this untrusted data.
3. During page generation, the application does not prevent the data from containing content that is executable by a web browser, such as JavaScript, HTML tags, HTML attributes, mouse events, Flash, ActiveX, etc.
4. A victim visits the generated web page through a web browser, which contains malicious script that was injected using the untrusted data.
5. Since the script comes from a web page that was sent by the web server, the victim's web browser executes the malicious script in the context of the web server's domain.
6. This effectively violates the intention of the web browser's same-origin policy, which states that scripts in one domain should not be able to access resources or run code in a different domain.
There are three main kinds of XSS:

*Reflected XSS (or Non-Persistent)*

The server reads data directly from the HTTP request and reflects it back in the HTTP response. Reflected XSS exploits occur when an attacker causes a victim to supply dangerous content to a vulnerable web application, which is then reflected back to the victim and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to the victim. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces a victim to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the victim, the content is executed by the victim's browser.

*Stored XSS (or Persistent)*

The application stores dangerous data in a database, message forum, visitor log, or other trusted data store. At a later time, the dangerous data is subsequently read back into the application and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. For example, the attacker might inject XSS into a log message, which might not be handled properly when an administrator views the logs.

*DOM-Based XSS*

In DOM-based XSS, the client performs the injection of XSS into the page; in the other types, the server performs the injection. DOM-based XSS generally involves server-controlled, trusted script that is sent to the client, such as Javascript that performs sanity checks on a form before the user submits it. If the server-supplied script processes user-supplied data and then injects it back into the web page (such as with dynamic HTML), then DOM-based XSS is possible.

Once the malicious script is injected, the attacker can perform a variety of malicious activities. The attacker could transfer private information, such as cookies that may include session information, from the victim's machine to the attacker. The attacker could send malicious requests to a web site on behalf of the victim, which could be especially dangerous to the site if the victim has administrator privileges to manage that site. Phishing attacks could be used to emulate trusted web sites and trick the victim into entering a password, allowing the attacker to compromise the victim's account on that web site. Finally, the script could exploit a vulnerability in the web browser itself possibly taking over the victim's machine, sometimes referred to as ""drive-by hacking.""

In many cases, the attack can be launched without the victim even being aware of it. Even with careful users, attackers frequently use a variety of methods to encode the malicious portion of the attack, such as URL encoding or Unicode, so the request looks less suspicious.

**Guidance**

To remedy XSS vulnerabilities, it is important to never use untrusted or unfiltered data within the code of a HTML page.

Untrusted data can originate not only form the client but potentially a third party or previously uploaded file etc.

Filtering of untrusted data typically involves converting special characters to their HTML entity encoded counterparts (however, other methods do exist, see references).

These special characters include:

* `&`
* `<`
* `>`
* `""`
* `'`
* `/`

An example of HTML entity encoding is converting `<` to `&lt;`.

Although it is possible to filter untrusted input, there are five locations within an HTML page where untrusted input (even if it has been filtered) should never be placed:

1. Directly in a script.
2. Inside an HTML comment.
3. In an attribute name.
4. In a tag name.
5. Directly in CSS.

Each of these locations have their own form of escaping and filtering.

Because many browsers attempt to implement XSS protection, any manual verification of this finding should be conducted using multiple different browsers and browser
versions.

**References**

- [WASC](http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting)
- [Secunia](http://secunia.com/advisories/9716/)
- [OWASP XSS Prevention Cheat Sheet](https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet)
- [OWASP DOM Based XSS](https://www.owasp.org/index.php/DOM_Based_XSS)
- [OWASP DOM Based XSS Prevention Cheat Sheet](https://www.owasp.org/index.php/DOM_based_XSS_Prevention_Cheat_Sheet)",markdown,,,escalated,0.8266207,1
1041,Static Analysis,2020-05-18T14:51:00-04:00,88089,2020-05-18T14:54:28-04:00,medium,false-positive,"config = require('./apm');

  fs = require('./fs');

  request = require('./request');",15,'require' is not defined,admin,2020-05-30T14:16:32-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/uninstall.js,file,18,18,2020-05-18T14:51:42-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,195070,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/uninstall.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\uninstall.js,file,15,8,18,18,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
1042,Static Analysis,2020-05-18T14:51:00-04:00,88090,2020-05-18T14:54:28-04:00,medium,false-positive,"if (packageName === '.') {
            packageName = path.basename(process.cwd());
          }
          process.stdout.write(`Uninstalling ${packageName} `);
          try {
            if (!options.argv.dev) {
              packageDirectory = path.join(packagesDirectory, packageName);",80,'process' is not defined,admin,2020-05-30T14:16:01-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/uninstall.js,file,83,83,2020-05-18T14:51:42-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,195187,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/lib/uninstall.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\uninstall.js,file,18,11,83,83,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
1043,Static Analysis,2020-05-18T14:51:00-04:00,88091,2020-05-18T14:54:28-04:00,high,escalated,"if (!options.argv.dev) {
              packageDirectory = path.join(packagesDirectory, packageName);
              packageManifestPath = path.join(packageDirectory, 'package.json');
              if (fs.existsSync(packageManifestPath)) {
                packageVersion = this.getPackageVersion(packageDirectory);
                fs.removeSync(packageDirectory);
                if (packageVersion) {",85,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/lib/uninstall.js,file,88,88,2020-05-18T14:51:42-04:00,Static Analysis,a8eb318301dc105f6b242fce363923637060c403e8c9c7b93b984891497b7744,195197,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Found fs.existsSync with non literal argument at index 0,plain-text,Atom x64/resources/app/apm/lib/uninstall.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\uninstall.js,file,32,19,88,88,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.96763015,1
1044,Static Analysis,2020-05-18T14:51:00-04:00,88092,2020-05-18T14:54:28-04:00,medium,false-positive,"yargs = require('yargs');

  auth = require('./auth');

  Command = require('./command');",9,'require' is not defined,admin,2020-05-30T14:15:28-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/uninstall.js,file,12,12,2020-05-18T14:51:42-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,195059,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/uninstall.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\uninstall.js,file,17,10,12,12,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
1045,Static Analysis,2020-05-18T14:51:00-04:00,88093,2020-05-18T14:54:28-04:00,medium,false-positive,"Command = require('./command');

  config = require('./apm');

  fs = require('./fs');",13,'require' is not defined,admin,2020-05-30T14:15:08-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/uninstall.js,file,16,16,2020-05-18T14:51:42-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,195066,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/uninstall.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\uninstall.js,file,19,12,16,16,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
1046,Static Analysis,2020-05-18T14:51:00-04:00,88094,2020-05-18T14:54:28-04:00,medium,false-positive,"request = require('./request');

  module.exports = Uninstall = (function() {
    class Uninstall extends Command {
      parseOptions(argv) {
        var options;",19,'module' is not defined,admin,2020-05-30T14:14:32-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/uninstall.js,file,22,22,2020-05-18T14:51:42-04:00,Static Analysis,62173c3357301b64bcb7cb49ad65b9eeb8aa24356212b93fe0fe0166d3218ce7,195074,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'module' is not defined.,plain-text,Atom x64/resources/app/apm/lib/uninstall.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\uninstall.js,file,9,3,22,22,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.068299174,0
1047,Static Analysis,2020-05-18T14:51:00-04:00,88096,2020-05-18T14:54:28-04:00,medium,false-positive,"CSON = require('season');

  yargs = require('yargs');

  auth = require('./auth');",7,'require' is not defined,admin,2020-05-30T14:13:30-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/uninstall.js,file,10,10,2020-05-18T14:51:42-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,195055,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/uninstall.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\uninstall.js,file,18,11,10,10,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
1048,Static Analysis,2020-05-18T14:51:00-04:00,88201,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/Web/XmlTransform/XmlAttributePreservingWriter/WriteChars,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201216,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Microsoft/Web/XmlTransform/XmlAttributePreservingWriter/WriteChars,Microsoft/Web/XmlTransform/XmlAttributePreservingWriter/WriteChars,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
1049,Static Analysis,2020-05-18T14:51:00-04:00,88203,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/Web/XmlTransform/XmlAttributePreservingWriter/WriteAttributeWhitespace,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201208,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Microsoft/Web/XmlTransform/XmlAttributePreservingWriter/WriteAttributeWhitespace,Microsoft/Web/XmlTransform/XmlAttributePreservingWriter/WriteAttributeWhitespace,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
1050,Static Analysis,2020-05-18T14:51:00-04:00,88219,2020-05-18T14:54:28-04:00,high,escalated,"var child_process = require('child_process')

module.exports = function(filename, callback) {
  child_process.exec(filename + ' -v', function(error, stdout) {",1,"Found require(""child_process""",admin,2020-05-27T15:21:07-04:00,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/script/bundled-node-version.js,file,1,1,2020-05-18T14:51:45-04:00,Static Analysis,63cfeff1e19efa6702923410272f5381339ce1d5ae0e4401b9a7b3accccb14ee,196276,high,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,"Found require(""child_process"")",plain-text,Atom x64/resources/app/apm/script/bundled-node-version.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\script\bundled-node-version.js,file,45,21,1,1,security,detect-child-process,ESLint,ESLINT-SECURITY-detect-child-process,Detect child process,"Detects instances of [`child_process`](https://nodejs.org/api/child_process.html) & non-literal [`exec()`](https://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback)

More information: [Avoiding Command Injection in Node.js](https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/avoid-command-injection-node.md)",markdown,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.93688923,1
1051,Static Analysis,2020-05-18T14:51:00-04:00,88220,2020-05-18T14:54:28-04:00,high,escalated,"var child_process = require('child_process')

module.exports = function(filename, callback) {
  child_process.exec(filename + ' -v', function(error, stdout) {
    if (error != null) {
      callback(error);
      return;",1,,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/script/bundled-node-version.js,file,4,4,2020-05-18T14:51:45-04:00,Static Analysis,0a2f5feb4d9308a37a6bd1773c7746101ae7b12a7e0e099672659b2839598766,196279,high,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Found child_process.exec() with non Literal first argument,plain-text,Atom x64/resources/app/apm/script/bundled-node-version.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\script\bundled-node-version.js,file,21,3,4,4,security,detect-child-process,ESLint,ESLINT-SECURITY-detect-child-process,Detect child process,"Detects instances of [`child_process`](https://nodejs.org/api/child_process.html) & non-literal [`exec()`](https://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback)

More information: [Avoiding Command Injection in Node.js](https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/avoid-command-injection-node.md)",markdown,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.93121207,1
1052,Static Analysis,2020-05-18T14:51:00-04:00,88221,2020-05-18T14:54:28-04:00,high,escalated,"version = stdout.toString().trim();
    }

    child_process.exec(filename + "" -p 'process.arch'"", function(error, stdout) {
      var arch = null;
      if (stdout != null) {
        arch = stdout.toString().trim();",12,Generic Object Injection Sink,admin,2020-05-27T15:14:22-04:00,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/script/bundled-node-version.js,file,15,15,2020-05-18T14:51:45-04:00,Static Analysis,0a2f5feb4d9308a37a6bd1773c7746101ae7b12a7e0e099672659b2839598766,196280,high,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Found child_process.exec() with non Literal first argument,plain-text,Atom x64/resources/app/apm/script/bundled-node-version.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\script\bundled-node-version.js,file,23,5,15,15,security,detect-child-process,ESLint,ESLINT-SECURITY-detect-child-process,Detect child process,"Detects instances of [`child_process`](https://nodejs.org/api/child_process.html) & non-literal [`exec()`](https://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback)

More information: [Avoiding Command Injection in Node.js](https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/avoid-command-injection-node.md)",markdown,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.93121207,1
1053,Static Analysis,2020-05-18T14:51:00-04:00,88222,2020-05-18T14:54:28-04:00,medium,false-positive,"var child_process = require('child_process')

module.exports = function(filename, callback) {
  child_process.exec(filename + ' -v', function(error, stdout) {",1,'require' is not defined,admin,2020-05-30T14:13:02-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/script/bundled-node-version.js,file,1,1,2020-05-18T14:51:45-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,196277,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/script/bundled-node-version.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\script\bundled-node-version.js,file,28,21,1,1,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
1054,Static Analysis,2020-05-18T14:51:00-04:00,88223,2020-05-18T14:54:28-04:00,medium,false-positive,"var child_process = require('child_process')

module.exports = function(filename, callback) {
  child_process.exec(filename + ' -v', function(error, stdout) {
    if (error != null) {
      callback(error);",1,,,,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/script/bundled-node-version.js,file,3,3,2020-05-18T14:51:45-04:00,Static Analysis,62173c3357301b64bcb7cb49ad65b9eeb8aa24356212b93fe0fe0166d3218ce7,196278,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'module' is not defined.,plain-text,Atom x64/resources/app/apm/script/bundled-node-version.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\script\bundled-node-version.js,file,7,1,3,3,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.06829916,0
1055,Static Analysis,2020-05-18T14:51:00-04:00,88294,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-465: Pointer Issues,http://cwevis.org/browse/465,465,GitHub/Shared/Helpers/AccessKeysManagerScoping/GetIsEnabled,logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-0dd0e028a5ce327b29cd3ffa9ef62c97353c7155364a9a4b89933187ee675fef,Invalid Pointer,,,,,escalated,0.67089015,1
1056,Static Analysis,2020-05-18T14:51:00-04:00,88304,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,GitHub/Authentication/Gui/ShowViewModel,logical,,,2020-05-18T14:52:13-04:00,Static Analysis,76b6d72d4e95684a090839ef7f980773efcf0ca60f109fccf30824c47477863c,202533,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,This disposable local is not guaranteed to be disposed of before the method returns. Use a 'using' statement or surround the local's usage with a try/finally block. Local of type 'Task' is not disposed of (at least not locally).,plain-text,GitHub/Authentication/Gui/ShowViewModel,GitHub/Authentication/Gui/ShowViewModel,logical,,,,,,EnsureLocalDisposalRule,Gendarme,GEND-EnsureLocalDisposalRule,Ensure Local Disposal ,"This rule checks that disposable locals are always disposed of before
the method returns. Use a 'using' statement (or a try/finally block) to
guarantee local disposal even in the event an unhandled exception
occurs.

**Bad** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    DecodeHeader (stream);
    if (!DecodedHeader.HasContent) {
        return;
    }
    DecodeContent (stream);
    stream.Dispose ();
}
```
**Good** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        DecodeHeader (stream);
        if (!DecodedHeader.HasContent) {
            return;
        }
        DecodeContent (stream);
    }
}
```
**Bad** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    Decode (stream);
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
    stream.Dispose ();
}
```
**Good** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        Decode (stream);
    }
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.98076445,1
1057,Static Analysis,2020-05-18T14:51:00-04:00,88337,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Squirrel/Bsdiff/WrappingStream/SetLength,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201283,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Squirrel/Bsdiff/WrappingStream/SetLength,Squirrel/Bsdiff/WrappingStream/SetLength,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
1058,Static Analysis,2020-05-18T14:51:00-04:00,88362,2020-05-18T14:54:28-04:00,medium,false-positive,"yargs = require('yargs');

  Command = require('./command');

  fs = require('./fs');",9,'require' is not defined,admin,2020-05-30T14:11:42-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/list.js,file,12,12,2020-05-18T14:51:36-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,193346,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/list.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\list.js,file,20,13,12,12,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
1059,Static Analysis,2020-05-18T14:51:00-04:00,88367,2020-05-18T14:54:28-04:00,medium,false-positive,"(function() {
  var CSON, Command, List, _, config, fs, getRepository, path, tree, yargs;

  path = require('path');

  _ = require('underscore-plus');",1,'require' is not defined,admin,2020-05-30T14:11:23-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/list.js,file,4,4,2020-05-18T14:51:36-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,193340,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/list.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\list.js,file,17,10,4,4,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
1060,Static Analysis,2020-05-18T14:51:00-04:00,88371,2020-05-18T14:54:28-04:00,high,escalated,"var results;
            results = [];
            for (packageName in _atomPackages) {
              ({metadata} = _atomPackages[packageName]);
              results.push(metadata);
            }
            return results;",193,Generic Object Injection Sink,admin,2020-05-27T15:14:05-04:00,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/lib/list.js,file,196,196,2020-05-18T14:51:36-04:00,Static Analysis,6569b353992e88510a975ec3412e07f9c2539e0cf8eb813d02c1c97e2a312d82,193522,high,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Generic Object Injection Sink,plain-text,Atom x64/resources/app/apm/lib/list.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\list.js,file,55,29,196,196,security,detect-object-injection,ESLint,ESLINT-SECURITY-detect-object-injection,Detect object injection,"Detects `variable[key]` as a left- or right-hand assignment operand.

More information: [The Dangers of Square Bracket Notation](https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/the-dangers-of-square-bracket-notation.md)",markdown,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.9251437,1
1061,Static Analysis,2020-05-18T14:51:00-04:00,88376,2020-05-18T14:54:28-04:00,medium,false-positive,"CSON = require('season');

  yargs = require('yargs');

  Command = require('./command');",7,'require' is not defined,admin,2020-05-30T14:11:04-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/list.js,file,10,10,2020-05-18T14:51:36-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,193344,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/list.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\list.js,file,18,11,10,10,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
1062,Static Analysis,2020-05-18T14:51:00-04:00,88377,2020-05-18T14:54:28-04:00,medium,false-positive,"({getRepository} = require(""./packages""));

  module.exports = List = (function() {
    class List extends Command {
      constructor() {
        var configPath, ref, ref1, ref2;",19,'module' is not defined,admin,2020-05-30T14:10:37-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/list.js,file,22,22,2020-05-18T14:51:36-04:00,Static Analysis,62173c3357301b64bcb7cb49ad65b9eeb8aa24356212b93fe0fe0166d3218ce7,193352,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'module' is not defined.,plain-text,Atom x64/resources/app/apm/lib/list.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\list.js,file,9,3,22,22,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.068299174,0
1063,Static Analysis,2020-05-18T14:51:00-04:00,88378,2020-05-18T14:54:28-04:00,high,escalated,"super();
        this.userPackagesDirectory = path.join(config.getAtomDirectory(), 'packages');
        this.devPackagesDirectory = path.join(config.getAtomDirectory(), 'dev', 'packages');
        if (configPath = CSON.resolve(path.join(config.getAtomDirectory(), 'config'))) {
          try {
            this.disabledPackages = (ref = CSON.readFileSync(configPath)) != null ? (ref1 = ref['*']) != null ? (ref2 = ref1.core) != null ? ref2.disabledPackages : void 0 : void 0 : void 0;
          } catch (error1) {}",26,,,,CWE-697: Incorrect Comparison,http://cwevis.org/browse/697,697,Atom x64/resources/app/apm/lib/list.js,file,29,29,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-c271f2bb931810eef633f7c736d1dd934fbd6ed5f62ac8d8ea39ade811190622,Comparison,,,,,escalated,0.9110538,1
1064,Static Analysis,2020-05-18T14:51:00-04:00,88379,2020-05-18T14:54:28-04:00,high,false-positive,"packages = [];
        ref = fs.list(directoryPath);
        for (i = 0, len = ref.length; i < len; i++) {
          child = ref[i];
          if (!fs.isDirectorySync(path.join(directoryPath, child))) {
            continue;
          }",110,Generic Object Injection Sink,admin,2020-05-27T15:13:50-04:00,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/lib/list.js,file,113,113,2020-05-18T14:51:36-04:00,Static Analysis,6569b353992e88510a975ec3412e07f9c2539e0cf8eb813d02c1c97e2a312d82,193465,high,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Generic Object Injection Sink,plain-text,Atom x64/resources/app/apm/lib/list.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\list.js,file,25,19,113,113,security,detect-object-injection,ESLint,ESLINT-SECURITY-detect-object-injection,Detect object injection,"Detects `variable[key]` as a left- or right-hand assignment operand.

More information: [The Dangers of Square Bracket Notation](https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/the-dangers-of-square-bracket-notation.md)",markdown,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.9251437,1
1065,Static Analysis,2020-05-18T14:51:00-04:00,88383,2020-05-18T14:54:28-04:00,high,escalated,"}

      checkExclusiveOptions(options, positive_option, negative_option, value) {
        if (options.argv[positive_option]) {
          return value;
        } else if (options.argv[negative_option]) {
          return !value;",92,Generic Object Injection Sink,admin,2020-05-27T15:13:39-04:00,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/lib/list.js,file,95,95,2020-05-18T14:51:36-04:00,Static Analysis,6569b353992e88510a975ec3412e07f9c2539e0cf8eb813d02c1c97e2a312d82,193437,high,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Generic Object Injection Sink,plain-text,Atom x64/resources/app/apm/lib/list.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\list.js,file,42,13,95,95,security,detect-object-injection,ESLint,ESLINT-SECURITY-detect-object-injection,Detect object injection,"Detects `variable[key]` as a left- or right-hand assignment operand.

More information: [The Dangers of Square Bracket Notation](https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/the-dangers-of-square-bracket-notation.md)",markdown,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.9251437,1
1066,Static Analysis,2020-05-18T14:51:00-04:00,88384,2020-05-18T14:54:28-04:00,high,escalated,"checkExclusiveOptions(options, positive_option, negative_option, value) {
        if (options.argv[positive_option]) {
          return value;
        } else if (options.argv[negative_option]) {
          return !value;
        } else {
          return true;",94,Generic Object Injection Sink,admin,2020-05-27T15:13:28-04:00,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/lib/list.js,file,97,97,2020-05-18T14:51:36-04:00,Static Analysis,6569b353992e88510a975ec3412e07f9c2539e0cf8eb813d02c1c97e2a312d82,193442,high,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Generic Object Injection Sink,plain-text,Atom x64/resources/app/apm/lib/list.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\list.js,file,49,20,97,97,security,detect-object-injection,ESLint,ESLINT-SECURITY-detect-object-injection,Detect object injection,"Detects `variable[key]` as a left- or right-hand assignment operand.

More information: [The Dangers of Square Bracket Notation](https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/the-dangers-of-square-bracket-notation.md)",markdown,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.9251437,1
1067,Static Analysis,2020-05-18T14:51:00-04:00,88387,2020-05-18T14:54:28-04:00,medium,false-positive,"path = require('path');

  _ = require('underscore-plus');

  CSON = require('season');",3,'require' is not defined,admin,2020-05-30T14:05:09-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/list.js,file,6,6,2020-05-18T14:51:36-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,193341,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/list.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\list.js,file,14,7,6,6,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
1068,Static Analysis,2020-05-18T14:51:00-04:00,88398,2020-05-18T14:54:28-04:00,medium,false-positive,"config = require('./apm');

  tree = require('./tree');

  ({getRepository} = require(""./packages""));",15,'require' is not defined,admin,2020-05-30T14:01:42-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/list.js,file,18,18,2020-05-18T14:51:36-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,193349,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/list.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\list.js,file,17,10,18,18,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
1069,Static Analysis,2020-05-18T14:51:00-04:00,88399,2020-05-18T14:54:28-04:00,high,escalated,"}
          }
          manifest = null;
          if (manifestPath = CSON.resolve(path.join(directoryPath, child, 'package'))) {
            try {
              manifest = CSON.readFileSync(manifestPath);
            } catch (error1) {}",123,,,,CWE-697: Incorrect Comparison,http://cwevis.org/browse/697,697,Atom x64/resources/app/apm/lib/list.js,file,126,126,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-c271f2bb931810eef633f7c736d1dd934fbd6ed5f62ac8d8ea39ade811190622,Comparison,,,,,escalated,0.9110538,1
1070,Static Analysis,2020-05-18T14:51:00-04:00,88402,2020-05-18T14:54:28-04:00,medium,false-positive,"tree = require('./tree');

  ({getRepository} = require(""./packages""));

  module.exports = List = (function() {
    class List extends Command {",17,'require' is not defined,admin,2020-05-30T14:01:23-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/list.js,file,20,20,2020-05-18T14:51:36-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,193351,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/list.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\list.js,file,29,22,20,20,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
1071,Static Analysis,2020-05-18T14:51:00-04:00,88407,2020-05-18T14:54:28-04:00,high,false-positive,"var i, len, pack, packageLine;
        if (options.argv.bare) {
          for (i = 0, len = packages.length; i < len; i++) {
            pack = packages[i];
            packageLine = pack.name;
            if (pack.version != null) {
              packageLine += `@${pack.version}`;",60,Generic Object Injection Sink,admin,2020-05-27T15:13:08-04:00,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/lib/list.js,file,63,63,2020-05-18T14:51:36-04:00,Static Analysis,6569b353992e88510a975ec3412e07f9c2539e0cf8eb813d02c1c97e2a312d82,193406,high,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Generic Object Injection Sink,plain-text,Atom x64/resources/app/apm/lib/list.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\list.js,file,31,20,63,63,security,detect-object-injection,ESLint,ESLINT-SECURITY-detect-object-injection,Detect object injection,"Detects `variable[key]` as a left- or right-hand assignment operand.

More information: [The Dangers of Square Bracket Notation](https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/the-dangers-of-square-bracket-notation.md)",markdown,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.9251437,1
1072,Static Analysis,2020-05-18T14:51:00-04:00,88408,2020-05-18T14:54:28-04:00,medium,false-positive,"_ = require('underscore-plus');

  CSON = require('season');

  yargs = require('yargs');",5,'require' is not defined,admin,2020-05-30T14:00:51-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/list.js,file,8,8,2020-05-18T14:51:36-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,193342,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/list.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\list.js,file,17,10,8,8,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
1073,Static Analysis,2020-05-18T14:51:00-04:00,88410,2020-05-18T14:54:28-04:00,high,escalated,"this.devPackagesDirectory = path.join(config.getAtomDirectory(), 'dev', 'packages');
        if (configPath = CSON.resolve(path.join(config.getAtomDirectory(), 'config'))) {
          try {
            this.disabledPackages = (ref = CSON.readFileSync(configPath)) != null ? (ref1 = ref['*']) != null ? (ref2 = ref1.core) != null ? ref2.disabledPackages : void 0 : void 0 : void 0;
          } catch (error1) {}
        }
        if (this.disabledPackages == null) {",28,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/lib/list.js,file,31,31,2020-05-18T14:51:36-04:00,Static Analysis,374ad040fff48d9edaa97052bf28a674b1f4e79af66a0448f1ab1699003790cd,193359,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Found fs.readFileSync with non literal argument at index 0,plain-text,Atom x64/resources/app/apm/lib/list.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\list.js,file,61,44,31,31,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.9758102,1
1074,Static Analysis,2020-05-18T14:51:00-04:00,88413,2020-05-18T14:54:28-04:00,high,escalated,"manifest = null;
          if (manifestPath = CSON.resolve(path.join(directoryPath, child, 'package'))) {
            try {
              manifest = CSON.readFileSync(manifestPath);
            } catch (error1) {}
          }
          if (manifest == null) {",125,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/lib/list.js,file,128,128,2020-05-18T14:51:36-04:00,Static Analysis,374ad040fff48d9edaa97052bf28a674b1f4e79af66a0448f1ab1699003790cd,193483,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Found fs.readFileSync with non literal argument at index 0,plain-text,Atom x64/resources/app/apm/lib/list.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\list.js,file,43,26,128,128,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.9758102,1
1075,Static Analysis,2020-05-18T14:51:00-04:00,88414,2020-05-18T14:54:28-04:00,medium,false-positive,"fs = require('./fs');

  config = require('./apm');

  tree = require('./tree');",13,'require' is not defined,admin,2020-05-30T14:00:29-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/list.js,file,16,16,2020-05-18T14:51:36-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,193348,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/list.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\list.js,file,19,12,16,16,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
1076,Static Analysis,2020-05-18T14:51:00-04:00,88419,2020-05-18T14:54:28-04:00,medium,false-positive,"Command = require('./command');

  fs = require('./fs');

  config = require('./apm');",11,'require' is not defined,admin,2020-05-30T13:59:46-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/list.js,file,14,14,2020-05-18T14:51:36-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,193347,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/list.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\list.js,file,15,8,14,14,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
1077,Static Analysis,2020-05-18T14:51:00-04:00,88420,2020-05-18T14:54:28-04:00,high,escalated,"var _atomPackages, metadata, metadataPath, packageName, packages;
          try {
            metadataPath = path.join(resourcePath, 'package.json');
            ({_atomPackages} = JSON.parse(fs.readFileSync(metadataPath)));
          } catch (error1) {}
          if (_atomPackages == null) {
            _atomPackages = {};",184,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/lib/list.js,file,187,187,2020-05-18T14:51:36-04:00,Static Analysis,374ad040fff48d9edaa97052bf28a674b1f4e79af66a0448f1ab1699003790cd,193519,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Found fs.readFileSync with non literal argument at index 0,plain-text,Atom x64/resources/app/apm/lib/list.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\list.js,file,58,43,187,187,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.9758102,1
1078,Static Analysis,2020-05-18T14:51:00-04:00,88452,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/Web/XmlTransform/PositionTrackingTextReader/Read,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201202,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Microsoft/Web/XmlTransform/PositionTrackingTextReader/Read,Microsoft/Web/XmlTransform/PositionTrackingTextReader/Read,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
1079,Static Analysis,2020-05-18T14:51:00-04:00,88453,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/Web/XmlTransform/XmlAttributePreservingWriter/WriteCData,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201214,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Microsoft/Web/XmlTransform/XmlAttributePreservingWriter/WriteCData,Microsoft/Web/XmlTransform/XmlAttributePreservingWriter/WriteCData,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
1080,Static Analysis,2020-05-18T14:51:00-04:00,88463,2020-05-18T14:54:28-04:00,high,escalated,"var e;
      if (fs.isDirectorySync(directoryPath)) {
        try {
          return fs.readdirSync(directoryPath);
        } catch (error1) {
          e = error1;
          return [];",18,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/lib/fs.js,file,21,21,2020-05-18T14:51:34-04:00,Static Analysis,cbb6e839417e7d17515dcb248b2294ad68b4b8c574da732c47e66bfae873164c,192568,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Found fs.readdirSync with non literal argument at index 0,plain-text,Atom x64/resources/app/apm/lib/fs.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\fs.js,file,32,18,21,21,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.978149,1
1081,Static Analysis,2020-05-18T14:51:00-04:00,88464,2020-05-18T14:54:28-04:00,medium,false-positive,"_ = require('underscore-plus');

  fs = require('fs-plus');

  ncp = require('ncp');",3,'require' is not defined,admin,2020-05-30T13:59:10-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/fs.js,file,6,6,2020-05-18T14:51:34-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192546,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/fs.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\fs.js,file,15,8,6,6,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
1082,Static Analysis,2020-05-18T14:51:00-04:00,88465,2020-05-18T14:54:28-04:00,medium,false-positive,"wrench = require('wrench');

  path = require('path');

  fsAdditions = {
    list: function(directoryPath) {",11,'require' is not defined,admin,2020-05-30T13:58:49-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/fs.js,file,14,14,2020-05-18T14:51:34-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192559,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/fs.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\fs.js,file,17,10,14,14,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
1083,Static Analysis,2020-05-18T14:51:00-04:00,88466,2020-05-18T14:54:28-04:00,high,escalated,"return callback(error);
        } else {
          wrench.mkdirSyncRecursive(path.dirname(destinationPath), 0o755);
          return fs.rename(sourcePath, destinationPath, callback);
        }
      });
    }",45,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/lib/fs.js,file,48,48,2020-05-18T14:51:34-04:00,Static Analysis,37678183a28852fe58f1d4c9349cb43238a677d38ce26c22a13ece36c5cf104b,192578,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,"Found fs.rename with non literal argument at index 0,1",plain-text,Atom x64/resources/app/apm/lib/fs.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\fs.js,file,27,18,48,48,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.9756597,1
1084,Static Analysis,2020-05-18T14:51:00-04:00,88467,2020-05-18T14:54:28-04:00,high,escalated,"module.exports = new Proxy({}, {
    get: function(target, key) {
      return fsAdditions[key] || fs[key];
    },
    set: function(target, key, value) {
      return fsAdditions[key] = value;",53,Generic Object Injection Sink,admin,2020-05-27T15:12:47-04:00,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/lib/fs.js,file,56,56,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.93355244,1
1085,Static Analysis,2020-05-18T14:51:00-04:00,88472,2020-05-18T14:54:28-04:00,medium,false-positive,"fs = require('fs-plus');

  ncp = require('ncp');

  rm = require('rimraf');",5,'require' is not defined,admin,2020-05-30T13:58:29-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/fs.js,file,8,8,2020-05-18T14:51:34-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192552,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/fs.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\fs.js,file,16,9,8,8,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
1086,Static Analysis,2020-05-18T14:51:00-04:00,88473,2020-05-18T14:54:28-04:00,high,escalated,"return fsAdditions[key] || fs[key];
    },
    set: function(target, key, value) {
      return fsAdditions[key] = value;
    }
  });",56,,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/lib/fs.js,file,59,59,2020-05-18T14:51:34-04:00,Static Analysis,6569b353992e88510a975ec3412e07f9c2539e0cf8eb813d02c1c97e2a312d82,192584,high,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Generic Object Injection Sink,plain-text,Atom x64/resources/app/apm/lib/fs.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\fs.js,file,30,14,59,59,security,detect-object-injection,ESLint,ESLINT-SECURITY-detect-object-injection,Detect object injection,"Detects `variable[key]` as a left- or right-hand assignment operand.

More information: [The Dangers of Square Bracket Notation](https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/the-dangers-of-square-bracket-notation.md)",markdown,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.9251437,1
1087,Static Analysis,2020-05-18T14:51:00-04:00,88474,2020-05-18T14:54:28-04:00,medium,false-positive,"(function() {
  var _, fs, fsAdditions, ncp, path, rm, wrench;

  _ = require('underscore-plus');

  fs = require('fs-plus');",1,'require' is not defined,admin,2020-05-30T13:58:09-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/fs.js,file,4,4,2020-05-18T14:51:34-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192543,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/fs.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\fs.js,file,14,7,4,4,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270798,0
1088,Static Analysis,2020-05-18T14:51:00-04:00,88475,2020-05-18T14:54:28-04:00,medium,false-positive,"ncp = require('ncp');

  rm = require('rimraf');

  wrench = require('wrench');",7,'require' is not defined,admin,2020-05-30T13:57:37-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/fs.js,file,10,10,2020-05-18T14:51:34-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192554,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/fs.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\fs.js,file,15,8,10,10,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
1089,Static Analysis,2020-05-18T14:51:00-04:00,88476,2020-05-18T14:54:28-04:00,medium,false-positive,"rm = require('rimraf');

  wrench = require('wrench');

  path = require('path');",9,'require' is not defined,admin,2020-05-30T13:57:19-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/fs.js,file,12,12,2020-05-18T14:51:34-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,192555,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/fs.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\fs.js,file,19,12,12,12,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
1090,Static Analysis,2020-05-18T14:51:00-04:00,88477,2020-05-18T14:54:28-04:00,medium,false-positive,"}
  };

  module.exports = new Proxy({}, {
    get: function(target, key) {
      return fsAdditions[key] || fs[key];
    },",51,'module' is not defined,admin,2020-05-30T13:56:52-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/fs.js,file,54,54,2020-05-18T14:51:34-04:00,Static Analysis,62173c3357301b64bcb7cb49ad65b9eeb8aa24356212b93fe0fe0166d3218ce7,192580,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'module' is not defined.,plain-text,Atom x64/resources/app/apm/lib/fs.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\fs.js,file,9,3,54,54,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.068299174,0
1091,Static Analysis,2020-05-18T14:51:00-04:00,88762,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Archives/SevenZip/SevenZipArchive/SevenZipReader/GetEntryStream,logical,,,2020-05-18T14:51:56-04:00,Static Analysis,fff0844c741fcf0690dc4dd951e71d4eedb4f1b0d1281bcca04fb26d1615e2f3,200182,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,This disposable local is not guaranteed to be disposed of before the method returns. Use a 'using' statement or surround the local's usage with a try/finally block. Local of type 'ReadOnlySubStream' is not disposed of (at least not locally).,plain-text,SharpCompress/Archives/SevenZip/SevenZipArchive/SevenZipReader/GetEntryStream,SharpCompress/Archives/SevenZip/SevenZipArchive/SevenZipReader/GetEntryStream,logical,,,,,,EnsureLocalDisposalRule,Gendarme,GEND-EnsureLocalDisposalRule,Ensure Local Disposal ,"This rule checks that disposable locals are always disposed of before
the method returns. Use a 'using' statement (or a try/finally block) to
guarantee local disposal even in the event an unhandled exception
occurs.

**Bad** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    DecodeHeader (stream);
    if (!DecodedHeader.HasContent) {
        return;
    }
    DecodeContent (stream);
    stream.Dispose ();
}
```
**Good** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        DecodeHeader (stream);
        if (!DecodedHeader.HasContent) {
            return;
        }
        DecodeContent (stream);
    }
}
```
**Bad** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    Decode (stream);
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
    stream.Dispose ();
}
```
**Good** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        Decode (stream);
    }
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.9819943,1
1092,Static Analysis,2020-05-18T14:51:00-04:00,88897,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Squirrel/Shell/ShellLink/set_ShortCutFile,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201260,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Squirrel/Shell/ShellLink/set_ShortCutFile,Squirrel/Shell/ShellLink/set_ShortCutFile,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
1093,Static Analysis,2020-05-18T14:51:00-04:00,88980,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/Alm/Cli/Program/Delete,logical,,,2020-05-18T14:52:14-04:00,Static Analysis,9d4d0dd753ee6745414a354655547d7752c27107ac72758d72ca674f677a4473,202959,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,This disposable local is not guaranteed to be disposed of before the method returns. Use a 'using' statement or surround the local's usage with a try/finally block. Local of type 'Task' is not disposed of (is this a fluent-like API ?).,plain-text,Microsoft/Alm/Cli/Program/Delete,Microsoft/Alm/Cli/Program/Delete,logical,,,,,,EnsureLocalDisposalRule,Gendarme,GEND-EnsureLocalDisposalRule,Ensure Local Disposal ,"This rule checks that disposable locals are always disposed of before
the method returns. Use a 'using' statement (or a try/finally block) to
guarantee local disposal even in the event an unhandled exception
occurs.

**Bad** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    DecodeHeader (stream);
    if (!DecodedHeader.HasContent) {
        return;
    }
    DecodeContent (stream);
    stream.Dispose ();
}
```
**Good** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        DecodeHeader (stream);
        if (!DecodedHeader.HasContent) {
            return;
        }
        DecodeContent (stream);
    }
}
```
**Bad** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    Decode (stream);
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
    stream.Dispose ();
}
```
**Good** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        Decode (stream);
    }
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.9824454,1
1094,Static Analysis,2020-05-18T14:51:00-04:00,88984,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Compressors/LZMA/Utilites/CrcCheckStream/Write,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201160,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Compressors/LZMA/Utilites/CrcCheckStream/Write,SharpCompress/Compressors/LZMA/Utilites/CrcCheckStream/Write,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
1095,Static Analysis,2020-05-18T14:51:00-04:00,89024,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Common/Rar/RarCryptoBinaryReader/Mark,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201191,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Common/Rar/RarCryptoBinaryReader/Mark,SharpCompress/Common/Rar/RarCryptoBinaryReader/Mark,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
1096,Static Analysis,2020-05-18T14:51:00-04:00,89031,2020-05-18T14:54:28-04:00,medium,false-positive,"(function() {
  var ScopeSelector, SyntaxVariablesTemplate, TextMateTheme, _, plist;

  _ = require('underscore-plus');

  plist = require('@atom/plist');",1,'require' is not defined,admin,2020-05-30T13:56:27-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/text-mate-theme.js,file,4,4,2020-05-18T14:51:42-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,194895,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/text-mate-theme.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\text-mate-theme.js,file,14,7,4,4,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
1097,Static Analysis,2020-05-18T14:51:00-04:00,89034,2020-05-18T14:54:28-04:00,high,false-positive,"var i, len, name, results, scope, settings;
      results = [];
      for (i = 0, len = scopeSelectorSettings.length; i < len; i++) {
        ({name, scope, settings} = scopeSelectorSettings[i]);
        if (!scope) {
          continue;
        }",147,Generic Object Injection Sink,admin,2020-05-27T15:08:46-04:00,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/lib/text-mate-theme.js,file,150,150,2020-05-18T14:51:42-04:00,Static Analysis,6569b353992e88510a975ec3412e07f9c2539e0cf8eb813d02c1c97e2a312d82,194995,high,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Generic Object Injection Sink,plain-text,Atom x64/resources/app/apm/lib/text-mate-theme.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\text-mate-theme.js,file,60,36,150,150,security,detect-object-injection,ESLint,ESLINT-SECURITY-detect-object-injection,Detect object injection,"Detects `variable[key]` as a left- or right-hand assignment operand.

More information: [The Dangers of Square Bracket Notation](https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/the-dangers-of-square-bracket-notation.md)",markdown,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.9251437,1
1098,Static Analysis,2020-05-18T14:51:00-04:00,89038,2020-05-18T14:54:28-04:00,high,false-positive,"lines = ['@import ""syntax-variables"";', ''];
      ref = this.getRulesets();
      for (i = 0, len = ref.length; i < len; i++) {
        ({selector, properties} = ref[i]);
        lines.push(`${selector} {`);
        for (name in properties) {
          value = properties[name];",47,Generic Object Injection Sink,admin,2020-05-27T15:08:28-04:00,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/lib/text-mate-theme.js,file,50,50,2020-05-18T14:51:42-04:00,Static Analysis,6569b353992e88510a975ec3412e07f9c2539e0cf8eb813d02c1c97e2a312d82,194914,high,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Generic Object Injection Sink,plain-text,Atom x64/resources/app/apm/lib/text-mate-theme.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\text-mate-theme.js,file,41,35,50,50,security,detect-object-injection,ESLint,ESLINT-SECURITY-detect-object-injection,Detect object injection,"Detects `variable[key]` as a left- or right-hand assignment operand.

More information: [The Dangers of Square Bracket Notation](https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/the-dangers-of-square-bracket-notation.md)",markdown,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.9251437,1
1099,Static Analysis,2020-05-18T14:51:00-04:00,89041,2020-05-18T14:54:28-04:00,high,false-positive,"settings = [];
      }
      for (i = 0, len = settings.length; i < len; i++) {
        setting = settings[i];
        ({scope, name} = setting.settings);
        if (scope || name) {
          continue;",21,Generic Object Injection Sink,admin,2020-05-27T15:07:34-04:00,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/lib/text-mate-theme.js,file,24,24,2020-05-18T14:51:42-04:00,Static Analysis,6569b353992e88510a975ec3412e07f9c2539e0cf8eb813d02c1c97e2a312d82,194907,high,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Generic Object Injection Sink,plain-text,Atom x64/resources/app/apm/lib/text-mate-theme.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\text-mate-theme.js,file,30,19,24,24,security,detect-object-injection,ESLint,ESLINT-SECURITY-detect-object-injection,Detect object injection,"Detects `variable[key]` as a left- or right-hand assignment operand.

More information: [The Dangers of Square Bracket Notation](https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/the-dangers-of-square-bracket-notation.md)",markdown,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.9251437,1
1100,Static Analysis,2020-05-18T14:51:00-04:00,89042,2020-05-18T14:54:28-04:00,high,escalated,"this.syntaxVariables = SyntaxVariablesTemplate;
      for (key in settings) {
        value = settings[key];
        replaceRegex = new RegExp(`\\{\\{${key}\\}\\}`, 'g');
        this.syntaxVariables = this.syntaxVariables.replace(replaceRegex, this.translateColor(value));
      }
      return this.syntaxVariables;",71,,,,CWE-185: Incorrect Regular Expression,http://cwevis.org/browse/185,185,Atom x64/resources/app/apm/lib/text-mate-theme.js,file,74,74,2020-05-18T14:51:42-04:00,Static Analysis,62b4ac8d59bad364f8deb87b576976300bcb97ea662b5091c569fca4448eb465,194935,high,,,CWE-185: Incorrect Regular Expression,http://cwevis.org/browse/185,185,Found non-literal argument to RegExp Constructor,plain-text,Atom x64/resources/app/apm/lib/text-mate-theme.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\text-mate-theme.js,file,61,24,74,74,security,detect-non-literal-regexp,ESLint,ESLINT-SECURITY-detect-non-literal-regexp,Detect non literal regexp,"Detects `RegExp(variable)`, which might allow an attacker to DOS your server with a long-running regular expression.

More information: [Regular Expression DoS and Node.js](https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/regular-expression-dos-and-node.md)",markdown,ESLINT-SECURITY-detect-non-literal-regexp,Detect non literal regexp,"Detects `RegExp(variable)`, which might allow an attacker to DOS your server with a long-running regular expression.

More information: [Regular Expression DoS and Node.js](https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/regular-expression-dos-and-node.md)",markdown,,,escalated,0.81306314,1
1101,Static Analysis,2020-05-18T14:51:00-04:00,89043,2020-05-18T14:54:28-04:00,high,escalated,"var key, replaceRegex, value;
      this.syntaxVariables = SyntaxVariablesTemplate;
      for (key in settings) {
        value = settings[key];
        replaceRegex = new RegExp(`\\{\\{${key}\\}\\}`, 'g');
        this.syntaxVariables = this.syntaxVariables.replace(replaceRegex, this.translateColor(value));
      }",70,Generic Object Injection Sink,admin,2020-05-27T15:05:31-04:00,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/lib/text-mate-theme.js,file,73,73,2020-05-18T14:51:42-04:00,Static Analysis,6569b353992e88510a975ec3412e07f9c2539e0cf8eb813d02c1c97e2a312d82,194932,high,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Generic Object Injection Sink,plain-text,Atom x64/resources/app/apm/lib/text-mate-theme.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\text-mate-theme.js,file,30,17,73,73,security,detect-object-injection,ESLint,ESLINT-SECURITY-detect-object-injection,Detect object injection,"Detects `variable[key]` as a left- or right-hand assignment operand.

More information: [The Dangers of Square Bracket Notation](https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/the-dangers-of-square-bracket-notation.md)",markdown,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.9251437,1
1102,Static Analysis,2020-05-18T14:51:00-04:00,89044,2020-05-18T14:54:28-04:00,high,escalated,"({selector, properties} = ref[i]);
        lines.push(`${selector} {`);
        for (name in properties) {
          value = properties[name];
          lines.push(`  ${name}: ${value};`);
        }
        lines.push(""}\n"");",50,Generic Object Injection Sink,admin,2020-05-27T15:05:02-04:00,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Atom x64/resources/app/apm/lib/text-mate-theme.js,file,53,53,2020-05-18T14:51:42-04:00,Static Analysis,6569b353992e88510a975ec3412e07f9c2539e0cf8eb813d02c1c97e2a312d82,194915,high,,,CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),http://cwevis.org/browse/77,77,Generic Object Injection Sink,plain-text,Atom x64/resources/app/apm/lib/text-mate-theme.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\text-mate-theme.js,file,35,19,53,53,security,detect-object-injection,ESLint,ESLINT-SECURITY-detect-object-injection,Detect object injection,"Detects `variable[key]` as a left- or right-hand assignment operand.

More information: [The Dangers of Square Bracket Notation](https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/the-dangers-of-square-bracket-notation.md)",markdown,rule-5e8e5af630e323f31857c1cc395ce98e2bf222272a7adf06b13a4ba4154b1893,Command Injection,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.



Command injection vulnerabilities typically occur when:

1. Data enters the application from an untrusted source.
2. The data is part of a string that is executed as a command by the application.
3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Command injection is a common problem with wrapper programs.",markdown,,,escalated,0.9251437,1
1103,Static Analysis,2020-05-18T14:51:00-04:00,89048,2020-05-18T14:54:28-04:00,medium,false-positive,"plist = require('@atom/plist');

  ({ScopeSelector} = require('first-mate'));

  module.exports = TextMateTheme = class TextMateTheme {
    constructor(contents) {",5,'require' is not defined,admin,2020-05-30T13:56:09-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/text-mate-theme.js,file,8,8,2020-05-18T14:51:42-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,194901,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/text-mate-theme.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\text-mate-theme.js,file,29,22,8,8,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
1104,Static Analysis,2020-05-18T14:51:00-04:00,89049,2020-05-18T14:54:28-04:00,medium,false-positive,"_ = require('underscore-plus');

  plist = require('@atom/plist');

  ({ScopeSelector} = require('first-mate'));",3,'require' is not defined,admin,2020-05-30T13:55:46-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/text-mate-theme.js,file,6,6,2020-05-18T14:51:42-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,194899,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/lib/text-mate-theme.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\text-mate-theme.js,file,18,11,6,6,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
1105,Static Analysis,2020-05-18T14:51:00-04:00,89050,2020-05-18T14:54:28-04:00,medium,false-positive,"({ScopeSelector} = require('first-mate'));

  module.exports = TextMateTheme = class TextMateTheme {
    constructor(contents) {
      this.contents = contents;
      this.rulesets = [];",7,'module' is not defined,admin,2020-05-30T13:54:41-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/lib/text-mate-theme.js,file,10,10,2020-05-18T14:51:42-04:00,Static Analysis,62173c3357301b64bcb7cb49ad65b9eeb8aa24356212b93fe0fe0166d3218ce7,194902,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'module' is not defined.,plain-text,Atom x64/resources/app/apm/lib/text-mate-theme.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\lib\text-mate-theme.js,file,9,3,10,10,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.068299174,0
1106,Static Analysis,2020-05-18T14:51:00-04:00,89051,2020-05-18T14:54:28-04:00,high,escalated,,,,,,CWE-695: Use of Low-Level Functionality,http://cwevis.org/browse/695,695,Squirrel/PROCESS_BASIC_INFORMATION/(self),logical,,,2020-05-18T14:51:57-04:00,Static Analysis,3ac9036736202c636e5a647bb8073bf5337a353e654d9216f8af1cf9293e2f3b,200966,high,,,CWE-695: Use of Low-Level Functionality,http://cwevis.org/browse/695,695,The type uses System.IntPtr or System.UIntPtr instead of System.Runtime.InteropServices.SafeHandle. Consider changing the code to use SafeHandle.,plain-text,Squirrel/PROCESS_BASIC_INFORMATION/(self),Squirrel/PROCESS_BASIC_INFORMATION/(self),logical,,,,,,PreferSafeHandleRule,Gendarme,GEND-PreferSafeHandleRule,Prefer Safe Handle ,"In general it is best to interop with native code using
**System.Runtime.InteropServices.SafeHandle** instead of
**System.IntPtr** or **System.UIntPtr** because:

SafeHandles are type safe.
SafeHandles are guaranteed to be disposed of during exceptional
conditions like a thread aborting unexpectedly or a stack overflow.
SafeHandles are not vulnerable to reycle attacks.
You don't need to write a finalizer which can be tricky to do because
they execute within their own thread, may execute on partially
constructed objects, and normally tear down the application if you allow
an exception to escape from them.


 **Bad** example:


```csharp
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable.
public sealed class Database {
    ~Database ()
    {
        // This will execute even if the ctor throws so it is important to check
        // to see if the fields are initialized.
        if (m_database != IntPtr.Zero) {
            NativeMethods.sqlite3_close (m_database);
        }
    }

    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        int err = NativeMethods.sqlite3_open_v2 (path, out m_database, flags, IntPtr.Zero);
        // handle errors
    }

    // exec and query methods would go here

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (IntPtr db);

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private IntPtr m_database;
}
```
**Good** example:


```csharp
using System.Runtime.ConstrainedExecution;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable, but you do not need to implement a finalizer because
// SafeHandle will take care of the cleanup.
internal sealed class Database {
    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        m_database = new SqlitePtr (path, flags);
    }

    // exec and query methods would go here

    // This corresponds to a native sqlite3*.
    [SecurityPermission (SecurityAction.InheritanceDemand, UnmanagedCode = true)]
    [SecurityPermission (SecurityAction.Demand, UnmanagedCode = true)]
    private sealed class SqlitePtr : SafeHandle {
        public SqlitePtr (string path, NativeMethods.OpenFlags flags) : base (IntPtr.Zero, true)
        {
            int err = NativeMethods.sqlite3_open_v2 (path, out handle, flags, IntPtr.Zero);
            // handle errors
        }

        public override bool IsInvalid {
            get {
                return (handle == IntPtr.Zero);
            }
        }

        // This will not be called if the handle is invalid. Note that this method should not throw.
        [ReliabilityContract (Consistency.WillNotCorruptState, Cer.MayFail)]
        protected override bool ReleaseHandle ()
        {
            NativeMethods.sqlite3_close (this);
            return true;
        }
    }

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (SqlitePtr db);

        // Open must take an IntPtr but all other methods take a type safe SqlitePtr.
        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private SqlitePtr m_database;
}
```",markdown,GEND-PreferSafeHandleRule,Prefer Safe Handle ,"In general it is best to interop with native code using
**System.Runtime.InteropServices.SafeHandle** instead of
**System.IntPtr** or **System.UIntPtr** because:

SafeHandles are type safe.
SafeHandles are guaranteed to be disposed of during exceptional
conditions like a thread aborting unexpectedly or a stack overflow.
SafeHandles are not vulnerable to reycle attacks.
You don't need to write a finalizer which can be tricky to do because
they execute within their own thread, may execute on partially
constructed objects, and normally tear down the application if you allow
an exception to escape from them.


 **Bad** example:


```csharp
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable.
public sealed class Database {
    ~Database ()
    {
        // This will execute even if the ctor throws so it is important to check
        // to see if the fields are initialized.
        if (m_database != IntPtr.Zero) {
            NativeMethods.sqlite3_close (m_database);
        }
    }

    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        int err = NativeMethods.sqlite3_open_v2 (path, out m_database, flags, IntPtr.Zero);
        // handle errors
    }

    // exec and query methods would go here

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (IntPtr db);

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private IntPtr m_database;
}
```
**Good** example:


```csharp
using System.Runtime.ConstrainedExecution;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

// If cleaning up the native resource in a timely manner is important you can
// implement IDisposable, but you do not need to implement a finalizer because
// SafeHandle will take care of the cleanup.
internal sealed class Database {
    public Database (string path)
    {
        NativeMethods.OpenFlags flags = NativeMethods.OpenFlags.READWRITE | NativeMethods.OpenFlags.CREATE;
        m_database = new SqlitePtr (path, flags);
    }

    // exec and query methods would go here

    // This corresponds to a native sqlite3*.
    [SecurityPermission (SecurityAction.InheritanceDemand, UnmanagedCode = true)]
    [SecurityPermission (SecurityAction.Demand, UnmanagedCode = true)]
    private sealed class SqlitePtr : SafeHandle {
        public SqlitePtr (string path, NativeMethods.OpenFlags flags) : base (IntPtr.Zero, true)
        {
            int err = NativeMethods.sqlite3_open_v2 (path, out handle, flags, IntPtr.Zero);
            // handle errors
        }

        public override bool IsInvalid {
            get {
                return (handle == IntPtr.Zero);
            }
        }

        // This will not be called if the handle is invalid. Note that this method should not throw.
        [ReliabilityContract (Consistency.WillNotCorruptState, Cer.MayFail)]
        protected override bool ReleaseHandle ()
        {
            NativeMethods.sqlite3_close (this);
            return true;
        }
    }

    [SuppressUnmanagedCodeSecurity]
    private static class NativeMethods {
        [Flags]
        public enum OpenFlags : int {
            READONLY = 0x00000001,
            READWRITE = 0x00000002,
            CREATE = 0x00000004,
            // ...
        }

        [DllImport (""sqlite3"")]
        public static extern int sqlite3_close (SqlitePtr db);

        // Open must take an IntPtr but all other methods take a type safe SqlitePtr.
        [DllImport (""sqlite3"")]
        public static extern int sqlite3_open_v2 (string fileName, out IntPtr db, OpenFlags flags, IntPtr module);
    }

    private SqlitePtr m_database;
}
```",markdown,,,escalated,0.8318374,1
1107,Static Analysis,2020-05-18T14:51:00-04:00,89253,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-557: Concurrency Issues,http://cwevis.org/browse/557,557,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/Platform/SilentWindowsFormsAuthenticationDialog/SignalDone,logical,,,2020-05-18T14:51:59-04:00,Static Analysis,f5725700a3b7c8e426789d4f67f00f142da905072ec6a5918c7f97db0e9c6980,202200,medium,,,CWE-367: Time-of-check Time-of-use (TOCTOU) Race Condition,http://cwevis.org/browse/367,367,The use of the event does not seems protected properly against NullReferenceException and/or race conditions. Fix the event use to make sure it won't be null or susceptible to a race condition. Possible race condition since field 'Done' is accessed directly.,plain-text,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/Platform/SilentWindowsFormsAuthenticationDialog/SignalDone,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/Platform/SilentWindowsFormsAuthenticationDialog/SignalDone,logical,,,,,,ProtectCallToEventDelegatesRule,Gendarme,GEND-ProtectCallToEventDelegatesRule,Protect Call To Event Delegates ,"This rule checks that event invocations are safely implemented. In
particular, the event must be copied into a local to avoid race
conditions and it must be checked for null before it is used (events
will normally be null until a delegate is added to them).

**Bad** example (no check):


```csharp
public event EventHandler Loading;

protected void OnLoading (EventArgs e)
{
    // Loading field could be null, throwing a NullReferenceException
    Loading (this, e);
}
```
**Bad** example (race condition):


```csharp
public event EventHandler Loading;

protected void OnLoading (EventArgs e)
{
    // Loading could be non-null here
    if (Loading != null) {
        // but be null once we get here :(
        Loading (this, e);
    }
}
```
**Good** example:


```csharp
public event EventHandler Loading;
protected void OnLoading (EventArgs e)
{
    EventHandler handler = Loading;
    // handler is either null or non-null
    if (handler != null) {
        // and won't change (i.e. safe from a NullReferenceException)
        handler (this, e);
        // however it is still possible, like the original code, that
        // the Loading method will be removed before, or during its
        // execution. Your code should be safe against such occurance.
    }
}
```",markdown,rule-d1b92de2d2079261b3abb4d275473f8ffefb9c723f42c8c56f72d385fb3abc7c,Concurrency,,,,,escalated,0.8059486,1
1108,Static Analysis,2020-05-18T14:51:00-04:00,89321,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Common/Rar/RarCryptoWrapper/ReadAndDecrypt,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201196,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Common/Rar/RarCryptoWrapper/ReadAndDecrypt,SharpCompress/Common/Rar/RarCryptoWrapper/ReadAndDecrypt,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
1109,Static Analysis,2020-05-18T14:51:00-04:00,89347,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/Web/XmlTransform/XmlFileInfoDocument/Load,logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.98149246,1
1110,Static Analysis,2020-05-18T14:51:00-04:00,89359,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,SharpCompress/Common/Rar/RarCryptoBinaryReader/ClearQueue,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201193,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,SharpCompress/Common/Rar/RarCryptoBinaryReader/ClearQueue,SharpCompress/Common/Rar/RarCryptoBinaryReader/ClearQueue,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
1111,Static Analysis,2020-05-18T14:51:00-04:00,89472,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Mono/Cecil/EmbeddedResource/GetResourceData,logical,,,2020-05-18T14:51:56-04:00,Static Analysis,0038154dc66022b9fff47a29da571c2d0b91e196ecb5f5658e5cec5d908f0001,200230,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,This disposable local is not guaranteed to be disposed of before the method returns. Use a 'using' statement or surround the local's usage with a try/finally block. Local of type 'MemoryStream' is not disposed of (at least not locally).,plain-text,Mono/Cecil/EmbeddedResource/GetResourceData,Mono/Cecil/EmbeddedResource/GetResourceData,logical,,,,,,EnsureLocalDisposalRule,Gendarme,GEND-EnsureLocalDisposalRule,Ensure Local Disposal ,"This rule checks that disposable locals are always disposed of before
the method returns. Use a 'using' statement (or a try/finally block) to
guarantee local disposal even in the event an unhandled exception
occurs.

**Bad** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    DecodeHeader (stream);
    if (!DecodedHeader.HasContent) {
        return;
    }
    DecodeContent (stream);
    stream.Dispose ();
}
```
**Good** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        DecodeHeader (stream);
        if (!DecodedHeader.HasContent) {
            return;
        }
        DecodeContent (stream);
    }
}
```
**Bad** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    Decode (stream);
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
    stream.Dispose ();
}
```
**Good** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        Decode (stream);
    }
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.98154014,1
1112,Static Analysis,2020-05-18T14:51:00-04:00,89520,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/Web/XmlTransform/XmlAttributePreservingWriter/WriteCharEntity,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201215,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Microsoft/Web/XmlTransform/XmlAttributePreservingWriter/WriteCharEntity,Microsoft/Web/XmlTransform/XmlAttributePreservingWriter/WriteCharEntity,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
1113,Static Analysis,2020-05-18T14:51:00-04:00,89545,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Squirrel/ReleasePackage/CreateReleasePackage,logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.98149246,1
1114,Static Analysis,2020-05-18T14:51:00-04:00,89546,2020-05-18T14:54:28-04:00,medium,false-positive,"var filename = path.join(__dirname, '..', 'bin', process.platform === 'win32' ? 'node.exe' : 'node');

  var downloadFile = function() {
    if (process.platform === 'win32') {
      downloadFileToLocation(""https://nodejs.org/dist/"" + version + ""/win-"" + arch + ""/node.exe"", filename, done);
    } else {
      var next = copyNodeBinToLocation.bind(this, done, version, filename);",72,'process' is not defined,admin,2020-05-30T13:53:55-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/script/download-node.js,file,75,75,2020-05-18T14:51:45-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,196486,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/script/download-node.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\script\download-node.js,file,16,9,75,75,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
1115,Static Analysis,2020-05-18T14:51:00-04:00,89547,2020-05-18T14:54:28-04:00,medium,false-positive,"var copyNodeBinToLocation = function(callback, version, targetFilename, fromDirectory) {
  var arch = identifyArch();
  var subDir = ""node-"" + version + ""-"" + process.platform + ""-"" + arch;
  var downloadedNodePath = path.join(fromDirectory, subDir, 'bin', 'node');
  return mv(downloadedNodePath, targetFilename, {mkdirp: true}, function(err) {
    if (err) {",54,'process' is not defined,admin,2020-05-30T13:30:42-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/script/download-node.js,file,57,57,2020-05-18T14:51:45-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,196466,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/script/download-node.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\script\download-node.js,file,49,42,57,57,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
1116,Static Analysis,2020-05-18T14:51:00-04:00,89548,2020-05-18T14:54:28-04:00,medium,false-positive,"}
};

var versionToInstall = fs.readFileSync(path.resolve(__dirname, '..', 'BUNDLED_NODE_VERSION'), 'utf8').trim()
downloadNode(versionToInstall, function(error) {
  if (error != null) {
    console.error('Failed to download node', error);",95,'__dirname' is not defined,admin,2020-05-30T13:29:37-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/script/download-node.js,file,98,98,2020-05-18T14:51:45-04:00,Static Analysis,9ced861d153ab418069da667a5c9f5fefe90861e103a53df87d410e5550ee1e7,196498,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'__dirname' is not defined.,plain-text,Atom x64/resources/app/apm/script/download-node.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\script\download-node.js,file,62,53,98,98,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.09524149,0
1117,Static Analysis,2020-05-18T14:51:00-04:00,89549,2020-05-18T14:54:28-04:00,medium,false-positive,"downloadNode(versionToInstall, function(error) {
  if (error != null) {
    console.error('Failed to download node', error);
    return process.exit(1);
  } else {
    return process.exit(0);
  }",99,'process' is not defined,admin,2020-05-30T13:28:43-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/script/download-node.js,file,102,102,2020-05-18T14:51:45-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,196502,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/script/download-node.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\script\download-node.js,file,19,12,102,102,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
1118,Static Analysis,2020-05-18T14:51:00-04:00,89552,2020-05-18T14:54:28-04:00,high,escalated,"return;
    }

    fs.chmodSync(targetFilename, ""755"");
    callback()
  });
};",62,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/script/download-node.js,file,65,65,2020-05-18T14:51:45-04:00,Static Analysis,e06730892bbeaf95acace8381368481ec3cb7e852b61bd4908bb656cdf952845,196478,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Found fs.chmodSync with non literal argument at index 0,plain-text,Atom x64/resources/app/apm/script/download-node.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\script\download-node.js,file,17,5,65,65,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.97060037,1
1119,Static Analysis,2020-05-18T14:51:00-04:00,89553,2020-05-18T14:54:28-04:00,medium,false-positive,"requestStream.on('response', function(response) {
    if (response.statusCode == 404) {
      console.error('download not found:', url);
      process.exit(1);
    }
    requestStream.pipe(stream);
  });",27,'process' is not defined,admin,2020-05-30T13:28:26-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/script/download-node.js,file,30,30,2020-05-18T14:51:45-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,196410,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/script/download-node.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\script\download-node.js,file,14,7,30,30,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474263,0
1120,Static Analysis,2020-05-18T14:51:00-04:00,89555,2020-05-18T14:54:28-04:00,high,escalated,"}
  }

  if (fs.existsSync(filename)) {
    getInstallNodeVersion(filename, function(error, installedVersion, installedArch) {
      if (error != null) {
        done(error);",80,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/script/download-node.js,file,83,83,2020-05-18T14:51:45-04:00,Static Analysis,a8eb318301dc105f6b242fce363923637060c403e8c9c7b93b984891497b7744,196495,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Found fs.existsSync with non literal argument at index 0,plain-text,Atom x64/resources/app/apm/script/download-node.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\script\download-node.js,file,20,7,83,83,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.96763015,1
1121,Static Analysis,2020-05-18T14:51:00-04:00,89556,2020-05-18T14:54:28-04:00,high,escalated,"};

var downloadFileToLocation = function(url, filename, callback) {
  var stream = fs.createWriteStream(filename);
  stream.on('end', callback);
  stream.on('error', callback);
  var requestStream = request.get(url)",20,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/script/download-node.js,file,23,23,2020-05-18T14:51:45-04:00,Static Analysis,d9cf6f7c83f7d8c927a01996e900236a91d00c044500a53fc4d0b868aa1a5fc4,196387,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Found fs.createWriteStream with non literal argument at index 0,plain-text,Atom x64/resources/app/apm/script/download-node.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\script\download-node.js,file,36,16,23,23,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.9677666,1
1122,Static Analysis,2020-05-18T14:51:00-04:00,89557,2020-05-18T14:54:28-04:00,medium,false-positive,"switch (process.arch) {
    case ""ia32"":  return ""x86"";
    case ""arm"":   return ""armv"" + process.config.variables.arm_version + ""l"";
    default:      return process.arch;
  }
};",15,'process' is not defined,admin,2020-05-30T13:28:14-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/script/download-node.js,file,18,18,2020-05-18T14:51:45-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,196376,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/script/download-node.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\script\download-node.js,file,33,26,18,18,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
1123,Static Analysis,2020-05-18T14:51:00-04:00,89558,2020-05-18T14:54:28-04:00,medium,false-positive,"downloadFileToLocation(""https://nodejs.org/dist/"" + version + ""/win-"" + arch + ""/node.exe"", filename, done);
    } else {
      var next = copyNodeBinToLocation.bind(this, done, version, filename);
      downloadTarballAndExtract(""https://nodejs.org/dist/"" + version + ""/node-"" + version + ""-"" + process.platform + ""-"" + arch + "".tar.gz"", filename, next);
    }
  }",76,'process' is not defined,admin,2020-05-30T13:27:45-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/script/download-node.js,file,79,79,2020-05-18T14:51:45-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,196492,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/script/download-node.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\script\download-node.js,file,106,99,79,79,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
1124,Static Analysis,2020-05-18T14:51:00-04:00,89559,2020-05-18T14:54:28-04:00,medium,false-positive,"var fs = require('fs');
var mv = require('mv');
var zlib = require('zlib');
var path = require('path');

var tar = require('tar');
var temp = require('temp');",1,'require' is not defined,admin,2020-05-30T13:27:25-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/script/download-node.js,file,4,4,2020-05-18T14:51:45-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,196359,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/script/download-node.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\script\download-node.js,file,19,12,4,4,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
1125,Static Analysis,2020-05-18T14:51:00-04:00,89560,2020-05-18T14:54:28-04:00,medium,false-positive,"temp.track();

var identifyArch = function() {
  switch (process.arch) {
    case ""ia32"":  return ""x86"";
    case ""arm"":   return ""armv"" + process.config.variables.arm_version + ""l"";
    default:      return process.arch;",12,'process' is not defined,admin,2020-05-30T13:26:29-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/script/download-node.js,file,15,15,2020-05-18T14:51:45-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,196369,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/script/download-node.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\script\download-node.js,file,18,11,15,15,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
1126,Static Analysis,2020-05-18T14:51:00-04:00,89561,2020-05-18T14:54:28-04:00,medium,false-positive,"console.error('Failed to download node', error);
    return process.exit(1);
  } else {
    return process.exit(0);
  }
});",101,'process' is not defined,admin,2020-05-30T13:26:03-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/script/download-node.js,file,104,104,2020-05-18T14:51:45-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,196503,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/script/download-node.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\script\download-node.js,file,19,12,104,104,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
1127,Static Analysis,2020-05-18T14:51:00-04:00,89562,2020-05-18T14:54:28-04:00,medium,false-positive,"var fs = require('fs');
var mv = require('mv');
var zlib = require('zlib');
var path = require('path');",1,'require' is not defined,admin,2020-05-30T13:25:36-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/script/download-node.js,file,2,2,2020-05-18T14:51:45-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,196356,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/script/download-node.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\script\download-node.js,file,17,10,2,2,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
1128,Static Analysis,2020-05-18T14:51:00-04:00,89563,2020-05-18T14:54:28-04:00,medium,false-positive,"var zlib = require('zlib');
var path = require('path');

var tar = require('tar');
var temp = require('temp');

var request = require('request');",3,'require' is not defined,admin,2020-05-30T13:25:17-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/script/download-node.js,file,6,6,2020-05-18T14:51:45-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,196360,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/script/download-node.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\script\download-node.js,file,18,11,6,6,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
1129,Static Analysis,2020-05-18T14:51:00-04:00,89564,2020-05-18T14:54:28-04:00,medium,false-positive,"var fs = require('fs');
var mv = require('mv');
var zlib = require('zlib');
var path = require('path');

var tar = require('tar');",1,'require' is not defined,admin,2020-05-30T13:24:58-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/script/download-node.js,file,3,3,2020-05-18T14:51:45-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,196358,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/script/download-node.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\script\download-node.js,file,19,12,3,3,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
1130,Static Analysis,2020-05-18T14:51:00-04:00,89565,2020-05-18T14:54:28-04:00,medium,false-positive,"requestStream.on('response', function(response) {
    if (response.statusCode == 404) {
      console.error('download not found:', url);
      process.exit(1);
    }
    requestStream.pipe(zlib.createGunzip()).pipe(stream);
  });",46,'process' is not defined,admin,2020-05-30T13:23:45-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/script/download-node.js,file,49,49,2020-05-18T14:51:45-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,196449,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/script/download-node.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\script\download-node.js,file,14,7,49,49,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
1131,Static Analysis,2020-05-18T14:51:00-04:00,89566,2020-05-18T14:54:28-04:00,medium,false-positive,"var path = require('path');

var tar = require('tar');
var temp = require('temp');

var request = require('request');
var getInstallNodeVersion = require('./bundled-node-version')",4,'require' is not defined,admin,2020-05-30T13:23:27-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/script/download-node.js,file,7,7,2020-05-18T14:51:45-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,196361,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/script/download-node.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\script\download-node.js,file,19,12,7,7,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
1132,Static Analysis,2020-05-18T14:51:00-04:00,89567,2020-05-18T14:54:28-04:00,medium,false-positive,"var temp = require('temp');

var request = require('request');
var getInstallNodeVersion = require('./bundled-node-version')

temp.track();",7,'require' is not defined,admin,2020-05-30T13:22:53-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/script/download-node.js,file,10,10,2020-05-18T14:51:45-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,196365,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/script/download-node.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\script\download-node.js,file,36,29,10,10,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
1133,Static Analysis,2020-05-18T14:51:00-04:00,89568,2020-05-18T14:54:28-04:00,medium,false-positive,"var identifyArch = function() {
  switch (process.arch) {
    case ""ia32"":  return ""x86"";
    case ""arm"":   return ""armv"" + process.config.variables.arm_version + ""l"";
    default:      return process.arch;
  }
};",14,'process' is not defined,admin,2020-05-30T13:22:29-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/script/download-node.js,file,17,17,2020-05-18T14:51:45-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,196374,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/script/download-node.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\script\download-node.js,file,42,35,17,17,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
1134,Static Analysis,2020-05-18T14:51:00-04:00,89569,2020-05-18T14:54:28-04:00,medium,false-positive,"var tar = require('tar');
var temp = require('temp');

var request = require('request');
var getInstallNodeVersion = require('./bundled-node-version')

temp.track();",6,'require' is not defined,admin,2020-05-30T13:22:00-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/script/download-node.js,file,9,9,2020-05-18T14:51:45-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,196363,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/script/download-node.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\script\download-node.js,file,22,15,9,9,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
1135,Static Analysis,2020-05-18T14:51:00-04:00,89570,2020-05-18T14:54:28-04:00,medium,false-positive,"var downloadNode = function(version, done) {
  var arch = identifyArch();
  var filename = path.join(__dirname, '..', 'bin', process.platform === 'win32' ? 'node.exe' : 'node');

  var downloadFile = function() {
    if (process.platform === 'win32') {",69,'process' is not defined,admin,2020-05-30T13:21:39-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/script/download-node.js,file,72,72,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.17391245,0
1136,Static Analysis,2020-05-18T14:51:00-04:00,89571,2020-05-18T14:54:28-04:00,high,escalated,"}
};

var versionToInstall = fs.readFileSync(path.resolve(__dirname, '..', 'BUNDLED_NODE_VERSION'), 'utf8').trim()
downloadNode(versionToInstall, function(error) {
  if (error != null) {
    console.error('Failed to download node', error);",95,,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Atom x64/resources/app/apm/script/download-node.js,file,98,98,2020-05-18T14:51:45-04:00,Static Analysis,374ad040fff48d9edaa97052bf28a674b1f4e79af66a0448f1ab1699003790cd,196497,high,,,CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),http://cwevis.org/browse/22,22,Found fs.readFileSync with non literal argument at index 0,plain-text,Atom x64/resources/app/apm/script/download-node.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\script\download-node.js,file,39,24,98,98,security,detect-non-literal-fs-filename,ESLint,ESLINT-SECURITY-detect-non-literal-fs-filename,Detect non literal fs filename,"Detects variable in filename argument of `fs` calls, which might allow an attacker to access anything on your system.

More information: https://www.owasp.org/index.php/Path_Traversal",markdown,rule-48889f368c09a1c977445b9e5aed72f03394e07276cc7d178420e094592c07ce,Path Traversal,"Web applications occasionally use parameter values to store the location of a file which will later be required by the server.

An example of this is often seen in error pages, where the actual file path for the error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.

A path traversal occurs when the parameter value (ie. path to file being called by the server) can be substituted with the relative path of another resource which
is located outside of the applications working directory. The server then loads the resource and includes its contents in the response to the client.

Cyber-criminals will abuse this vulnerability to view files that should otherwise not be accessible.

A very common example of this, on *nix servers, is gaining access to the `/etc/passwd`file in order to retrieve a list of server users. This attack would look like:
`yoursite.com/error.php?page=../../../../etc/passwd`

As path traversal is based on the relative path, the payload must first traverse to the file system's root directory, hence the string of `../../../../`.

**Guidance**

It is recommended that untrusted data is never used to form a file location to be included.

To validate data, the application should ensure that the supplied value for a file is permitted. This can be achieved by performing whitelisting on the parameter
value, by matching it against a list of permitted files. If the supplied value does not match any value in the whitelist, then the server should redirect to a
standard error page.

In some scenarios, where dynamic content is being requested, it may not be possible to perform validation against a list of trusted resources, therefore the list must
also become dynamic (updated as the files change), or perform filtering to remove extraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.

It is also advised that sensitive files are not stored within the web root and that the user permissions enforced by the directory are correct.

**References**

- [WASC](http://projects.webappsec.org/Path-Traversal)
- [OWASP](https://www.owasp.org/index.php/Path_Traversal)",markdown,,,escalated,0.9758102,1
1137,Static Analysis,2020-05-18T14:51:00-04:00,89572,2020-05-18T14:54:28-04:00,medium,false-positive,"getInstallNodeVersion(filename, function(error, installedVersion, installedArch) {
      if (error != null) {
        done(error);
      } else if (installedVersion !== version || installedArch !== process.arch) {
        downloadFile();
      } else {
        done();",84,'process' is not defined,admin,2020-05-30T13:21:15-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/script/download-node.js,file,87,87,2020-05-18T14:51:45-04:00,Static Analysis,6271d3d6ae2537618d360fcc8c98c9e3717e80ce318a0d361d2329654154d925,196496,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'process' is not defined.,plain-text,Atom x64/resources/app/apm/script/download-node.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\script\download-node.js,file,75,68,87,87,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.055474237,0
1138,Static Analysis,2020-05-18T14:51:00-04:00,89573,2020-05-18T14:54:28-04:00,medium,false-positive,"var fs = require('fs');
var mv = require('mv');
var zlib = require('zlib');
var path = require('path');",1,'require' is not defined,admin,2020-05-30T13:20:51-04:00,CWE-665: Improper Initialization,http://cwevis.org/browse/665,665,Atom x64/resources/app/apm/script/download-node.js,file,1,1,2020-05-18T14:51:45-04:00,Static Analysis,bd14e21bfff1754a27286f13ad1eb7e7dd92ce5a98a9654e6a00e776e6060541,196355,medium,,,CWE-457: Use of Uninitialized Variable,http://cwevis.org/browse/457,457,'require' is not defined.,plain-text,Atom x64/resources/app/apm/script/download-node.js,C:\ProgramData\Code Dx\codedx_appdata\temp-files\store8838356813798345838_atom-x64-windows-390648966\Atom x64\resources\app\apm\script\download-node.js,file,17,10,1,1,,no-undef,ESLint,ESLINT-no-undef,Disallow undeclared variables,"This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).

## Rule Details

Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).

Examples of **incorrect** code for this rule:

```js
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Examples of **correct** code for this rule with `global` declaration:

```js
/*global someFunction, a*/
/*eslint no-undef: ""error""*/

var foo = someFunction();
var bar = a + 1;
```

Note that this rule does not disallow assignments to read-only global variables.
See [no-global-assign](https://eslint.org/docs/rules/no-global-assign) if you also want to disallow those assignments.

This rule also does not disallow redeclarations of global variables.
See [no-redeclare](https://eslint.org/docs/rules/no-redeclare) if you also want to disallow those redeclarations.

## Environments

For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](https://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.

### browser

Examples of **correct** code for this rule with `browser` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env browser*/

setTimeout(function() {
    alert(""Hello"");
});
```

### Node.js

Examples of **correct** code for this rule with `node` environment:

```js
/*eslint no-undef: ""error""*/
/*eslint-env node*/

var fs = require(""fs"");
module.exports = function() {
    console.log(fs);
};
```

## When Not To Use It

If explicit declaration of global variables is not to your taste.

## Compatibility

This rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).

## Related Rules

* [no-global-assign](https://eslint.org/docs/rules/no-global-assign)
* [no-redeclare](https://eslint.org/docs/rules/no-redeclare)

## Resources

* [Rule source](https://github.com/eslint/eslint/tree/master/lib/rules/no-undef.js)
* [Documentation source](https://github.com/eslint/eslint/tree/master/docs/rules/no-undef.md)",markdown,rule-05fd548cb946f6aefd3831fe4f1fd046e1827757e07f877f3a087b0ed98a03bf,Initialization,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.

This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",markdown,,,False,0.051270783,0
1139,Static Analysis,2020-05-18T14:51:00-04:00,89578,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-227: 7PK - API Abuse,http://cwevis.org/browse/227,227,Mono/Cecil/AssemblyResolutionException/(self),logical,,,2020-05-18T14:51:56-04:00,Static Analysis,fce232a5b4bac794dbecd71cb13108c24f47cd5b80a47b79890f33963df64c17,200336,medium,,,CWE-573: Improper Following of Specification by Caller,http://cwevis.org/browse/573,573,"Although you are implementing the ISerializable interface, there are some fields that aren't going to be serialized and aren't marked with the [NonSerialized] attribute. Either add the [NonSerialized] attribute to the field or serialize it. This will help developers better understand your code and make errors easier to find.",plain-text,Mono/Cecil/AssemblyResolutionException/(self),Mono/Cecil/AssemblyResolutionException/(self),logical,,,,,,ImplementISerializableCorrectlyRule,Gendarme,GEND-ImplementISerializableCorrectlyRule,Implement ISerializable Correctly ,"This rule checks for types that implement **ISerializable**. Such types
serialize their data by implementing **GetObjectData**. This rule
verifies that every instance field, not decorated with the
**[NonSerialized]**attribute is serialized by the **GetObjectData**
method. This rule will also warn if the type is unsealed and the
**GetObjectData** is not **virtual**.

**Bad** example:


```csharp
[Serializable]
public class Bad : ISerializable {
    int foo;
    string bar;

    protected Bad (SerializationInfo info, StreamingContext context)
    {
        foo = info.GetInt32 (""foo"");
    }

    // extensibility is limited since GetObjectData is not virtual:
    // any type inheriting won't be able to serialized additional fields
    public void GetObjectData (SerializationInfo info, StreamingContext context)
    {
        info.AddValue (""foo"", foo);
        // 'bar' is not serialized, if not needed then the field should
        // be decorated with [NotSerialized]
    }
}
```
**Good** example (virtual and not serialized):


```csharp
[Serializable]
public class Good : ISerializable {
    int foo;
    [NotSerialized]
    string bar;

    protected Good (SerializationInfo info, StreamingContext context)
    {
        foo = info.GetInt32 (""foo"");
    }

    public virtual void GetObjectData (SerializationInfo info, StreamingContext context)
    {
        info.AddValue (""foo"", foo);
    }
}
```
**Good** example (sealed type and serialized):


```csharp
[Serializable]
public sealed class Good : ISerializable {
    int foo;
    string bar;

    protected Good (SerializationInfo info, StreamingContext context)
    {
        foo = info.GetInt32 (""foo"");
    }

    public void GetObjectData (SerializationInfo info, StreamingContext context)
    {
        info.AddValue (""foo"", foo);
        info.AddValue (""bar"", bar);
    }
}
```",markdown,rule-dc56fd6c6aaaf7aef3e91a691e1f8bd8f7311763a2d3286fce16c6c5cf52b5e2,API Abuse,"The software uses an API in a manner contrary to its intended use.

An API is a contract between a caller and a callee. The most common forms of API misuse occurs when the caller does not honor its end of this contract. For example, if a program does not call chdir() after calling chroot(), it violates the contract that specifies how to change the active root directory in a secure fashion. Another good example of library abuse is expecting the callee to return trustworthy DNS information to the caller. In this case, the caller misuses the callee API by making certain assumptions about its behavior (that the return value can be used for authentication purposes). One can also violate the caller-callee contract from the other side. For example, if a coder subclasses SecureRandom and returns a non-random value, the contract is violated.",markdown,,,escalated,0.9353106,1
1140,Static Analysis,2020-05-18T14:51:00-04:00,89585,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Squirrel/Bsdiff/WrappingStream/WriteByte,logical,,,2020-05-18T14:51:58-04:00,Static Analysis,4da686da14c4bac9a6b945071ad415a27ad7c0febb93e1c5e54ed29c072d9316,201285,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,A method of an IDisposable type does not throw System.ObjectDisposedException. Throw ObjectDisposedException if the object has been disposed.,plain-text,Squirrel/Bsdiff/WrappingStream/WriteByte,Squirrel/Bsdiff/WrappingStream/WriteByte,logical,,,,,,UseObjectDisposedExceptionRule,Gendarme,GEND-UseObjectDisposedExceptionRule,Use Object Disposed Exception ,"It's usually a very bad idea to attempt to use an object after it has
been disposed. Doing so may lead to crashes in native code or any number
of other problems. In order to prevent this, and to report the problem
in a clear way, classes should throw System.ObjectDisposedException from
public methods if the object has been disposed. Note that there are some
methods which should not throw ObjectDisposedException. This includes
constructors, finalizers, Equals, GetHashCode, ToString, and Dispose.

**Bad** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // Objects are generally not in a useable state after being disposed so
    // their public methods should throw ObjectDisposedException.
    public void Write (string message)
    {
        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```
**Good** example:


```csharp
internal sealed class WriteStuff : IDisposable
{
    public WriteStuff (TextWriter writer)
    {
        this.writer = writer;
    }

    // In general all public methods should throw ObjectDisposedException
    // if Dispose has been called.
    public void Write (string message)
    {
        if (disposed) {
            throw new ObjectDisposedException (GetType ().Name);
        }

        writer.Write (message);
    }

    public void Dispose ()
    {
        if (!disposed) {
            writer.Dispose ();
            disposed = true;
        }
    }

    private bool disposed;
    private TextWriter writer;
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.97011214,1
1141,Static Analysis,2020-05-18T14:51:00-04:00,89618,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,NuGet/OptimizedZipPackage/EnsurePackageFiles,logical,,,2020-05-18T14:51:56-04:00,Static Analysis,7fd5ac540fc6141f822ec4930c13a54b311e1f77922ca173e0ea499c3967223c,200217,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,This disposable local is not guaranteed to be disposed of before the method returns. Use a 'using' statement or surround the local's usage with a try/finally block. Local of type 'Package' is not disposed of (is this a fluent-like API ?).,plain-text,NuGet/OptimizedZipPackage/EnsurePackageFiles,NuGet/OptimizedZipPackage/EnsurePackageFiles,logical,,,,,,EnsureLocalDisposalRule,Gendarme,GEND-EnsureLocalDisposalRule,Ensure Local Disposal ,"This rule checks that disposable locals are always disposed of before
the method returns. Use a 'using' statement (or a try/finally block) to
guarantee local disposal even in the event an unhandled exception
occurs.

**Bad** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    DecodeHeader (stream);
    if (!DecodedHeader.HasContent) {
        return;
    }
    DecodeContent (stream);
    stream.Dispose ();
}
```
**Good** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        DecodeHeader (stream);
        if (!DecodedHeader.HasContent) {
            return;
        }
        DecodeContent (stream);
    }
}
```
**Bad** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    Decode (stream);
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
    stream.Dispose ();
}
```
**Good** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        Decode (stream);
    }
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.9818587,1
1142,Static Analysis,2020-05-18T14:51:00-04:00,89747,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-399: Resource Management Errors,http://cwevis.org/browse/399,399,Microsoft/Alm/Cli/Installer/RemoveElevated,logical,,,2020-05-18T14:52:14-04:00,Static Analysis,f6e7a27beb47b13d9eb4ba4a378ee22d05730082073a972429fe831f72cb6c95,202956,medium,,,CWE-404: Improper Resource Shutdown or Release,http://cwevis.org/browse/404,404,This disposable local is not guaranteed to be disposed of before the method returns. Use a 'using' statement or surround the local's usage with a try/finally block. Local of type 'Process' is not disposed of (at least not locally).,plain-text,Microsoft/Alm/Cli/Installer/RemoveElevated,Microsoft/Alm/Cli/Installer/RemoveElevated,logical,,,,,,EnsureLocalDisposalRule,Gendarme,GEND-EnsureLocalDisposalRule,Ensure Local Disposal ,"This rule checks that disposable locals are always disposed of before
the method returns. Use a 'using' statement (or a try/finally block) to
guarantee local disposal even in the event an unhandled exception
occurs.

**Bad** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    DecodeHeader (stream);
    if (!DecodedHeader.HasContent) {
        return;
    }
    DecodeContent (stream);
    stream.Dispose ();
}
```
**Good** example (non-guaranteed disposal):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        DecodeHeader (stream);
        if (!DecodedHeader.HasContent) {
            return;
        }
        DecodeContent (stream);
    }
}
```
**Bad** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    var stream = new StreamReader (file);
    Decode (stream);
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
    stream.Dispose ();
}
```
**Good** example (not disposed of / not locally disposed of):


```csharp
void DecodeFile (string file)
{
    using (var stream = new StreamReader (file)) {
        Decode (stream);
    }
}

void Decode (Stream stream)
{
    /*code to decode the stream*/
}
```",markdown,rule-74223147079737f90d205ec176c32332ae9114fde2098ea7c7f8d5992846bb67,Resource Management,,,,,escalated,0.98242956,1
1143,Static Analysis,2020-05-18T14:51:00-04:00,89772,2020-05-18T14:54:28-04:00,medium,escalated,,,,,,CWE-227: 7PK - API Abuse,http://cwevis.org/browse/227,227,Microsoft/IdentityModel/Clients/ActiveDirectory/Internal/DictionaryRequestParameters/(self),logical,,,,,,,,,,,,,,,,,,,,,,,,,,,,,rule-dc56fd6c6aaaf7aef3e91a691e1f8bd8f7311763a2d3286fce16c6c5cf52b5e2,API Abuse,"The software uses an API in a manner contrary to its intended use.

An API is a contract between a caller and a callee. The most common forms of API misuse occurs when the caller does not honor its end of this contract. For example, if a program does not call chdir() after calling chroot(), it violates the contract that specifies how to change the active root directory in a secure fashion. Another good example of library abuse is expecting the callee to return trustworthy DNS information to the caller. In this case, the caller misuses the callee API by making certain assumptions about its behavior (that the return value can be used for authentication purposes). One can also violate the caller-callee contract from the other side. For example, if a coder subclasses SecureRandom and returns a non-random value, the contract is violated.",markdown,,,escalated,0.94525355,1
